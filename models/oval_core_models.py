#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Jul 26 09:33:33 2025 by generateDS.py version 2.44.3.
# Python 3.13.5 (tags/v3.13.5:6cb20a2, Jun 11 2025, 16:15:46) [MSC v.1943 64 bit (AMD64)]
#
# Command line options:
#   ('-o', 'oval_core_models.py')
#
# Command line arguments:
#   oval-definitions-schema.xsd
#
# Command line:
#   C:\Program Files\Python313\Scripts\generateDS -o "oval_core_models.py" oval-definitions-schema.xsd
#
# Current working directory (os.getcwd()):
#   5.11.1
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile('(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            value = ('%.15f' % float(input_data)).rstrip('0')
            if value.endswith('.'):
                value += '0'
            return value
    
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            input_data = input_data.strip()
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'{.*}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    s1 = s1.replace('\n', '&#10;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


#
# Start enum classes
#
class ArithmeticEnumeration(str, Enum):
    """ArithmeticEnumeration -- The ArithmeticEnumeration simple type defines basic arithmetic operations.  Currently add and multiply are defined.
    
    """
    ADD='add'
    MULTIPLY='multiply'


class CheckEnumeration(str, Enum):
    """CheckEnumeration -- The CheckEnumeration simple type defines acceptable check values, which are used to determine the final result of something based on the results of individual components. When used to define the relationship between objects and states, each check value defines how many of the matching objects (items except those with a status of does not exist) must satisfy the given state for the test to return true. When used to define the relationship between instances of a given entity, the different check values defines how many instances must be true for the entity to return true. When used to define the relationship between entities and multiple variable values, each check value defines how many variable values must be true for the entity to return true.
    
    """
    ALL='all' # A value of 'all' means that a final result of true is given if all the individual results under consideration are true.
    ATLEASTONE='at least one' # A value of 'at least one' means that a final result of true is given if at least one of the individual results under consideration is true.
    NONEEXIST='none exist' # A value of 'none exists' means that a test evaluates to true if no matching object exists that satisfy the data requirements.
    NONESATISFY='none satisfy' # A value of 'none satisfy' means that a final result of true is given if none the individual results under consideration are true.
    ONLYONE='only one' # A value of 'only one' means that a final result of true is given if one and only one of the individual results under consideration are true.


class ClassEnumeration(str, Enum):
    """ClassEnumeration -- The ClassEnumeration simple type defines the different classes of definitions. Each class defines a certain intent regarding how an OVAL Definition is written and what that definition is describing. The specified class gives a hint about the definition so a user can know what the definition writer is trying to say. Note that the class does not make a statement about whether a true result is good or bad as this depends on the use of an OVAL Definition. These classes are also used to group definitions by the type of system state they are describing. For example, this allows users to find all the vulnerability (or patch, or inventory, etc) definitions.
    
    """
    COMPLIANCE='compliance' # A compliance definition describes the state of a machine as it complies with a specific policy. A definition of this class will evaluate to true when the system is found to be compliant with the stated policy. Another way of thinking about this is that a compliance definition is stating "the system is compliant if ...".
    INVENTORY='inventory' # An inventory definition describes whether a specific piece of software is installed on the system. A definition of this class will evaluate to true when the specified software is found on the system. Another way of thinking about this is that an inventory definition is stating "the software is installed if ...".
    MISCELLANEOUS='miscellaneous' # The 'miscellaneous' class is used to identify definitions that do not fall into any of the other defined classes.
    PATCH='patch' # A patch definition details the machine state of whether a patch executable should be installed. A definition of this class will evaluate to true when the specified patch is missing from the system. Another way of thinking about this is that a patch definition is stating "the patch should be installed if ...". Note that word SHOULD is intended to mean more than just CAN the patch executable be installed. In other words, if a more recent patch is already installed then the specified patch might not need to be installed.
    VULNERABILITY='vulnerability' # A vulnerability definition describes the conditions under which a machine is vulnerable. A definition of this class will evaluate to true when the system is found to be vulnerable with the stated issue. Another way of thinking about this is that a vulnerability definition is stating "the system is vulnerable if ...".


class ComplexDatatypeEnumeration(str, Enum):
    """ComplexDatatypeEnumeration -- The ComplexDatatypeEnumeration simple type defines the complex legal datatypes that are supported in OVAL. These datatype describe the values of individual entities where the entity has some complex structure beyond simple string like content.
    
    """
    RECORD='record' # The record datatype describes an entity with structured set of named fields and values as its content. The only allowed operation within OVAL for record values is 'equals'. Note that the record datatype is not currently allowed when using variables.


class DateTimeFormatEnumeration(str, Enum):
    """DateTimeFormatEnumeration -- The DateTimeFormatEnumeration simple type defines the different date-time formats that are understood by OVAL. Note that in some cases there are a few different possibilities within a given format. Each of these possibilities is unique though and can be distinguished from each other. The different formats are used to clarify the higher level structure of the date-time string being used.
    
    """
    YEAR_MONTH_DAY='year_month_day' # The year_month_day value specifies date-time strings that follow the formats: 'yyyymmdd', 'yyyymmddThhmmss', 'yyyy/mm/dd hh:mm:ss', 'yyyy/mm/dd', 'yyyy-mm-dd hh:mm:ss', or 'yyyy-mm-dd'
    MONTH_DAY_YEAR='month_day_year' # The month_day_year value specifies date-time strings that follow the formats: 'mm/dd/yyyy hh:mm:ss', 'mm/dd/yyyy', 'mm-dd-yyyy hh:mm:ss', 'mm-dd-yyyy', 'NameOfMonth, dd yyyy hh:mm:ss' or 'NameOfMonth, dd yyyy', 'AbreviatedNameOfMonth, dd yyyy hh:mm:ss', or 'AbreviatedNameOfMonth, dd yyyy'
    DAY_MONTH_YEAR='day_month_year' # The day_month_year value specifies date-time strings that follow the formats: 'dd/mm/yyyy hh:mm:ss', 'dd/mm/yyyy', 'dd-mm-yyyy hh:mm:ss', or 'dd-mm-yyyy'
    WIN_FILETIME='win_filetime' # The win_filetime value specifies date-time strings that follow the windows file time format.
    SECONDS_SINCE_EPOCH='seconds_since_epoch' # The seconds_since_epoch value specifies date-time values that represent the time in seconds since the UNIX epoch. The Unix epoch is the time 00:00:00 UTC on January 1, 1970.
    CIM_DATETIME='cim_datetime' # The cim_datetime model is used by WMI and its value specifies date-time strings that follow the format: 'yyyymmddHHMMSS.mmmmmmsUUU', and alternatively 'yyyy-mm-dd HH:MM:SS:mmm' only when used in WMI Query Language queries.


class ExistenceEnumeration(str, Enum):
    """ExistenceEnumeration -- The ExistenceEnumeration simple type defines acceptable existence values, which are used to determine a result based on the existence of individual components. The main use for this is for a test regarding the existence of objects on the system. Its secondary use is for a state regarding the existence of entities in corresponding items.
    
    """
    ALL_EXIST='all_exist' # When used in the context of an OVAL state entity's check_existence attribute, a value of 'all_exist' means that every item entity for an object defined by the description exists on the system. When used in the context of an OVAL test's check_existence attribute, this value is equivalent to 'at_least_one_exists' because non-existent items have no impact upon evaluation.
    ANY_EXIST='any_exist' # A value of 'any_exist' means that zero or more objects defined by the description exist on the system.
    AT_LEAST_ONE_EXISTS='at_least_one_exists' # A value of 'at_least_one_exists' means that at least one object defined by the description exists on the system.
    NONE_EXIST='none_exist' # A value of 'none_exist' means that none of the objects defined by the description exist on the system.
    ONLY_ONE_EXISTS='only_one_exists' # A value of 'only_one_exists' means that only one object defined by the description exists on the system.


class FamilyEnumeration(str, Enum):
    """FamilyEnumeration -- The FamilyEnumeration simple type is a listing of families that OVAL supports at this time.  Since new family values can only be added with new version of the schema, the value of 'undefined' is to be used when the desired family is not available.  Note that use of the undefined family value does not target all families, rather it means that some family other than one of the defined values is targeted.
    
    """
    ANDROID='android' # The android value describes the Android mobile operating system.
    ASA='asa' # The asa value describes the Cisco ASA security devices.
    APPLE_IOS='apple_ios' # The apple_ios value describes the iOS mobile operating system.
    CATOS='catos' # The catos value describes the Cisco CatOS operating system.
    IOS='ios' # The ios value describes the Cisco IOS operating system.
    IOSXE='iosxe' # The iosxe value describes the Cisco IOS XE operating system.
    JUNOS='junos' # The junos value describes the Juniper JunOS operating system.
    MACOS='macos' # The macos value describes the Mac operating system.
    PIXOS='pixos' # The pixos value describes the Cisco PIX operating system.
    UNDEFINED='undefined' # The undefined value is to be used when the desired family is not available.
    UNIX='unix' # The unix value describes the UNIX operating system.
    VMWARE_INFRASTRUCTURE='vmware_infrastructure' # The vmware_infrastructure value describes VMWare Infrastructure.
    WINDOWS='windows' # The windows value describes the Microsoft Windows operating system.


class FilterActionEnumeration(str, Enum):
    """FilterActionEnumeration -- The FilterActionEnumeration simple type defines the different options for filtering sets of items.
    
    """
    EXCLUDE='exclude' # The exclude value specifies that all items that match the filter shall be excluded from set that the filter is applied to.
    INCLUDE='include' # The include value specifies that only items that match the filter shall be included in the set that the filter is applied to.


class MessageLevelEnumeration(str, Enum):
    """MessageLevelEnumeration -- The MessageLevelEnumeration simple type defines the different levels associated with a message. There is no specific criteria about which messages get assigned which level. This is completely arbitrary and up to the content producer to decide what is an error message and what is a debug message.
    
    """
    DEBUG='debug' # Debug messages should only be displayed by a tool when run in some sort of verbose mode.
    ERROR='error' # Error messages should be recorded when there was an error that did not allow the collection of specific data.
    FATAL='fatal' # A fatal message should be recorded when an error causes the failure of more than just a single piece of data.
    INFO='info' # Info messages are used to pass useful information about the data collection to a user.
    WARNING='warning' # A warning message reports something that might not correct but information was still collected.


class OperationEnumeration(str, Enum):
    """OperationEnumeration -- The OperationEnumeration simple type defines acceptable operations. Each operation defines how to compare entities against their actual values.
    
    """
    EQUALS='equals' # The 'equals' operation returns true if the actual value on the system is equal to the stated entity. When the specified datatype is a string, this results in a case-sensitive comparison.
    NOTEQUAL='not equal' # The 'not equal' operation returns true if the actual value on the system is not equal to the stated entity. When the specified datatype is a string, this results in a case-sensitive comparison.
    CASEINSENSITIVEEQUALS='case insensitive equals' # The 'case insensitive equals' operation is meant for string data and returns true if the actual value on the system is equal (using a case insensitive comparison) to the stated entity.
    CASEINSENSITIVENOTEQUAL='case insensitive not equal' # The 'case insensitive not equal' operation is meant for string data and returns true if the actual value on the system is not equal (using a case insensitive comparison) to the stated entity.
    GREATERTHAN='greater than' # The 'greater than' operation returns true if the actual value on the system is greater than the stated entity.
    LESSTHAN='less than' # The 'less than' operation returns true if the actual value on the system is less than the stated entity.
    GREATERTHANOREQUAL='greater than or equal' # The 'greater than or equal' operation returns true if the actual value on the system is greater than or equal to the stated entity.
    LESSTHANOREQUAL='less than or equal' # The 'less than or equal' operation returns true if the actual value on the system is less than or equal to the stated entity.
    BITWISEAND='bitwise and' # The 'bitwise and' operation is used to determine if a specific bit is set. It returns true if performing a BITWISE AND with the binary representation of the stated entity against the binary representation of the actual value on the system results in a binary value that is equal to the binary representation of the stated entity. For example, assuming a datatype of 'int', if the actual integer value of the setting on your machine is 6 (same as 0110 in binary), then performing a 'bitwise and' with the stated integer 4 (0100) returns 4 (0100). Since the result is the same as the state mask, then the test returns true. If the actual value on your machine is 1 (0001), then the 'bitwise and' with the stated integer 4 (0100) returns 0 (0000). Since the result is not the same as the stated mask, then the test fails.
    BITWISEOR='bitwise or' # The 'bitwise or' operation is used to determine if a specific bit is not set. It returns true if performing a BITWISE OR with the binary representation of the stated entity against the binary representation of the actual value on the system results in a binary value that is equal to the binary representation of the stated entity. For example, assuming a datatype of 'int', if the actual integer value of the setting on your machine is 6 (same as 0110 in binary), then performing a 'bitwise or' with the stated integer 14 (1110) returns 14 (1110). Since the result is the same as the state mask, then the test returns true. If the actual value on your machine is 1 (0001), then the 'bitwise or' with the stated integer 14 (1110) returns 15 (1111). Since the result is not the same as the stated mask, then the test fails.
    PATTERNMATCH='pattern match' # The 'pattern match' operation allows an item to be tested against a regular expression. When used by an entity in an OVAL Object, the regular expression represents the unique set of matching items on the system. OVAL supports a common subset of the regular expression character classes, operations, expressions and other lexical tokens defined within Perl 5's regular expression specification. For more information on the supported regular expression syntax in OVAL see: http://oval.mitre.org/language/about/re_support_5.6.html
    SUBSETOF='subset of' # The 'subset of' operation returns true if the actual set on the system is a subset of the set defined by the stated entity.
    SUPERSETOF='superset of' # The 'superset of' operation returns true if the actual set on the system is a superset of the set defined by the stated entity.


class OperatorEnumeration(str, Enum):
    """OperatorEnumeration -- The OperatorEnumeration simple type defines acceptable operators. Each operator defines how to evaluate multiple arguments.
    
    """
    AND='AND' # The AND operator produces a true result if every argument is true. If one or more arguments are false, the result of the AND is false. If one or more of the arguments are unknown, and if none of the arguments are false, then the AND operator produces a result of unknown.
    ONE='ONE' # The ONE operator produces a true result if one and only one argument is true. If there are more than argument is true (or if there are no true arguments), the result of the ONE is false. If one or more of the arguments are unknown, then the ONE operator produces a result of unknown.
    OR='OR' # The OR operator produces a true result if one or more arguments is true. If every argument is false, the result of the OR is false. If one or more of the arguments are unknown and if none of arguments are true, then the OR operator produces a result of unknown.
    XOR='XOR' # XOR is defined to be true if an odd number of its arguments are true, and false otherwise. If any of the arguments are unknown, then the XOR operator produces a result of unknown.


class SetOperatorEnumeration(str, Enum):
    """SetOperatorEnumeration -- The SetOperatorEnumeration simple type defines acceptable set operations. Set operations are used to take multiple different sets of objects within OVAL and merge them into a single unique set. The different operators that guide this merge are defined below. For each operator, if only a single object has been supplied, then the resulting set is simply that complete object.
    
    """
    COMPLEMENT='COMPLEMENT' # The complement operator is defined in OVAL as a relative complement. The resulting unique set contains everything that belongs to the first declared set that is not part of the second declared set. If A and B are sets (with A being the first declared set), then the relative complement is the set of elements in A, but not in B, with the duplicates removed.
    INTERSECTION='INTERSECTION' # The intersection of two sets in OVAL results in a unique set that contains everything that belongs to both sets in the collection, but nothing else. If A and B are sets, then the intersection of A and B contains all the elements of A that also belong to B, but no other elements, with the duplicates removed.
    UNION='UNION' # The union of two sets in OVAL results in a unique set that contains everything that belongs to either of the original sets. If A and B are sets, then the union of A and B contains all the elements of A and all elements of B, with the duplicates removed.


class SimpleDatatypeEnumeration(str, Enum):
    """SimpleDatatypeEnumeration -- The SimpleDatatypeEnumeration simple type defines the legal datatypes that are used to describe the values of individual entities that can be represented in a XML string field. The value may have structure and a pattern, but it is represented as string content.
    
    """
    BINARY='binary' # The binary datatype is used to represent hex-encoded data that is in raw (non-printable) form. This datatype conforms to the W3C Recommendation for binary data meaning that each binary octet is encoded as a character tuple, consisting of two hexadecimal digits {[0-9a-fA-F]} representing the octet code. Expected operations within OVAL for binary values are 'equals' and 'not equal'.
    BOOLEAN='boolean' # The boolean datatype represents standard boolean data, either true or false. This datatype conforms to the W3C Recommendation for boolean data meaning that the following literals are legal values: {true, false, 1, 0}. Expected operations within OVAL for boolean values are 'equals' and 'not equal'.
    EVR_STRING='evr_string' # The evr_string datatype represents the epoch, version, and release fields as a single version string. It has the form "EPOCH:VERSION-RELEASE". Comparisons involving this datatype should follow the algorithm of librpm's rpmvercmp() function. Expected operations within OVAL for evr_string values are 'equals', 'not equal', 'greater than', 'greater than or equal', 'less than', and 'less than or equal'.
    DEBIAN_EVR_STRING='debian_evr_string' # The debian_evr_string datatype represents the epoch, upstream_version, and debian_revision fields, for a Debian package, as a single version string. It has the form "EPOCH:UPSTREAM_VERSION-DEBIAN_REVISION". Comparisons involving this datatype should follow the algorithm outlined in Chapter 5 of the "Debian Policy Manual" (https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version). Note that a null epoch is equivalent to a value of '0'. An implementation of this is the cmpversions() function in dpkg's enquiry.c. Expected operations within OVAL for debian_evr_string values are 'equals', 'not equal', 'greater than', 'greater than or equal', 'less than', and 'less than or equal'.
    FILESET_REVISION='fileset_revision' # The fileset_revision datatype represents the version string related to filesets in HP-UX. An example would be 'A.03.61.00'. For more information, see the HP-UX "Software Distributor Administration Guide" (http://h20000.www2.hp.com/bc/docs/support/SupportManual/c01919399/c01919399.pdf). Expected operations within OVAL for fileset_version values are 'equals', 'not equal', 'greater than', 'greater than or equal', 'less than', and 'less than or equal'.
    FLOAT='float' # The float datatype describes standard float data. This datatype conforms to the W3C Recommendation for float data meaning it is patterned after the IEEE single-precision 32-bit floating point type. The format consists of a decimal followed, optionally, by the character 'E' or 'e', followed by an integer exponent. The special values positive and negative infinity and not-a-number have are represented by INF, -INF and NaN, respectively. Expected operations within OVAL for float values are 'equals', 'not equal', 'greater than', 'greater than or equal', 'less than', and 'less than or equal'.
    IOS_VERSION='ios_version' # The ios_version datatype describes Cisco IOS Train strings. These are in essence version strings for IOS. Please refer to Cisco's IOS Reference Guide for information on how to compare different Trains as they follow a very specific pattern. Expected operations within OVAL for ios_version values are 'equals', 'not equal', 'greater than', 'greater than or equal', 'less than', and 'less than or equal'.
    INT='int' # The int datatype describes standard integer data. This datatype conforms to the W3C Recommendation for integer data which follows the standard mathematical concept of the integer numbers. (no decimal point and infinite range) Expected operations within OVAL for int values are 'equals', 'not equal', 'greater than', 'greater than or equal', 'less than', 'less than or equal', 'bitwise and', and 'bitwise or'.
    IPV_4_ADDRESS='ipv4_address' # The ipv4_address datatype represents IPv4 addresses and IPv4 address prefixes. Its value space consists of the set of ordered pairs of integers where the first element of each pair is in the range [0,2^32) (the representable range of a 32-bit unsigned int), and the second is in the range [0,32]. The first element is an address, and the second is a prefix length. The lexical space is dotted-quad CIDR-like notation ('a.b.c.d' where 'a', 'b', 'c', and 'd' are integers from 0-255), optionally followed by a slash ('/') and either a prefix length (an integer from 0-32) or a netmask represented in the dotted-quad notation described previously. Examples of legal values are '192.0.2.0', '192.0.2.0/32', and '192.0.2.0/255.255.255.255'. Additionally, leading zeros are permitted such that '192.0.2.0' is equal to '192.000.002.000'. If a prefix length is not specified, it is implicitly equal to 32.The expected operations within OVAL for ipv4_address values are 'equals', 'not equal', 'greater than', 'greater than or equal', 'less than', 'less than or equal', 'subset of', and 'superset of'. All operations are defined in terms of the value space. Let A and B be ipv4_address values (i.e. ordered pairs from the value space). The following definitions assume that bits outside the prefix have been zeroed out. By zeroing the low order bits, they are effectively ignored for all operations. Implementations of the following operations MUST behave as if this has been done.The following defines how to perform each operation for the ipv4_address datatype. Let P_addr mean the first element of ordered pair P and P_prefix mean the second element.equals: A equals B if and only if A_addr == B_addr and A_prefix == B_prefix.not equal: A is not equal to B if and only if they don't satisfy the criteria for operator "equals".greater than: A is greater than B if and only if A_prefix == B_prefix and A_addr > B_addr. If A_prefix != B_prefix, i.e. prefix lengths are not equal, an error MUST be reported.greater than or equal: A is greater than or equal to B if and only if A_prefix == B_prefix and they satisfy either the criteria for operators "equal" or "greater than". If A_prefix != B_prefix, i.e. prefix lengths are not equal, an error MUST be reported.less than: A is less than B if and only if A_prefix == B_prefix and they don't satisfy the criteria for operator "greater than or equal". If A_prefix != B_prefix, i.e. prefix lengths are not equal, an error MUST be reported.less than or equal: A is less than or equal to B if and only if A_prefix == B_prefix and they don't satisfy the criteria for operator "greater than". If A_prefix != B_prefix, i.e. prefix lengths are not equal, an error MUST be reported.subset of: A is a subset of B if and only if every IPv4 address in subnet A is present in subnet B. In other words, A_prefix >= B_prefix and the high B_prefix bits of A_addr and B_addr are equal.superset of: A is a superset of B if and only if B is a subset of A.
    IPV_6_ADDRESS='ipv6_address' # The ipv6_address datatype represents IPv6 addresses and IPv6 address prefixes. Its value space consists of the set of ordered pairs of integers where the first element of each pair is in the range [0,2^128) (the representable range of a 128-bit unsigned int), and the second is in the range [0,128]. The first element is an address, and the second is a prefix length.The lexical space is CIDR notation given in IETF specification RFC 4291 for textual representations of IPv6 addresses and IPv6 address prefixes (see sections 2.2 and 2.3). If a prefix-length is not specified, it is implicitly equal to 128.The expected operations within OVAL for ipv6_address values are 'equals', 'not equal', 'greater than', 'greater than or equal', 'less than', 'less than or equal', 'subset of', and 'superset of'. All operations are defined in terms of the value space. Let A and B be ipv6_address values (i.e. ordered pairs from the value space). The following definitions assume that bits outside the prefix have been zeroed out. By zeroing the low order bits, they are effectively ignored for all operations. Implementations of the following operations MUST behave as if this has been done.The following defines how to perform each operation for the ipv6_address datatype. Let P_addr mean the first element of ordered pair P and P_prefix mean the second element.equals: A equals B if and only if A_addr == B_addr and A_prefix == B_prefix.not equal: A is not equal to B if and only if they don't satisfy the criteria for operator "equals".greater than: A is greater than B if and only if A_prefix == B_prefix and A_addr > B_addr. If A_prefix != B_prefix, an error MUST be reported.greater than or equal: A is greater than or equal to B if and only if A_prefix == B_prefix and they satisfy either the criteria for operators "equal" or "greater than". If A_prefix != B_prefix, an error MUST be reported.less than: A is less than B if and only if A_prefix == B_prefix and they don't satisfy the criteria for operator "greater than or equal". If A_prefix != B_prefix, an error MUST be reported.less than or equal: A is less than or equal to B if and only if A_prefix == B_prefix and they don't satisfy the criteria for operator "greater than". If A_prefix != B_prefix, an error MUST be reported.subset of: A is a subset of B if and only if every IPv6 address in subnet A is present in subnet B. In other words, A_prefix >= B_prefix and the high B_prefix bits of A_addr and B_addr are equal.superset of: A is a superset of B if and only if B is a subset of A.
    STRING='string' # The string datatype describes standard string data. This datatype conforms to the W3C Recommendation for string data. Expected operations within OVAL for string values are 'equals', 'not equal', 'case insensitive equals', 'case insensitive not equal', 'pattern match'.
    VERSION='version' # The version datatype represents a value that is a hierarchical list of non-negative integers separated by a single character delimiter. Note that any non-number character can be used as a delimiter and that different characters can be used within the same version string. So '#.#-#' is the same as '#.#.#' or '#c#c#' where '#' is any non-negative integer. Expected operations within OVAL for version values are 'equals', 'not equal', 'greater than', 'greater than or equal', 'less than', and 'less than or equal'.For example '#.#.#' or '#-#-#-#' where the numbers to the left are more significant than the numbers to the right. When performing an 'equals' operation on a version datatype, you should first check the left most number for equality. If that fails, then the values are not equal. If it succeeds, then check the second left most number for equality. Continue checking the numbers from left to right until the last number has been checked. If, after testing all the previous numbers, the last number is equal then the two versions are equal. When performing other operations, such as 'less than', 'less than or equal', 'greater than, or 'greater than or equal', similar logic as above is used. Start with the left most number and move from left to right. For each number, check if it is less than the number you are testing against. If it is, then the version in question is less than the version you are testing against. If the number is equal, then move to check the next number to the right. For example, to test if 5.7.23 is less than or equal to 5.8.0 you first compare 5 to 5. They are equal so you move on to compare 7 to 8. 7 is less than 8 so the entire test succeeds and 5.7.23 is 'less than or equal' to 5.8.0. The difference between the 'less than' and 'less than or equal' operations is how the last number is handled. If the last number is reached, the check should use the given operation (either 'less than' and 'less than or equal') to test the number. For example, to test if 4.23.6 is greater than 4.23.6 you first compare 4 to 4. They are equal so you move on to compare 23 to 23. They are equal so you move on to compare 6 to 6. This is the last number in the version and since 6 is not greater than 6, the entire test fails and 4.23.6 is not greater than 4.23.6.Version strings with a different number of components shall be padded with zeros to make them the same size. For example, if the version strings '1.2.3' and '6.7.8.9' are being compared, then the short one should be padded to become '1.2.3.0'.


class datatypeType(str, Enum):
    IPV_4_ADDRESS='ipv4_address'
    IPV_6_ADDRESS='ipv6_address'


class datatypeType3(str, Enum):
    IPV_4_ADDRESS='ipv4_address'
    IPV_6_ADDRESS='ipv6_address'
    STRING='string'


class datatypeType4(str, Enum):
    IPV_4_ADDRESS='ipv4_address'
    IPV_6_ADDRESS='ipv6_address'


class datatypeType5(str, Enum):
    IPV_4_ADDRESS='ipv4_address'
    IPV_6_ADDRESS='ipv6_address'
    STRING='string'


class datatypeType6(str, Enum):
    IOS_VERSION='ios_version'
    STRING='string' # 'string' is included to allow for regular expressions on IOS version strings.


#
# Start data representation classes
#
class oval_definitions(GeneratedsSuper):
    """oval_definitions -- The oval_definitions element is the root of an OVAL Definition Document. Its purpose is to bind together the major sections of a document - generator, definitions, tests, objects, states, and variables - which are the children of the root element.
    Enforce uniqueness amongst the ids differentiating the individual definition elements.
    Enforce uniqueness amongst the ids differentiating the individual test elements.
    Enforce uniqueness amongst the ids differentiating the individual object elements.
    Enforce uniqueness amongst the ids differentiating the individual state elements.
    Enforce uniqueness amongst the ids differentiating the individual variable elements.
    Requires each definition reference to refer to a valid definition id.
    Requires each test reference to refer to a valid test id.
    Requires each object reference to refer to a valid object id.
    Requires each state reference to refer to a valid state id.
    Requires each variable reference to refer to a valid variable id.
    Require each object reference in a set element to refer to a valid object id.
    Require each filter in a set element to refer to a valid state id.
    generator -- The required generator section provides information about when the definition file was compiled and under what version.
    definitions -- The optional definitions section contains 1 or more definitions.
    tests -- The optional tests section contains 1 or more tests.
    objects -- The optional objects section contains 1 or more objects.
    states -- The optional states section contains 1 or more states.
    variables -- The optional variables section contains 1 or more variables.
    Signature -- The optional Signature element allows an XML Signature as defined by the W3C to be attached to the document. This allows authentication and data integrity to be provided to the user. Enveloped signatures are supported. More information about the official W3C Recommendation regarding XML digital signatures can be found at http://www.w3.org/TR/xmldsig-core/.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, generator=None, definitions=None, tests=None, objects=None, states=None, variables=None, Signature=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.generator = generator
        self.generator_nsprefix_ = "oval-def"
        self.definitions = definitions
        self.definitions_nsprefix_ = "oval-def"
        self.tests = tests
        self.tests_nsprefix_ = "oval-def"
        self.objects = objects
        self.objects_nsprefix_ = "oval-def"
        self.states = states
        self.states_nsprefix_ = "oval-def"
        self.variables = variables
        self.variables_nsprefix_ = "oval-def"
        self.Signature = Signature
        self.Signature_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, oval_definitions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if oval_definitions.subclass:
            return oval_definitions.subclass(*args_, **kwargs_)
        else:
            return oval_definitions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_generator(self):
        return self.generator
    def set_generator(self, generator):
        self.generator = generator
    def get_definitions(self):
        return self.definitions
    def set_definitions(self, definitions):
        self.definitions = definitions
    def get_tests(self):
        return self.tests
    def set_tests(self, tests):
        self.tests = tests
    def get_objects(self):
        return self.objects
    def set_objects(self, objects):
        self.objects = objects
    def get_states(self):
        return self.states
    def set_states(self, states):
        self.states = states
    def get_variables(self):
        return self.variables
    def set_variables(self, variables):
        self.variables = variables
    def get_Signature(self):
        return self.Signature
    def set_Signature(self, Signature):
        self.Signature = Signature
    def has__content(self):
        if (
            self.generator is not None or
            self.definitions is not None or
            self.tests is not None or
            self.objects is not None or
            self.states is not None or
            self.variables is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', name_='oval_definitions', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('oval_definitions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'oval_definitions':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='oval_definitions')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='oval_definitions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='oval_definitions'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', name_='oval_definitions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.generator is not None:
            namespaceprefix_ = self.generator_nsprefix_ + ':' if (UseCapturedNS_ and self.generator_nsprefix_) else ''
            self.generator.export(outfile, level, namespaceprefix_, namespacedef_='', name_='generator', pretty_print=pretty_print)
        if self.definitions is not None:
            namespaceprefix_ = self.definitions_nsprefix_ + ':' if (UseCapturedNS_ and self.definitions_nsprefix_) else ''
            self.definitions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='definitions', pretty_print=pretty_print)
        if self.tests is not None:
            namespaceprefix_ = self.tests_nsprefix_ + ':' if (UseCapturedNS_ and self.tests_nsprefix_) else ''
            self.tests.export(outfile, level, namespaceprefix_, namespacedef_='', name_='tests', pretty_print=pretty_print)
        if self.objects is not None:
            namespaceprefix_ = self.objects_nsprefix_ + ':' if (UseCapturedNS_ and self.objects_nsprefix_) else ''
            self.objects.export(outfile, level, namespaceprefix_, namespacedef_='', name_='objects', pretty_print=pretty_print)
        if self.states is not None:
            namespaceprefix_ = self.states_nsprefix_ + ':' if (UseCapturedNS_ and self.states_nsprefix_) else ''
            self.states.export(outfile, level, namespaceprefix_, namespacedef_='', name_='states', pretty_print=pretty_print)
        if self.variables is not None:
            namespaceprefix_ = self.variables_nsprefix_ + ':' if (UseCapturedNS_ and self.variables_nsprefix_) else ''
            self.variables.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variables', pretty_print=pretty_print)
        if self.Signature is not None:
            namespaceprefix_ = self.Signature_nsprefix_ + ':' if (UseCapturedNS_ and self.Signature_nsprefix_) else ''
            self.Signature.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Signature', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'generator':
            obj_ = GeneratorType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.generator = obj_
            obj_.original_tagname_ = 'generator'
        elif nodeName_ == 'definitions':
            obj_ = DefinitionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.definitions = obj_
            obj_.original_tagname_ = 'definitions'
        elif nodeName_ == 'tests':
            obj_ = TestsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.tests = obj_
            obj_.original_tagname_ = 'tests'
        elif nodeName_ == 'objects':
            obj_ = ObjectsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.objects = obj_
            obj_.original_tagname_ = 'objects'
        elif nodeName_ == 'states':
            obj_ = StatesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.states = obj_
            obj_.original_tagname_ = 'states'
        elif nodeName_ == 'variables':
            obj_ = VariablesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variables = obj_
            obj_.original_tagname_ = 'variables'
        elif nodeName_ == 'Signature':
            obj_ = SignatureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
# end class oval_definitions


class DefinitionsType(GeneratedsSuper):
    """DefinitionsType -- The DefinitionsType complex type is a container for one or more definition elements. Each definition element describes a single OVAL Definition. Please refer to the description of the DefinitionType for more information about an individual definition.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, definition=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        if definition is None:
            self.definition = []
        else:
            self.definition = definition
        self.definition_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DefinitionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DefinitionsType.subclass:
            return DefinitionsType.subclass(*args_, **kwargs_)
        else:
            return DefinitionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_definition(self):
        return self.definition
    def set_definition(self, definition):
        self.definition = definition
    def add_definition(self, value):
        self.definition.append(value)
    def insert_definition_at(self, index, value):
        self.definition.insert(index, value)
    def replace_definition_at(self, index, value):
        self.definition[index] = value
    def has__content(self):
        if (
            self.definition
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='DefinitionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DefinitionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DefinitionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DefinitionsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DefinitionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DefinitionsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='DefinitionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for definition_ in self.definition:
            namespaceprefix_ = self.definition_nsprefix_ + ':' if (UseCapturedNS_ and self.definition_nsprefix_) else ''
            definition_.export(outfile, level, namespaceprefix_='oval-def:', namespacedef_='', name_='definition', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'definition':
            obj_ = DefinitionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.definition.append(obj_)
            obj_.original_tagname_ = 'definition'
# end class DefinitionsType


class DefinitionType(GeneratedsSuper):
    """DefinitionType -- The DefinitionType defines a single OVAL Definition. A definition is the key structure in OVAL. It is analogous to the logical sentence or proposition: if a computer's state matches the configuration parameters laid out in the criteria, then that computer exhibits the state described. The DefinitionType contains a section for various metadata related elements that describe the definition. This includes a description, version, affected system types, and reference information. The notes section of a definition should be used to hold information that might be helpful to someone examining the technical aspects of the definition. For example, why certain tests have been included in the criteria, or maybe a link to where further information can be found. The DefinitionType also (unless the definition is deprecated) contains a criteria child element that joins individual tests together with a logical operator to specify the specific computer state being described.
    The required id attribute is the OVAL-ID of the Definition. The form of an OVAL-ID must follow the specific format described by the oval:DefinitionIDPattern. The required version attribute holds the current version of the definition. Versions are integers, starting at 1 and incrementing every time a definition is modified. The required class attribute indicates the specific class to which the definition belongs. The class gives a hint to a user so they can know what the definition writer is trying to say. See the definition of oval-def:ClassEnumeration for more information about the different valid classes. The optional deprecated attribute signifies that an id is no longer to be used or referenced but the information has been kept around for historic purposes.
    When the deprecated attribute is set to true, the definition is considered to be deprecated. The criteria child element of a deprecated definition is optional. If a deprecated definition does not contain a criteria child element, the definition must evaluate to "not evaluated". If a deprecated definition contains a criteria child element, an interpreter should evaluate the definition as if it were not deprecated, but an interpreter may evaluate the definition to "not evaluated".
    metadata -- Each affected element must have a unique family attribute value.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, version=None, class_=None, deprecated=False, Signature=None, metadata=None, notes=None, criteria=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.version = _cast(int, version)
        self.version_nsprefix_ = None
        self.class_ = _cast(None, class_)
        self.class__nsprefix_ = None
        self.deprecated = _cast(bool, deprecated)
        self.deprecated_nsprefix_ = None
        self.Signature = Signature
        self.Signature_nsprefix_ = "ds"
        self.metadata = metadata
        self.metadata_nsprefix_ = "oval-def"
        self.notes = notes
        self.notes_nsprefix_ = "oval"
        self.criteria = criteria
        self.criteria_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DefinitionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DefinitionType.subclass:
            return DefinitionType.subclass(*args_, **kwargs_)
        else:
            return DefinitionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Signature(self):
        return self.Signature
    def set_Signature(self, Signature):
        self.Signature = Signature
    def get_metadata(self):
        return self.metadata
    def set_metadata(self, metadata):
        self.metadata = metadata
    def get_notes(self):
        return self.notes
    def set_notes(self, notes):
        self.notes = notes
    def get_criteria(self):
        return self.criteria
    def set_criteria(self, criteria):
        self.criteria = criteria
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_class(self):
        return self.class_
    def set_class(self, class_):
        self.class_ = class_
    def get_deprecated(self):
        return self.deprecated
    def set_deprecated(self, deprecated):
        self.deprecated = deprecated
    def validate_DefinitionIDPattern(self, value):
        # Validate type oval:DefinitionIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_DefinitionIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_DefinitionIDPattern_patterns_, ))
    validate_DefinitionIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:def:[1-9][0-9]*)$']]
    def validate_ClassEnumeration(self, value):
        # Validate type oval:ClassEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['compliance', 'inventory', 'miscellaneous', 'patch', 'vulnerability']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ClassEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.Signature is not None or
            self.metadata is not None or
            self.notes is not None or
            self.criteria is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='DefinitionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DefinitionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DefinitionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DefinitionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DefinitionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DefinitionType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version="%s"' % self.gds_format_integer(self.version, input_name='version'))
        if self.class_ is not None and 'class_' not in already_processed:
            already_processed.add('class_')
            outfile.write(' class=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.class_), input_name='class')), ))
        if self.deprecated and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            outfile.write(' deprecated="%s"' % self.gds_format_boolean(self.deprecated, input_name='deprecated'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='DefinitionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Signature is not None:
            namespaceprefix_ = self.Signature_nsprefix_ + ':' if (UseCapturedNS_ and self.Signature_nsprefix_) else ''
            self.Signature.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Signature', pretty_print=pretty_print)
        if self.metadata is not None:
            namespaceprefix_ = self.metadata_nsprefix_ + ':' if (UseCapturedNS_ and self.metadata_nsprefix_) else ''
            self.metadata.export(outfile, level, namespaceprefix_, namespacedef_='', name_='metadata', pretty_print=pretty_print)
        if self.notes is not None:
            namespaceprefix_ = self.notes_nsprefix_ + ':' if (UseCapturedNS_ and self.notes_nsprefix_) else ''
            self.notes.export(outfile, level, namespaceprefix_='oval:', namespacedef_='', name_='notes', pretty_print=pretty_print)
        if self.criteria is not None:
            namespaceprefix_ = self.criteria_nsprefix_ + ':' if (UseCapturedNS_ and self.criteria_nsprefix_) else ''
            self.criteria.export(outfile, level, namespaceprefix_, namespacedef_='', name_='criteria', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
            self.validate_DefinitionIDPattern(self.id)    # validate type DefinitionIDPattern
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = self.gds_parse_integer(value, node, 'version')
            if self.version < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('class', node)
        if value is not None and 'class' not in already_processed:
            already_processed.add('class')
            self.class_ = value
            self.validate_ClassEnumeration(self.class_)    # validate type ClassEnumeration
        value = find_attr_value_('deprecated', node)
        if value is not None and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            if value in ('true', '1'):
                self.deprecated = True
            elif value in ('false', '0'):
                self.deprecated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Signature':
            obj_ = SignatureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
        elif nodeName_ == 'metadata':
            obj_ = MetadataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.metadata = obj_
            obj_.original_tagname_ = 'metadata'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
        elif nodeName_ == 'criteria':
            obj_ = CriteriaType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.criteria = obj_
            obj_.original_tagname_ = 'criteria'
# end class DefinitionType


class MetadataType(GeneratedsSuper):
    """MetadataType -- The MetadataType complex type contains all the metadata available to an OVAL Definition. This metadata is for informational purposes only and is not part of the criteria used to evaluate machine state. The required title child element holds a short string that is used to quickly identify the definition to a human user. The affected metadata item contains information about the system(s) for which the definition has been written. Remember that this is just metadata and not part of the criteria. Please refer to the AffectedType description for more information. The required description element contains a textual description of the configuration state being addressed by the OVAL Definition. In the case of a definition from the vulnerability class, the reference is usually the Common Vulnerability and Exposures (CVE) Identifier, and this description field corresponds with the CVE description.
    Additional metadata is also allowed although it is not part of the official OVAL Schema. Individual organizations can place metadata items that they feel are important and these will be skipped during the validation. All OVAL really cares about is that the stated metadata items are there.
    affected -- Each affected platform element must have a unique value.
    Each affected product element must have a unique value.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, title=None, affected=None, reference=None, description=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.title = title
        self.title_nsprefix_ = "oval-def"
        if affected is None:
            self.affected = []
        else:
            self.affected = affected
        self.affected_nsprefix_ = "oval-def"
        if reference is None:
            self.reference = []
        else:
            self.reference = reference
        self.reference_nsprefix_ = "oval-def"
        self.description = description
        self.description_nsprefix_ = "oval-def"
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetadataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetadataType.subclass:
            return MetadataType.subclass(*args_, **kwargs_)
        else:
            return MetadataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_title(self):
        return self.title
    def set_title(self, title):
        self.title = title
    def get_affected(self):
        return self.affected
    def set_affected(self, affected):
        self.affected = affected
    def add_affected(self, value):
        self.affected.append(value)
    def insert_affected_at(self, index, value):
        self.affected.insert(index, value)
    def replace_affected_at(self, index, value):
        self.affected[index] = value
    def get_reference(self):
        return self.reference
    def set_reference(self, reference):
        self.reference = reference
    def add_reference(self, value):
        self.reference.append(value)
    def insert_reference_at(self, index, value):
        self.reference.insert(index, value)
    def replace_reference_at(self, index, value):
        self.reference[index] = value
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def has__content(self):
        if (
            self.title is not None or
            self.affected or
            self.reference or
            self.description is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='MetadataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetadataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MetadataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetadataType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetadataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetadataType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='MetadataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.title is not None:
            namespaceprefix_ = self.title_nsprefix_ + ':' if (UseCapturedNS_ and self.title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stitle>%s</%stitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.title), input_name='title')), namespaceprefix_ , eol_))
        for affected_ in self.affected:
            namespaceprefix_ = self.affected_nsprefix_ + ':' if (UseCapturedNS_ and self.affected_nsprefix_) else ''
            affected_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='affected', pretty_print=pretty_print)
        for reference_ in self.reference:
            namespaceprefix_ = self.reference_nsprefix_ + ':' if (UseCapturedNS_ and self.reference_nsprefix_) else ''
            reference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='reference', pretty_print=pretty_print)
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'title')
            value_ = self.gds_validate_string(value_, node, 'title')
            self.title = value_
            self.title_nsprefix_ = child_.prefix
        elif nodeName_ == 'affected':
            obj_ = AffectedType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.affected.append(obj_)
            obj_.original_tagname_ = 'affected'
        elif nodeName_ == 'reference':
            obj_ = ReferenceType1.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.reference.append(obj_)
            obj_.original_tagname_ = 'reference'
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'MetadataType')
            self.anytypeobjs_.append(content_)
# end class MetadataType


class AffectedType(GeneratedsSuper):
    """AffectedType -- Each OVAL Definition is written to evaluate a certain type of system(s). The family, platform(s), and product(s) of this target are described by the AffectedType whose main purpose is to provide hints for tools using OVAL Definitions. For instance, to help a reporting tool only use Windows definitions, or to preselect only Red Hat definitions to be evaluated. Note, the inclusion of a particular platform or product does not mean the definition is physically checking for the existence of the platform or product. For the actual test to be performed, the correct test must still be included in the definition's criteria section.
    The AffectedType complex type details the specific system, application, subsystem, library, etc. for which a definition has been written. If a definition is not tied to a specific product, then this element should not be included. The absence of the platform or product element can be thought of as definition applying to all platforms or products. The inclusion of a particular platform or product does not mean the definition is physically checking for the existence of the platform or product. For the actual test to be performed, the correct test must still be included in the definition's criteria section. To increase the utility of this element, care should be taken when assigning and using strings for product names. The schema places no restrictions on the values that can be assigned, potentially leading to many different representations of the same value. For example, 'Internet Explorer' and 'IE' might be used to refer to the same product. The current convention is to fully spell out all terms, and avoid the use of abbreviations at all costs.
    Please note that the AffectedType will change in future versions of OVAL in order to support the Common Platform Enumeration (CPE).
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, family=None, platform=None, product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.family = _cast(None, family)
        self.family_nsprefix_ = None
        if platform is None:
            self.platform = []
        else:
            self.platform = platform
        self.platform_nsprefix_ = None
        if product is None:
            self.product = []
        else:
            self.product = product
        self.product_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AffectedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AffectedType.subclass:
            return AffectedType.subclass(*args_, **kwargs_)
        else:
            return AffectedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_platform(self):
        return self.platform
    def set_platform(self, platform):
        self.platform = platform
    def add_platform(self, value):
        self.platform.append(value)
    def insert_platform_at(self, index, value):
        self.platform.insert(index, value)
    def replace_platform_at(self, index, value):
        self.platform[index] = value
    def get_product(self):
        return self.product
    def set_product(self, product):
        self.product = product
    def add_product(self, value):
        self.product.append(value)
    def insert_product_at(self, index, value):
        self.product.insert(index, value)
    def replace_product_at(self, index, value):
        self.product[index] = value
    def get_family(self):
        return self.family
    def set_family(self, family):
        self.family = family
    def validate_FamilyEnumeration(self, value):
        # Validate type oval:FamilyEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['android', 'asa', 'apple_ios', 'catos', 'ios', 'iosxe', 'junos', 'macos', 'pixos', 'undefined', 'unix', 'vmware_infrastructure', 'windows']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FamilyEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.platform or
            self.product
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='AffectedType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AffectedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AffectedType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AffectedType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AffectedType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AffectedType'):
        if self.family is not None and 'family' not in already_processed:
            already_processed.add('family')
            outfile.write(' family=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.family), input_name='family')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='AffectedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for platform_ in self.platform:
            namespaceprefix_ = self.platform_nsprefix_ + ':' if (UseCapturedNS_ and self.platform_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splatform>%s</%splatform>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(platform_), input_name='platform')), namespaceprefix_ , eol_))
        for product_ in self.product:
            namespaceprefix_ = self.product_nsprefix_ + ':' if (UseCapturedNS_ and self.product_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproduct>%s</%sproduct>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(product_), input_name='product')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('family', node)
        if value is not None and 'family' not in already_processed:
            already_processed.add('family')
            self.family = value
            self.validate_FamilyEnumeration(self.family)    # validate type FamilyEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'platform':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'platform')
            value_ = self.gds_validate_string(value_, node, 'platform')
            self.platform.append(value_)
            self.platform_nsprefix_ = child_.prefix
        elif nodeName_ == 'product':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'product')
            value_ = self.gds_validate_string(value_, node, 'product')
            self.product.append(value_)
            self.product_nsprefix_ = child_.prefix
# end class AffectedType


class ReferenceType1(GeneratedsSuper):
    """ReferenceType1 -- The ReferenceType complex type links the OVAL Definition to a definitive external reference. For example, CVE Identifiers are used for referencing vulnerabilities. The intended purpose for this reference is to link the definition to a variety of other sources that address the same issue being specified by the OVAL Definition.
    The required source attribute specifies where the reference is coming from. In other words, it identifies the reference repository being used. The required ref_id attribute is the external id of the reference. The optional ref_url attribute is the URL to the reference.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, source=None, ref_id=None, ref_url=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.source = _cast(None, source)
        self.source_nsprefix_ = None
        self.ref_id = _cast(None, ref_id)
        self.ref_id_nsprefix_ = None
        self.ref_url = _cast(None, ref_url)
        self.ref_url_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType1.subclass:
            return ReferenceType1.subclass(*args_, **kwargs_)
        else:
            return ReferenceType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_source(self):
        return self.source
    def set_source(self, source):
        self.source = source
    def get_ref_id(self):
        return self.ref_id
    def set_ref_id(self, ref_id):
        self.ref_id = ref_id
    def get_ref_url(self):
        return self.ref_url
    def set_ref_url(self, ref_url):
        self.ref_url = ref_url
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ReferenceType1', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReferenceType1':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReferenceType1')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReferenceType1', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReferenceType1'):
        if self.source is not None and 'source' not in already_processed:
            already_processed.add('source')
            outfile.write(' source=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.source), input_name='source')), ))
        if self.ref_id is not None and 'ref_id' not in already_processed:
            already_processed.add('ref_id')
            outfile.write(' ref_id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ref_id), input_name='ref_id')), ))
        if self.ref_url is not None and 'ref_url' not in already_processed:
            already_processed.add('ref_url')
            outfile.write(' ref_url=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ref_url), input_name='ref_url')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ReferenceType1', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('source', node)
        if value is not None and 'source' not in already_processed:
            already_processed.add('source')
            self.source = value
        value = find_attr_value_('ref_id', node)
        if value is not None and 'ref_id' not in already_processed:
            already_processed.add('ref_id')
            self.ref_id = value
        value = find_attr_value_('ref_url', node)
        if value is not None and 'ref_url' not in already_processed:
            already_processed.add('ref_url')
            self.ref_url = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class ReferenceType1


class CriteriaType(GeneratedsSuper):
    """CriteriaType -- The CriteriaType complex type describes a container for a set of sub criteria, criteria, criterion, or extend_definition elements allowing complex logical trees to be constructed. Each referenced test is represented by a criterion element. Please refer to the description of the CriterionType for more information about and individual criterion element. The optional extend_definition element allows existing definitions to be included in the criteria. Refer to the description of the ExtendDefinitionType for more information.
    The required operator attribute provides the logical operator that binds the different statements inside a criteria together. The optional negate attribute signifies that the result of the criteria as a whole should be negated during analysis. For example, consider a criteria that evaluates to TRUE if certain software is installed. By negating this test, it now evaluates to TRUE if the software is NOT installed. The optional comment attribute provides a short description of the criteria.
    The optional applicability_check attribute provides a Boolean flag that when true indicates that the criteria is being used to determine whether the OVAL Definition applies to a given system.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, applicability_check=None, operator='AND', negate=False, comment=None, criteria=None, criterion=None, extend_definition=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.applicability_check = _cast(bool, applicability_check)
        self.applicability_check_nsprefix_ = None
        self.operator = _cast(None, operator)
        self.operator_nsprefix_ = None
        self.negate = _cast(bool, negate)
        self.negate_nsprefix_ = None
        self.comment = _cast(None, comment)
        self.comment_nsprefix_ = None
        if criteria is None:
            self.criteria = []
        else:
            self.criteria = criteria
        self.criteria_nsprefix_ = "oval-def"
        if criterion is None:
            self.criterion = []
        else:
            self.criterion = criterion
        self.criterion_nsprefix_ = "oval-def"
        if extend_definition is None:
            self.extend_definition = []
        else:
            self.extend_definition = extend_definition
        self.extend_definition_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CriteriaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CriteriaType.subclass:
            return CriteriaType.subclass(*args_, **kwargs_)
        else:
            return CriteriaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_criteria(self):
        return self.criteria
    def set_criteria(self, criteria):
        self.criteria = criteria
    def add_criteria(self, value):
        self.criteria.append(value)
    def insert_criteria_at(self, index, value):
        self.criteria.insert(index, value)
    def replace_criteria_at(self, index, value):
        self.criteria[index] = value
    def get_criterion(self):
        return self.criterion
    def set_criterion(self, criterion):
        self.criterion = criterion
    def add_criterion(self, value):
        self.criterion.append(value)
    def insert_criterion_at(self, index, value):
        self.criterion.insert(index, value)
    def replace_criterion_at(self, index, value):
        self.criterion[index] = value
    def get_extend_definition(self):
        return self.extend_definition
    def set_extend_definition(self, extend_definition):
        self.extend_definition = extend_definition
    def add_extend_definition(self, value):
        self.extend_definition.append(value)
    def insert_extend_definition_at(self, index, value):
        self.extend_definition.insert(index, value)
    def replace_extend_definition_at(self, index, value):
        self.extend_definition[index] = value
    def get_applicability_check(self):
        return self.applicability_check
    def set_applicability_check(self, applicability_check):
        self.applicability_check = applicability_check
    def get_operator(self):
        return self.operator
    def set_operator(self, operator):
        self.operator = operator
    def get_negate(self):
        return self.negate
    def set_negate(self, negate):
        self.negate = negate
    def get_comment(self):
        return self.comment
    def set_comment(self, comment):
        self.comment = comment
    def validate_OperatorEnumeration(self, value):
        # Validate type oval:OperatorEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AND', 'ONE', 'OR', 'XOR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperatorEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_NonEmptyStringType(self, value):
        # Validate type oval:NonEmptyStringType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NonEmptyStringType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.criteria or
            self.criterion or
            self.extend_definition
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='CriteriaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CriteriaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CriteriaType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CriteriaType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CriteriaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CriteriaType'):
        if self.applicability_check is not None and 'applicability_check' not in already_processed:
            already_processed.add('applicability_check')
            outfile.write(' applicability_check="%s"' % self.gds_format_boolean(self.applicability_check, input_name='applicability_check'))
        if self.operator != "AND" and 'operator' not in already_processed:
            already_processed.add('operator')
            outfile.write(' operator=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operator), input_name='operator')), ))
        if self.negate and 'negate' not in already_processed:
            already_processed.add('negate')
            outfile.write(' negate="%s"' % self.gds_format_boolean(self.negate, input_name='negate'))
        if self.comment is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            outfile.write(' comment=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.comment), input_name='comment')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='CriteriaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for criteria_ in self.criteria:
            namespaceprefix_ = self.criteria_nsprefix_ + ':' if (UseCapturedNS_ and self.criteria_nsprefix_) else ''
            criteria_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='criteria', pretty_print=pretty_print)
        for criterion_ in self.criterion:
            namespaceprefix_ = self.criterion_nsprefix_ + ':' if (UseCapturedNS_ and self.criterion_nsprefix_) else ''
            criterion_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='criterion', pretty_print=pretty_print)
        for extend_definition_ in self.extend_definition:
            namespaceprefix_ = self.extend_definition_nsprefix_ + ':' if (UseCapturedNS_ and self.extend_definition_nsprefix_) else ''
            extend_definition_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='extend_definition', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('applicability_check', node)
        if value is not None and 'applicability_check' not in already_processed:
            already_processed.add('applicability_check')
            if value in ('true', '1'):
                self.applicability_check = True
            elif value in ('false', '0'):
                self.applicability_check = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('operator', node)
        if value is not None and 'operator' not in already_processed:
            already_processed.add('operator')
            self.operator = value
            self.validate_OperatorEnumeration(self.operator)    # validate type OperatorEnumeration
        value = find_attr_value_('negate', node)
        if value is not None and 'negate' not in already_processed:
            already_processed.add('negate')
            if value in ('true', '1'):
                self.negate = True
            elif value in ('false', '0'):
                self.negate = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('comment', node)
        if value is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            self.comment = value
            self.validate_NonEmptyStringType(self.comment)    # validate type NonEmptyStringType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'criteria':
            obj_ = CriteriaType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.criteria.append(obj_)
            obj_.original_tagname_ = 'criteria'
        elif nodeName_ == 'criterion':
            obj_ = CriterionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.criterion.append(obj_)
            obj_.original_tagname_ = 'criterion'
        elif nodeName_ == 'extend_definition':
            obj_ = ExtendDefinitionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.extend_definition.append(obj_)
            obj_.original_tagname_ = 'extend_definition'
# end class CriteriaType


class CriterionType(GeneratedsSuper):
    """CriterionType -- The CriterionType complex type identifies a specific test to be included in the definition's criteria.
    The required test_ref attribute is the actual id of the test being referenced. The optional negate attribute signifies that the result of an individual test should be negated during analysis. For example, consider a test that evaluates to TRUE if a specific patch is installed. By negating this test, it now evaluates to TRUE if the patch is NOT installed. The optional comment attribute provides a short description of the specified test and should mirror the comment attribute of the actual test.
    The optional applicability_check attribute provides a Boolean flag that when true indicates that the criterion is being used to determine whether the OVAL Definition applies to a given system.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, applicability_check=None, test_ref=None, negate=False, comment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.applicability_check = _cast(bool, applicability_check)
        self.applicability_check_nsprefix_ = None
        self.test_ref = _cast(None, test_ref)
        self.test_ref_nsprefix_ = None
        self.negate = _cast(bool, negate)
        self.negate_nsprefix_ = None
        self.comment = _cast(None, comment)
        self.comment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CriterionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CriterionType.subclass:
            return CriterionType.subclass(*args_, **kwargs_)
        else:
            return CriterionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_applicability_check(self):
        return self.applicability_check
    def set_applicability_check(self, applicability_check):
        self.applicability_check = applicability_check
    def get_test_ref(self):
        return self.test_ref
    def set_test_ref(self, test_ref):
        self.test_ref = test_ref
    def get_negate(self):
        return self.negate
    def set_negate(self, negate):
        self.negate = negate
    def get_comment(self):
        return self.comment
    def set_comment(self, comment):
        self.comment = comment
    def validate_TestIDPattern(self, value):
        # Validate type oval:TestIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_TestIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TestIDPattern_patterns_, ))
    validate_TestIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:tst:[1-9][0-9]*)$']]
    def validate_NonEmptyStringType(self, value):
        # Validate type oval:NonEmptyStringType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NonEmptyStringType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='CriterionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CriterionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CriterionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CriterionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CriterionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CriterionType'):
        if self.applicability_check is not None and 'applicability_check' not in already_processed:
            already_processed.add('applicability_check')
            outfile.write(' applicability_check="%s"' % self.gds_format_boolean(self.applicability_check, input_name='applicability_check'))
        if self.test_ref is not None and 'test_ref' not in already_processed:
            already_processed.add('test_ref')
            outfile.write(' test_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.test_ref), input_name='test_ref')), ))
        if self.negate and 'negate' not in already_processed:
            already_processed.add('negate')
            outfile.write(' negate="%s"' % self.gds_format_boolean(self.negate, input_name='negate'))
        if self.comment is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            outfile.write(' comment=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.comment), input_name='comment')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='CriterionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('applicability_check', node)
        if value is not None and 'applicability_check' not in already_processed:
            already_processed.add('applicability_check')
            if value in ('true', '1'):
                self.applicability_check = True
            elif value in ('false', '0'):
                self.applicability_check = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('test_ref', node)
        if value is not None and 'test_ref' not in already_processed:
            already_processed.add('test_ref')
            self.test_ref = value
            self.validate_TestIDPattern(self.test_ref)    # validate type TestIDPattern
        value = find_attr_value_('negate', node)
        if value is not None and 'negate' not in already_processed:
            already_processed.add('negate')
            if value in ('true', '1'):
                self.negate = True
            elif value in ('false', '0'):
                self.negate = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('comment', node)
        if value is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            self.comment = value
            self.validate_NonEmptyStringType(self.comment)    # validate type NonEmptyStringType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class CriterionType


class ExtendDefinitionType(GeneratedsSuper):
    """ExtendDefinitionType -- The ExtendDefinitionType complex type allows existing definitions to be extended by another definition. This works by evaluating the extended definition and then using the result within the logical context of the extending definition.
    The required definition_ref attribute is the actual id of the definition being extended. The optional negate attribute signifies that the result of an extended definition should be negated during analysis. For example, consider a definition that evaluates TRUE if certainsoftware is installed. By negating the definition, it now evaluates to TRUE if the software is NOT installed. The optional comment attribute provides a short description of the specified definition and should mirror the title metadata of the extended definition.
    The optional applicability_check attribute provides a Boolean flag that when true indicates that the extend_definition is being used to determine whether the OVAL Definition applies to a given system.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, applicability_check=None, definition_ref=None, negate=False, comment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.applicability_check = _cast(bool, applicability_check)
        self.applicability_check_nsprefix_ = None
        self.definition_ref = _cast(None, definition_ref)
        self.definition_ref_nsprefix_ = None
        self.negate = _cast(bool, negate)
        self.negate_nsprefix_ = None
        self.comment = _cast(None, comment)
        self.comment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtendDefinitionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtendDefinitionType.subclass:
            return ExtendDefinitionType.subclass(*args_, **kwargs_)
        else:
            return ExtendDefinitionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_applicability_check(self):
        return self.applicability_check
    def set_applicability_check(self, applicability_check):
        self.applicability_check = applicability_check
    def get_definition_ref(self):
        return self.definition_ref
    def set_definition_ref(self, definition_ref):
        self.definition_ref = definition_ref
    def get_negate(self):
        return self.negate
    def set_negate(self, negate):
        self.negate = negate
    def get_comment(self):
        return self.comment
    def set_comment(self, comment):
        self.comment = comment
    def validate_DefinitionIDPattern(self, value):
        # Validate type oval:DefinitionIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_DefinitionIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_DefinitionIDPattern_patterns_, ))
    validate_DefinitionIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:def:[1-9][0-9]*)$']]
    def validate_NonEmptyStringType(self, value):
        # Validate type oval:NonEmptyStringType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NonEmptyStringType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ExtendDefinitionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtendDefinitionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExtendDefinitionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExtendDefinitionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExtendDefinitionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExtendDefinitionType'):
        if self.applicability_check is not None and 'applicability_check' not in already_processed:
            already_processed.add('applicability_check')
            outfile.write(' applicability_check="%s"' % self.gds_format_boolean(self.applicability_check, input_name='applicability_check'))
        if self.definition_ref is not None and 'definition_ref' not in already_processed:
            already_processed.add('definition_ref')
            outfile.write(' definition_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.definition_ref), input_name='definition_ref')), ))
        if self.negate and 'negate' not in already_processed:
            already_processed.add('negate')
            outfile.write(' negate="%s"' % self.gds_format_boolean(self.negate, input_name='negate'))
        if self.comment is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            outfile.write(' comment=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.comment), input_name='comment')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ExtendDefinitionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('applicability_check', node)
        if value is not None and 'applicability_check' not in already_processed:
            already_processed.add('applicability_check')
            if value in ('true', '1'):
                self.applicability_check = True
            elif value in ('false', '0'):
                self.applicability_check = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('definition_ref', node)
        if value is not None and 'definition_ref' not in already_processed:
            already_processed.add('definition_ref')
            self.definition_ref = value
            self.validate_DefinitionIDPattern(self.definition_ref)    # validate type DefinitionIDPattern
        value = find_attr_value_('negate', node)
        if value is not None and 'negate' not in already_processed:
            already_processed.add('negate')
            if value in ('true', '1'):
                self.negate = True
            elif value in ('false', '0'):
                self.negate = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('comment', node)
        if value is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            self.comment = value
            self.validate_NonEmptyStringType(self.comment)    # validate type NonEmptyStringType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class ExtendDefinitionType


class TestsType(GeneratedsSuper):
    """TestsType -- The TestsType complex type is a container for one or more test child elements. Each test element describes a single OVAL Test. Please refer to the description of the TestType for more information about an individual test.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, test=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        if test is None:
            self.test = []
        else:
            self.test = test
        self.test_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TestsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TestsType.subclass:
            return TestsType.subclass(*args_, **kwargs_)
        else:
            return TestsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_test(self):
        return self.test
    def set_test(self, test):
        self.test = test
    def add_test(self, value):
        self.test.append(value)
    def insert_test_at(self, index, value):
        self.test.insert(index, value)
    def replace_test_at(self, index, value):
        self.test[index] = value
    def has__content(self):
        if (
            self.test
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='TestsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TestsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TestsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TestsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TestsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TestsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='TestsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for test_ in self.test:
            namespaceprefix_ = self.test_nsprefix_ + ':' if (UseCapturedNS_ and self.test_nsprefix_) else ''
            # --- START FIX ---
            # Use the specific tag name from the child object
            export_name = test_.original_tagname_ if test_.original_tagname_ else 'test'
            test_.export(outfile, level, namespaceprefix_, namespacedef_='', name_=export_name, pretty_print=pretty_print)
            # --- END FIX ---
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'test':
            obj_ = TestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.test.append(obj_)
            obj_.original_tagname_ = 'test'
# end class TestsType


class TestType(GeneratedsSuper):
    """TestType -- The base type of every test includes an optional notes element and several attributes. The notes section of a test should be used to hold information that might be helpful to someone examining the technical aspects of the test. For example, why certain values have been used by the test, or maybe a link to where further information can be found. Please refer to the description of the NotesType complex type for more information about the notes element. The required comment attribute provides a short description of the test. The optional deprecated attribute signifies that an id is no longer to be used or referenced but the information has been kept around for historic purposes.
    The required id attribute uniquely identifies each test, and must conform to the format specified by the TestIdPattern simple type. The required version attribute holds the current version of the test. Versions are integers, starting at 1 and incrementing every time a test is modified.
    The optional check_existence attribute specifies how many items in the set defined by the OVAL Object must exist for the test to evaluate to true. The default value for this attribute is 'at_least_one_exists' indicating that by default the test may evaluate to true if at least one item defined by the OVAL Object exists on the system. For example, if a value of 'all_exist' is given, every item defined by the OVAL Object must exist on the system for the test to evaluate to true. If the OVAL Object uses a variable reference, then every value of that variable must exist. Note that a pattern match defines a unique set of matching items found on a system. So when check_existence = 'all_exist' and a regex matches anything on a system the test will evaluate to true (since all matching objects on the system were found on the system). When check_existence = 'all_exist' and a regex does not match anything on a system the test will evaluate to false.
    The required check attribute specifies how many items in the set defined by the OVAL Object (ignoring items with a status of Does Not Exist) must satisfy the state requirements.  For example, should the test check that all matching files have a specified version or that at least one file has the specified version?  The valid check values are explained in the description of the CheckEnumeration simple type. Note that if the test does not contain any references to OVAL States, then the check attribute has no meaning and can be ignored during evaluation.
    An OVAL Test evaluates to true if both the check_existence  and check attributes are satisfied during evaluation. The evaluation result for a test is determined by first evaluating the check_existence attribute. If the result of evaluating the check_existence attribute is true then the check attribute is evaluated. An interpreter may choose to always evaluate both the check_existence and the check attributes, but once the check_existence attribute evaluation has resulted in false the overall test result after evaluating the check attribute will not be affected.
    The optional state_operator attribute provides the logical operator that combines the evaluation results from each referenced state on a per item basis.  Each matching item is compared to each referenced state. The result of comparing each state to a single item is combined based on the specified state_operator value to determine one result for each item. Finally, the results for each item are combined based on the specified check value.  Note that if the test does not contain any references to OVAL States, then the state_operator attribute has no meaning and can be ignored during evaluation. Referencing multiple states in one test allows ranges of possible values to be expressed. For example, one state can check that a value greater than 8 is found and another state can check that a value of less than 16 is found.  In this example the referenced states are combined with a state_operator = 'AND' indicating that the conditions of all referenced states must be satisfied and that the value must be between 8 AND 16.  The valid state_operation values are explained in the description of the OperatorEnumeration simple type.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, version=None, check_existence='at_least_one_exists', check=None, state_operator='AND', comment=None, deprecated=False, Signature=None, notes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.version = _cast(int, version)
        self.version_nsprefix_ = None
        self.check_existence = _cast(None, check_existence)
        self.check_existence_nsprefix_ = None
        self.check = _cast(None, check)
        self.check_nsprefix_ = None
        self.state_operator = _cast(None, state_operator)
        self.state_operator_nsprefix_ = None
        self.comment = _cast(None, comment)
        self.comment_nsprefix_ = None
        self.deprecated = _cast(bool, deprecated)
        self.deprecated_nsprefix_ = None
        self.Signature = Signature
        self.Signature_nsprefix_ = "ds"
        self.notes = notes
        self.notes_nsprefix_ = "oval"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TestType.subclass:
            return TestType.subclass(*args_, **kwargs_)
        else:
            return TestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Signature(self):
        return self.Signature
    def set_Signature(self, Signature):
        self.Signature = Signature
    def get_notes(self):
        return self.notes
    def set_notes(self, notes):
        self.notes = notes
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_check_existence(self):
        return self.check_existence
    def set_check_existence(self, check_existence):
        self.check_existence = check_existence
    def get_check(self):
        return self.check
    def set_check(self, check):
        self.check = check
    def get_state_operator(self):
        return self.state_operator
    def set_state_operator(self, state_operator):
        self.state_operator = state_operator
    def get_comment(self):
        return self.comment
    def set_comment(self, comment):
        self.comment = comment
    def get_deprecated(self):
        return self.deprecated
    def set_deprecated(self, deprecated):
        self.deprecated = deprecated
    def validate_TestIDPattern(self, value):
        # Validate type oval:TestIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_TestIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TestIDPattern_patterns_, ))
    validate_TestIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:tst:[1-9][0-9]*)$']]
    def validate_ExistenceEnumeration(self, value):
        # Validate type oval:ExistenceEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all_exist', 'any_exist', 'at_least_one_exists', 'none_exist', 'only_one_exists']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ExistenceEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_CheckEnumeration(self, value):
        # Validate type oval:CheckEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all', 'at least one', 'none exist', 'none satisfy', 'only one']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CheckEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_OperatorEnumeration(self, value):
        # Validate type oval:OperatorEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AND', 'ONE', 'OR', 'XOR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperatorEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_NonEmptyStringType(self, value):
        # Validate type oval:NonEmptyStringType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NonEmptyStringType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.Signature is not None or
            self.notes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='TestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TestType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TestType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version="%s"' % self.gds_format_integer(self.version, input_name='version'))
        if self.check_existence != "at_least_one_exists" and 'check_existence' not in already_processed:
            already_processed.add('check_existence')
            outfile.write(' check_existence=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.check_existence), input_name='check_existence')), ))
        if self.check is not None and 'check' not in already_processed:
            already_processed.add('check')
            outfile.write(' check=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.check), input_name='check')), ))
        if self.state_operator != "AND" and 'state_operator' not in already_processed:
            already_processed.add('state_operator')
            outfile.write(' state_operator=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.state_operator), input_name='state_operator')), ))
        if self.comment is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            outfile.write(' comment=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.comment), input_name='comment')), ))
        if self.deprecated and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            outfile.write(' deprecated="%s"' % self.gds_format_boolean(self.deprecated, input_name='deprecated'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='TestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Signature is not None:
            namespaceprefix_ = self.Signature_nsprefix_ + ':' if (UseCapturedNS_ and self.Signature_nsprefix_) else ''
            self.Signature.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Signature', pretty_print=pretty_print)
        if self.notes is not None:
            namespaceprefix_ = self.notes_nsprefix_ + ':' if (UseCapturedNS_ and self.notes_nsprefix_) else ''
            self.notes.export(outfile, level, namespaceprefix_='oval:', namespacedef_='', name_='notes', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
            self.validate_TestIDPattern(self.id)    # validate type TestIDPattern
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = self.gds_parse_integer(value, node, 'version')
            if self.version < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('check_existence', node)
        if value is not None and 'check_existence' not in already_processed:
            already_processed.add('check_existence')
            self.check_existence = value
            self.validate_ExistenceEnumeration(self.check_existence)    # validate type ExistenceEnumeration
        value = find_attr_value_('check', node)
        if value is not None and 'check' not in already_processed:
            already_processed.add('check')
            self.check = value
            self.validate_CheckEnumeration(self.check)    # validate type CheckEnumeration
        value = find_attr_value_('state_operator', node)
        if value is not None and 'state_operator' not in already_processed:
            already_processed.add('state_operator')
            self.state_operator = value
            self.validate_OperatorEnumeration(self.state_operator)    # validate type OperatorEnumeration
        value = find_attr_value_('comment', node)
        if value is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            self.comment = value
            self.validate_NonEmptyStringType(self.comment)    # validate type NonEmptyStringType
        value = find_attr_value_('deprecated', node)
        if value is not None and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            if value in ('true', '1'):
                self.deprecated = True
            elif value in ('false', '0'):
                self.deprecated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Signature':
            obj_ = SignatureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
# end class TestType


class ObjectRefType(GeneratedsSuper):
    """ObjectRefType -- The ObjectRefType complex type defines an object reference to be used by OVAL Tests that are defined in the component schemas. The required object_ref attribute specifies the id of the OVAL Object being referenced.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, object_ref=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.object_ref = _cast(None, object_ref)
        self.object_ref_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObjectRefType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObjectRefType.subclass:
            return ObjectRefType.subclass(*args_, **kwargs_)
        else:
            return ObjectRefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_ref(self):
        return self.object_ref
    def set_object_ref(self, object_ref):
        self.object_ref = object_ref
    def validate_ObjectIDPattern(self, value):
        # Validate type oval:ObjectIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_ObjectIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ObjectIDPattern_patterns_, ))
    validate_ObjectIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:obj:[1-9][0-9]*)$']]
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ObjectRefType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObjectRefType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ObjectRefType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ObjectRefType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ObjectRefType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ObjectRefType'):
        if self.object_ref is not None and 'object_ref' not in already_processed:
            already_processed.add('object_ref')
            outfile.write(' object_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.object_ref), input_name='object_ref')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ObjectRefType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('object_ref', node)
        if value is not None and 'object_ref' not in already_processed:
            already_processed.add('object_ref')
            self.object_ref = value
            self.validate_ObjectIDPattern(self.object_ref)    # validate type ObjectIDPattern
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class ObjectRefType


class StateRefType(GeneratedsSuper):
    """StateRefType -- The StateRefType complex type defines a state reference to be used by OVAL Tests that are defined in the component schemas. The required state_ref attribute specifies the id of the OVAL State being referenced.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, state_ref=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.state_ref = _cast(None, state_ref)
        self.state_ref_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StateRefType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StateRefType.subclass:
            return StateRefType.subclass(*args_, **kwargs_)
        else:
            return StateRefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_state_ref(self):
        return self.state_ref
    def set_state_ref(self, state_ref):
        self.state_ref = state_ref
    def validate_StateIDPattern(self, value):
        # Validate type oval:StateIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_StateIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_StateIDPattern_patterns_, ))
    validate_StateIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:ste:[1-9][0-9]*)$']]
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='StateRefType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StateRefType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StateRefType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StateRefType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StateRefType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StateRefType'):
        if self.state_ref is not None and 'state_ref' not in already_processed:
            already_processed.add('state_ref')
            outfile.write(' state_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.state_ref), input_name='state_ref')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='StateRefType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('state_ref', node)
        if value is not None and 'state_ref' not in already_processed:
            already_processed.add('state_ref')
            self.state_ref = value
            self.validate_StateIDPattern(self.state_ref)    # validate type StateIDPattern
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class StateRefType


class ObjectsType(GeneratedsSuper):
    """ObjectsType -- The ObjectsType complex type is a container for one or more object child elements. Each object element provides details that define a unique set of matching items to be used by an OVAL Test. Please refer to the description of the object element for more information about an individual object.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, object=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        if object is None:
            self.object = []
        else:
            self.object = object
        self.object_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObjectsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObjectsType.subclass:
            return ObjectsType.subclass(*args_, **kwargs_)
        else:
            return ObjectsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object(self):
        return self.object
    def set_object(self, object):
        self.object = object
    def add_object(self, value):
        self.object.append(value)
    def insert_object_at(self, index, value):
        self.object.insert(index, value)
    def replace_object_at(self, index, value):
        self.object[index] = value
    def has__content(self):
        if (
            self.object
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ObjectsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObjectsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ObjectsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ObjectsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ObjectsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ObjectsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ObjectsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for object_ in self.object:
            namespaceprefix_ = self.object_nsprefix_ + ':' if (UseCapturedNS_ and self.object_nsprefix_) else ''
            # --- START FIX ---
            # Use the specific tag name from the child object
            export_name = object_.original_tagname_ if object_.original_tagname_ else 'object'
            object_.export(outfile, level, namespaceprefix_, namespacedef_='', name_=export_name, pretty_print=pretty_print)
            # --- END FIX ---
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object':
            obj_ = ObjectType2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object.append(obj_)
            obj_.original_tagname_ = 'object'
# end class ObjectsType


class ObjectType2(GeneratedsSuper):
    """ObjectType2 -- The base type of every object includes an optional notes element. The notes element of an object should be used to hold information that might be helpful to someone examining the technical aspects of the object. For example, why certain values have been used, or maybe a link to where further information can be found. Please refer to the description of the NotesType complex type for more information about the notes element.
    The required id attribute uniquely identifies each object, and must conform to the format specified by the ObjectIdPattern simple type. The required version attribute holds the current version of the object element. Versions are integers, starting at 1 and incrementing every time an object is modified. The optional comment attribute provides a short description of the object. The optional deprecated attribute signifies that an id is no longer to be used or referenced but the information has been kept around for historic purposes.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, version=None, comment=None, deprecated=False, Signature=None, notes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.version = _cast(int, version)
        self.version_nsprefix_ = None
        self.comment = _cast(None, comment)
        self.comment_nsprefix_ = None
        self.deprecated = _cast(bool, deprecated)
        self.deprecated_nsprefix_ = None
        self.Signature = Signature
        self.Signature_nsprefix_ = "ds"
        self.notes = notes
        self.notes_nsprefix_ = "oval"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObjectType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObjectType2.subclass:
            return ObjectType2.subclass(*args_, **kwargs_)
        else:
            return ObjectType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Signature(self):
        return self.Signature
    def set_Signature(self, Signature):
        self.Signature = Signature
    def get_notes(self):
        return self.notes
    def set_notes(self, notes):
        self.notes = notes
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_comment(self):
        return self.comment
    def set_comment(self, comment):
        self.comment = comment
    def get_deprecated(self):
        return self.deprecated
    def set_deprecated(self, deprecated):
        self.deprecated = deprecated
    def validate_ObjectIDPattern(self, value):
        # Validate type oval:ObjectIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_ObjectIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ObjectIDPattern_patterns_, ))
    validate_ObjectIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:obj:[1-9][0-9]*)$']]
    def validate_NonEmptyStringType(self, value):
        # Validate type oval:NonEmptyStringType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NonEmptyStringType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.Signature is not None or
            self.notes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='ObjectType2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObjectType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ObjectType2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ObjectType2')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ObjectType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ObjectType2'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version="%s"' % self.gds_format_integer(self.version, input_name='version'))
        if self.comment is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            outfile.write(' comment=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.comment), input_name='comment')), ))
        if self.deprecated and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            outfile.write(' deprecated="%s"' % self.gds_format_boolean(self.deprecated, input_name='deprecated'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='ObjectType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Signature is not None:
            namespaceprefix_ = self.Signature_nsprefix_ + ':' if (UseCapturedNS_ and self.Signature_nsprefix_) else ''
            self.Signature.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Signature', pretty_print=pretty_print)
        if self.notes is not None:
            namespaceprefix_ = self.notes_nsprefix_ + ':' if (UseCapturedNS_ and self.notes_nsprefix_) else ''
            self.notes.export(outfile, level, namespaceprefix_='oval:', namespacedef_='', name_='notes', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
            self.validate_ObjectIDPattern(self.id)    # validate type ObjectIDPattern
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = self.gds_parse_integer(value, node, 'version')
            if self.version < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('comment', node)
        if value is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            self.comment = value
            self.validate_NonEmptyStringType(self.comment)    # validate type NonEmptyStringType
        value = find_attr_value_('deprecated', node)
        if value is not None and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            if value in ('true', '1'):
                self.deprecated = True
            elif value in ('false', '0'):
                self.deprecated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Signature':
            obj_ = SignatureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
# end class ObjectType2


class set_(GeneratedsSuper):
    """set -- The set element enables complex objects to be described. It is a recursive element in that each set element can contain additional set elements as children. Each set element defines characteristics that produce a matching unique set of items. This set of items is defined by one or two references to OVAL Objects that provide the criteria needed to collect a set of system items. These items can have one or more filters applied to allow a subset of those items to be specifically included or excluded from the overall set of items.
    The set element's object_reference refers to an existing OVAL Object. The set element's filter element provides a reference to an existing OVAL State and includes an optional action attribute. The filter's action attribute allows the author to specify whether matching items should be included or excluded from the overall set. The default filter action is to exclude all matching items. In other words, the filter can be thought of filtering items out by default.
    Each filter is applied to the items identified by each OVAL Object before the set_operator is applied. For example, if an object_reference points to an OVAL Object that identifies every file in a certain directory, a filter might be set up to limit the object set to only those files with a size less than 10 KB. If multiple filters are provided, then each filter is applied to the set of items identified by the OVAL Object. Care must be taken to ensure that conflicting filters are not applied. It is possible to exclude all items with a size of 10 KB and then include only items with a size of 10 KB. This example would result in the empty set.
    The required set_operator attribute defines how different child sets are combined to form the overall unique set of objects. For example, does one take the union of different sets or the intersection? For a description of the valid values please refer to the SetOperatorEnumeration simple type.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, set_operator='UNION', set__member=None, object_reference=None, filter=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.set_operator = _cast(None, set_operator)
        self.set_operator_nsprefix_ = None
        if set__member is None:
            self.set_ = []
        else:
            self.set_ = set__member
        self.set__nsprefix_ = "oval-def"
        if object_reference is None:
            self.object_reference = []
        else:
            self.object_reference = object_reference
        self.object_reference_nsprefix_ = "oval"
        if filter is None:
            self.filter = []
        else:
            self.filter = filter
        self.filter_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, set_)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if set_.subclass:
            return set_.subclass(*args_, **kwargs_)
        else:
            return set_(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_set(self):
        return self.set_
    def set_set(self, set_):
        self.set_ = set_
    def add_set(self, value):
        self.set_.append(value)
    def insert_set_at(self, index, value):
        self.set_.insert(index, value)
    def replace_set_at(self, index, value):
        self.set_[index] = value
    def get_object_reference(self):
        return self.object_reference
    def set_object_reference(self, object_reference):
        self.object_reference = object_reference
    def add_object_reference(self, value):
        self.object_reference.append(value)
    def insert_object_reference_at(self, index, value):
        self.object_reference.insert(index, value)
    def replace_object_reference_at(self, index, value):
        self.object_reference[index] = value
    def get_filter(self):
        return self.filter
    def set_filter(self, filter):
        self.filter = filter
    def add_filter(self, value):
        self.filter.append(value)
    def insert_filter_at(self, index, value):
        self.filter.insert(index, value)
    def replace_filter_at(self, index, value):
        self.filter[index] = value
    def get_set_operator(self):
        return self.set_operator
    def set_set_operator(self, set_operator):
        self.set_operator = set_operator
    def validate_ObjectIDPattern(self, value):
        result = True
        # Validate type ObjectIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_ObjectIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ObjectIDPattern_patterns_, ))
                result = False
        return result
    validate_ObjectIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:obj:[1-9][0-9]*)$']]
    def validate_SetOperatorEnumeration(self, value):
        # Validate type oval-def:SetOperatorEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMPLEMENT', 'INTERSECTION', 'UNION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SetOperatorEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.set_ or
            self.object_reference or
            self.filter
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='set', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('set')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'set':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='set')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='set', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='set'):
        if self.set_operator != "UNION" and 'set_operator' not in already_processed:
            already_processed.add('set_operator')
            outfile.write(' set_operator=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.set_operator), input_name='set_operator')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='set', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for set_ in self.set_:
            namespaceprefix_ = self.set__nsprefix_ + ':' if (UseCapturedNS_ and self.set__nsprefix_) else ''
            set_.export(outfile, level, namespaceprefix_='oval-def:', namespacedef_='', name_='set', pretty_print=pretty_print)
        for object_reference_ in self.object_reference:
            namespaceprefix_ = self.object_reference_nsprefix_ + ':' if (UseCapturedNS_ and self.object_reference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobject_reference>%s</%sobject_reference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(object_reference_), input_name='object_reference')), namespaceprefix_ , eol_))
        for filter_ in self.filter:
            namespaceprefix_ = self.filter_nsprefix_ + ':' if (UseCapturedNS_ and self.filter_nsprefix_) else ''
            filter_.export(outfile, level, namespaceprefix_='oval-def:', namespacedef_='', name_='filter', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('set_operator', node)
        if value is not None and 'set_operator' not in already_processed:
            already_processed.add('set_operator')
            self.set_operator = value
            self.validate_SetOperatorEnumeration(self.set_operator)    # validate type SetOperatorEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'set':
            obj_ = set_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.set_.append(obj_)
            obj_.original_tagname_ = 'set'
        elif nodeName_ == 'object_reference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'object_reference')
            value_ = self.gds_validate_string(value_, node, 'object_reference')
            self.object_reference.append(value_)
            self.object_reference_nsprefix_ = child_.prefix
            # validate type ObjectIDPattern
            self.validate_ObjectIDPattern(self.object_reference[-1])
        elif nodeName_ == 'filter':
            obj_ = filter.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.filter.append(obj_)
            obj_.original_tagname_ = 'filter'
# end class set_


class filter(GeneratedsSuper):
    """filter -- The filter element provides a reference to an existing OVAL State and includes an optional action attribute. The action attribute is used to specify whether items that match the referenced OVAL State will be included in the resulting set or excluded from the resulting set.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, action='exclude', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.action = _cast(None, action)
        self.action_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, filter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if filter.subclass:
            return filter.subclass(*args_, **kwargs_)
        else:
            return filter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_action(self):
        return self.action
    def set_action(self, action):
        self.action = action
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_StateIDPattern(self, value):
        result = True
        # Validate type StateIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_StateIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_StateIDPattern_patterns_, ))
                result = False
        return result
    validate_StateIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:ste:[1-9][0-9]*)$']]
    def validate_FilterActionEnumeration(self, value):
        # Validate type oval-def:FilterActionEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['exclude', 'include']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FilterActionEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='filter', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('filter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'filter':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='filter')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='filter'):
        if self.action != "exclude" and 'action' not in already_processed:
            already_processed.add('action')
            outfile.write(' action=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.action), input_name='action')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='filter', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('action', node)
        if value is not None and 'action' not in already_processed:
            already_processed.add('action')
            self.action = value
            self.validate_FilterActionEnumeration(self.action)    # validate type FilterActionEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class filter


class StatesType(GeneratedsSuper):
    """StatesType -- The StatesType complex type is a container for one or more state child elements. Each state provides details about specific characteristics that can be used during an evaluation of an object. Please refer to the description of the state element for more information about an individual state.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, state=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        if state is None:
            self.state = []
        else:
            self.state = state
        self.state_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StatesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StatesType.subclass:
            return StatesType.subclass(*args_, **kwargs_)
        else:
            return StatesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_state(self):
        return self.state
    def set_state(self, state):
        self.state = state
    def add_state(self, value):
        self.state.append(value)
    def insert_state_at(self, index, value):
        self.state.insert(index, value)
    def replace_state_at(self, index, value):
        self.state[index] = value
    def has__content(self):
        if (
            self.state
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='StatesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StatesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StatesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StatesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StatesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StatesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='StatesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for state_ in self.state:
            state_.export(outfile, level, namespaceprefix_, name_='state', namespacedef_='', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'state':
            obj_ = StateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.state.append(obj_)
            obj_.original_tagname_ = 'state'
#####        namespaceprefix_ = self.state_nsprefix_ + ':' if (UseCapturedNS_ and self.state_nsprefix_) else ''
#####        # --- START FIX ---
#####        # Use the specific tag name from the child object
#####        export_name = state_.original_tagname_ if state_.original_tagname_ else 'state'
#####        state_.export(outfile, level, namespaceprefix_, namespacedef_='', name_=export_name, pretty_print=pretty_print)
#####        # --- END FIX ---
# end class StatesType


class StateType(GeneratedsSuper):
    """StateType -- The base type of every state includes an optional notes element and two attributes. The notes section of a state should be used to hold information that might be helpful to someone examining the technical aspects of the state. For example, why certain values have been used by the state, or maybe a link to where further information can be found. Please refer to the description of the NotesType complex type for more information about the notes element.
    The required id attribute uniquely identifies each state, and must conform to the format specified by the StateIdPattern simple type. The required version attribute holds the current version of the state. Versions are integers, starting at 1 and incrementing every time a state is modified. The required operator attribute provides the logical operator that binds the different characteristics inside a state together. The optional comment attribute provides a short description of the state. The optional deprecated attribute signifies that an id is no longer to be used or referenced but the information has been kept around for historic purposes.
    When evaluating a particular state against an object, one should evaluate each individual entity separately. The individual results are then combined by the operator to produce an overall result. This process holds true even when there are multiple instances of the same entity. Evaluate each instance separately, taking the entity check attribute into account, and then combine everything using the operator.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, version=None, operator='AND', comment=None, deprecated=False, Signature=None, notes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.version = _cast(int, version)
        self.version_nsprefix_ = None
        self.operator = _cast(None, operator)
        self.operator_nsprefix_ = None
        self.comment = _cast(None, comment)
        self.comment_nsprefix_ = None
        self.deprecated = _cast(bool, deprecated)
        self.deprecated_nsprefix_ = None
        self.Signature = Signature
        self.Signature_nsprefix_ = "ds"
        self.notes = notes
        self.notes_nsprefix_ = "oval"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StateType.subclass:
            return StateType.subclass(*args_, **kwargs_)
        else:
            return StateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Signature(self):
        return self.Signature
    def set_Signature(self, Signature):
        self.Signature = Signature
    def get_notes(self):
        return self.notes
    def set_notes(self, notes):
        self.notes = notes
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_operator(self):
        return self.operator
    def set_operator(self, operator):
        self.operator = operator
    def get_comment(self):
        return self.comment
    def set_comment(self, comment):
        self.comment = comment
    def get_deprecated(self):
        return self.deprecated
    def set_deprecated(self, deprecated):
        self.deprecated = deprecated
    def validate_StateIDPattern(self, value):
        # Validate type oval:StateIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_StateIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_StateIDPattern_patterns_, ))
    validate_StateIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:ste:[1-9][0-9]*)$']]
    def validate_OperatorEnumeration(self, value):
        # Validate type oval:OperatorEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AND', 'ONE', 'OR', 'XOR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperatorEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_NonEmptyStringType(self, value):
        # Validate type oval:NonEmptyStringType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NonEmptyStringType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.Signature is not None or
            self.notes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='StateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StateType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StateType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version="%s"' % self.gds_format_integer(self.version, input_name='version'))
        if self.operator != "AND" and 'operator' not in already_processed:
            already_processed.add('operator')
            outfile.write(' operator=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operator), input_name='operator')), ))
        if self.comment is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            outfile.write(' comment=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.comment), input_name='comment')), ))
        if self.deprecated and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            outfile.write(' deprecated="%s"' % self.gds_format_boolean(self.deprecated, input_name='deprecated'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='StateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Signature is not None:
            namespaceprefix_ = self.Signature_nsprefix_ + ':' if (UseCapturedNS_ and self.Signature_nsprefix_) else ''
            self.Signature.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Signature', pretty_print=pretty_print)
        if self.notes is not None:
            namespaceprefix_ = self.notes_nsprefix_ + ':' if (UseCapturedNS_ and self.notes_nsprefix_) else ''
            self.notes.export(outfile, level, namespaceprefix_='oval:', namespacedef_='', name_='notes', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
            self.validate_StateIDPattern(self.id)    # validate type StateIDPattern
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = self.gds_parse_integer(value, node, 'version')
            if self.version < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('operator', node)
        if value is not None and 'operator' not in already_processed:
            already_processed.add('operator')
            self.operator = value
            self.validate_OperatorEnumeration(self.operator)    # validate type OperatorEnumeration
        value = find_attr_value_('comment', node)
        if value is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            self.comment = value
            self.validate_NonEmptyStringType(self.comment)    # validate type NonEmptyStringType
        value = find_attr_value_('deprecated', node)
        if value is not None and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            if value in ('true', '1'):
                self.deprecated = True
            elif value in ('false', '0'):
                self.deprecated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Signature':
            obj_ = SignatureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
# end class StateType


class VariablesType(GeneratedsSuper):
    """VariablesType -- The VariablesType complex type is a container for one or more variable child elements. Each variable element is a way to define one or more values to be obtained at the time a definition is evaluated.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, variable=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        if variable is None:
            self.variable = []
        else:
            self.variable = variable
        self.variable_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VariablesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VariablesType.subclass:
            return VariablesType.subclass(*args_, **kwargs_)
        else:
            return VariablesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_variable(self):
        return self.variable
    def set_variable(self, variable):
        self.variable = variable
    def add_variable(self, value):
        self.variable.append(value)
    def insert_variable_at(self, index, value):
        self.variable.insert(index, value)
    def replace_variable_at(self, index, value):
        self.variable[index] = value
    def has__content(self):
        if (
            self.variable
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='VariablesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VariablesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VariablesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VariablesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VariablesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VariablesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='VariablesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for variable_ in self.variable:
            variable_.export(outfile, level, namespaceprefix_, namespacedef_='', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'variable':
            class_obj_ = self.get_class_obj_(child_, VariableType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable.append(obj_)
            obj_.original_tagname_ = 'variable'
        elif nodeName_ == 'external_variable':
            obj_ = external_variable.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable.append(obj_)
            obj_.original_tagname_ = 'external_variable'
        elif nodeName_ == 'constant_variable':
            obj_ = constant_variable.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable.append(obj_)
            obj_.original_tagname_ = 'constant_variable'
        elif nodeName_ == 'local_variable':
            obj_ = local_variable.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable.append(obj_)
            obj_.original_tagname_ = 'local_variable'
# end class VariablesType


class VariableType(GeneratedsSuper):
    """VariableType -- The VariableType complex type defines attributes associated with each OVAL Variable.
    The required id attribute uniquely identifies each variable, and must conform to the format specified by the VariableIDPattern simple type.
    The required version attribute holds the current version of the variable. Versions are integers, starting at 1 and incrementing every time a variable is modified.
    The required comment attribute provides a short description of the variable.
    The optional deprecated attribute signifies that an id is no longer to be used or referenced but the information has been kept around for historic purposes.
    The required datatype attribute specifies the type of value being defined.  The set of values identified by a variable must comply with the specified datatype, otherwise an error should be reported.
    Please see the DatatypeEnumeration for details about each valid datatype.  For example, if the datatype of the variable is specified as boolean then the value(s) returned by the component / function should be "true", "false", "1", or "0".
    Note that the 'record' datatype is not permitted on variables. The notes section of a variable should be used to hold information that might be helpful to someone examining the technical aspects of the variable. Please refer to the description of the NotesType complex type for more information about the notes element.
    datatype -- Note that the 'record' datatype is not permitted on variables.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, version=None, datatype=None, comment=None, deprecated=False, Signature=None, notes=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.version = _cast(int, version)
        self.version_nsprefix_ = None
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.comment = _cast(None, comment)
        self.comment_nsprefix_ = None
        self.deprecated = _cast(bool, deprecated)
        self.deprecated_nsprefix_ = None
        self.Signature = Signature
        self.Signature_nsprefix_ = "ds"
        self.notes = notes
        self.notes_nsprefix_ = "oval"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VariableType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VariableType.subclass:
            return VariableType.subclass(*args_, **kwargs_)
        else:
            return VariableType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Signature(self):
        return self.Signature
    def set_Signature(self, Signature):
        self.Signature = Signature
    def get_notes(self):
        return self.notes
    def set_notes(self, notes):
        self.notes = notes
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_comment(self):
        return self.comment
    def set_comment(self, comment):
        self.comment = comment
    def get_deprecated(self):
        return self.deprecated
    def set_deprecated(self, deprecated):
        self.deprecated = deprecated
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_VariableIDPattern(self, value):
        # Validate type oval:VariableIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_VariableIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_VariableIDPattern_patterns_, ))
    validate_VariableIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:var:[1-9][0-9]*)$']]
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_NonEmptyStringType(self, value):
        # Validate type oval:NonEmptyStringType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NonEmptyStringType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.Signature is not None or
            self.notes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='VariableType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VariableType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VariableType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VariableType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VariableType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VariableType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version="%s"' % self.gds_format_integer(self.version, input_name='version'))
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
        if self.comment is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            outfile.write(' comment=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.comment), input_name='comment')), ))
        if self.deprecated and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            outfile.write(' deprecated="%s"' % self.gds_format_boolean(self.deprecated, input_name='deprecated'))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" ', name_='VariableType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Signature is not None:
            namespaceprefix_ = self.Signature_nsprefix_ + ':' if (UseCapturedNS_ and self.Signature_nsprefix_) else ''
            self.Signature.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Signature', pretty_print=pretty_print)
        if self.notes is not None:
            namespaceprefix_ = self.notes_nsprefix_ + ':' if (UseCapturedNS_ and self.notes_nsprefix_) else ''
            self.notes.export(outfile, level, namespaceprefix_='oval:', namespacedef_='', name_='notes', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
            self.validate_VariableIDPattern(self.id)    # validate type VariableIDPattern
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = self.gds_parse_integer(value, node, 'version')
            if self.version < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        value = find_attr_value_('comment', node)
        if value is not None and 'comment' not in already_processed:
            already_processed.add('comment')
            self.comment = value
            self.validate_NonEmptyStringType(self.comment)    # validate type NonEmptyStringType
        value = find_attr_value_('deprecated', node)
        if value is not None and 'deprecated' not in already_processed:
            already_processed.add('deprecated')
            if value in ('true', '1'):
                self.deprecated = True
            elif value in ('false', '0'):
                self.deprecated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Signature':
            obj_ = SignatureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
        elif nodeName_ == 'notes':
            obj_ = NotesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.notes = obj_
            obj_.original_tagname_ = 'notes'
# end class VariableType


class external_variable(VariableType):
    """external_variable -- The external_variable element extends the VariableType and defines a variable with some external source.
    The actual value(s) for the variable is not provided within the OVAL file, but rather it is retrieved during the evaluation of the OVAL Definition from an external source.
    An unbounded set of possible-value and possible_restriction child elements can be specified that together specify the list of all possible values that an external source is allowed to supply for the external variable.
    In other words, the value assigned by an external source must match one of the possible_value or possible_restriction elements specified.
    Each possible_value element contains a single value that could be assigned to the given external_variable while each possible_restriction element outlines a range of possible values. Note that it is not necessary to declare a variable's possible values, but the option is available if desired. If no possible child elements are specified, then the valid values are only bound to the specified datatype of the external variable. Please refer to the description of the PossibleValueType and PossibleRestrictionType complex types for more information.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VariableType
    def __init__(self, id=None, version=None, datatype=None, comment=None, deprecated=False, Signature=None, notes=None, possible_value=None, possible_restriction=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("external_variable"), self).__init__(id, version, datatype, comment, deprecated, Signature, notes,  **kwargs_)
        if possible_value is None:
            self.possible_value = []
        else:
            self.possible_value = possible_value
        self.possible_value_nsprefix_ = "oval-def"
        if possible_restriction is None:
            self.possible_restriction = []
        else:
            self.possible_restriction = possible_restriction
        self.possible_restriction_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, external_variable)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if external_variable.subclass:
            return external_variable.subclass(*args_, **kwargs_)
        else:
            return external_variable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_possible_value(self):
        return self.possible_value
    def set_possible_value(self, possible_value):
        self.possible_value = possible_value
    def add_possible_value(self, value):
        self.possible_value.append(value)
    def insert_possible_value_at(self, index, value):
        self.possible_value.insert(index, value)
    def replace_possible_value_at(self, index, value):
        self.possible_value[index] = value
    def get_possible_restriction(self):
        return self.possible_restriction
    def set_possible_restriction(self, possible_restriction):
        self.possible_restriction = possible_restriction
    def add_possible_restriction(self, value):
        self.possible_restriction.append(value)
    def insert_possible_restriction_at(self, index, value):
        self.possible_restriction.insert(index, value)
    def replace_possible_restriction_at(self, index, value):
        self.possible_restriction[index] = value
    def has__content(self):
        if (
            self.possible_value or
            self.possible_restriction or
            super(external_variable, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='external_variable', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('external_variable')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'external_variable':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='external_variable')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='external_variable', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='external_variable'):
        super(external_variable, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='external_variable')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='external_variable', fromsubclass_=False, pretty_print=True):
        super(external_variable, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for possible_value_ in self.possible_value:
            namespaceprefix_ = self.possible_value_nsprefix_ + ':' if (UseCapturedNS_ and self.possible_value_nsprefix_) else ''
            possible_value_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='possible_value', pretty_print=pretty_print)
        for possible_restriction_ in self.possible_restriction:
            namespaceprefix_ = self.possible_restriction_nsprefix_ + ':' if (UseCapturedNS_ and self.possible_restriction_nsprefix_) else ''
            possible_restriction_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='possible_restriction', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(external_variable, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'possible_value':
            obj_ = PossibleValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.possible_value.append(obj_)
            obj_.original_tagname_ = 'possible_value'
        elif nodeName_ == 'possible_restriction':
            obj_ = PossibleRestrictionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.possible_restriction.append(obj_)
            obj_.original_tagname_ = 'possible_restriction'
        super(external_variable, self)._buildChildren(child_, node, nodeName_, True)
# end class external_variable


class PossibleValueType(GeneratedsSuper):
    """PossibleValueType -- The PossibleValueType complex type is used to outline a single expected value of an external variable. The required hint attribute gives a short description of what the value means or represents.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, hint=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.hint = _cast(None, hint)
        self.hint_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PossibleValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PossibleValueType.subclass:
            return PossibleValueType.subclass(*args_, **kwargs_)
        else:
            return PossibleValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_hint(self):
        return self.hint
    def set_hint(self, hint):
        self.hint = hint
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='PossibleValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PossibleValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PossibleValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PossibleValueType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PossibleValueType'):
        if self.hint is not None and 'hint' not in already_processed:
            already_processed.add('hint')
            outfile.write(' hint=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.hint), input_name='hint')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='PossibleValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('hint', node)
        if value is not None and 'hint' not in already_processed:
            already_processed.add('hint')
            self.hint = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class PossibleValueType


class PossibleRestrictionType(GeneratedsSuper):
    """PossibleRestrictionType -- The PossibleRestrictionType complex type outlines a range of possible expected value of an external variable. Each possible_restriction element contains an unbounded list of child restriction elements that each specify a range that an actual value may fall in. For example, a restriction element may specify that a value must be less than 10. When multiple restriction elements are present, a valid possible value's evaluation is based on the operator attribute. The operator attribute is set to AND by default. Other valid operation values are explained in the description of the OperatorEnumeration simple type. One can think of the possible_value and possible_restriction elements as an OR'd list of possible values, with the restriction elements as using the selected operation to evaluate its own list of value descriptions. Please refer to the description of the RestrictionType complex type for more information. The required hint attribute gives a short description of what the value means or represents.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operator='AND', hint=None, restriction=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.operator = _cast(None, operator)
        self.operator_nsprefix_ = None
        self.hint = _cast(None, hint)
        self.hint_nsprefix_ = None
        if restriction is None:
            self.restriction = []
        else:
            self.restriction = restriction
        self.restriction_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PossibleRestrictionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PossibleRestrictionType.subclass:
            return PossibleRestrictionType.subclass(*args_, **kwargs_)
        else:
            return PossibleRestrictionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_restriction(self):
        return self.restriction
    def set_restriction(self, restriction):
        self.restriction = restriction
    def add_restriction(self, value):
        self.restriction.append(value)
    def insert_restriction_at(self, index, value):
        self.restriction.insert(index, value)
    def replace_restriction_at(self, index, value):
        self.restriction[index] = value
    def get_operator(self):
        return self.operator
    def set_operator(self, operator):
        self.operator = operator
    def get_hint(self):
        return self.hint
    def set_hint(self, hint):
        self.hint = hint
    def validate_OperatorEnumeration(self, value):
        # Validate type oval:OperatorEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AND', 'ONE', 'OR', 'XOR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperatorEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.restriction
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='PossibleRestrictionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PossibleRestrictionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PossibleRestrictionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PossibleRestrictionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PossibleRestrictionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PossibleRestrictionType'):
        if self.operator != "AND" and 'operator' not in already_processed:
            already_processed.add('operator')
            outfile.write(' operator=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operator), input_name='operator')), ))
        if self.hint is not None and 'hint' not in already_processed:
            already_processed.add('hint')
            outfile.write(' hint=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.hint), input_name='hint')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='PossibleRestrictionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for restriction_ in self.restriction:
            namespaceprefix_ = self.restriction_nsprefix_ + ':' if (UseCapturedNS_ and self.restriction_nsprefix_) else ''
            restriction_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='restriction', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operator', node)
        if value is not None and 'operator' not in already_processed:
            already_processed.add('operator')
            self.operator = value
            self.validate_OperatorEnumeration(self.operator)    # validate type OperatorEnumeration
        value = find_attr_value_('hint', node)
        if value is not None and 'hint' not in already_processed:
            already_processed.add('hint')
            self.hint = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'restriction':
            obj_ = RestrictionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.restriction.append(obj_)
            obj_.original_tagname_ = 'restriction'
# end class PossibleRestrictionType


class RestrictionType(GeneratedsSuper):
    """RestrictionType -- The RestrictionType complex type outlines a restriction that is placed on expected values for an external variable. For example, a possible value may be restricted to a integer less than 10. Please refer to the operationEnumeration simple type for a description of the valid operations.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operation=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.operation = _cast(None, operation)
        self.operation_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RestrictionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RestrictionType.subclass:
            return RestrictionType.subclass(*args_, **kwargs_)
        else:
            return RestrictionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_operation(self):
        return self.operation
    def set_operation(self, operation):
        self.operation = operation
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_OperationEnumeration(self, value):
        # Validate type oval:OperationEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['equals', 'not equal', 'case insensitive equals', 'case insensitive not equal', 'greater than', 'less than', 'greater than or equal', 'less than or equal', 'bitwise and', 'bitwise or', 'pattern match', 'subset of', 'superset of']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperationEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='RestrictionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RestrictionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RestrictionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RestrictionType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RestrictionType'):
        if self.operation is not None and 'operation' not in already_processed:
            already_processed.add('operation')
            outfile.write(' operation=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operation), input_name='operation')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='RestrictionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operation', node)
        if value is not None and 'operation' not in already_processed:
            already_processed.add('operation')
            self.operation = value
            self.validate_OperationEnumeration(self.operation)    # validate type OperationEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class RestrictionType


class constant_variable(VariableType):
    """constant_variable -- The constant_variable element extends the VariableType and defines a variable with a constant value(s). Each constant_variable defines either a single value or a collection of values to be used throughout the evaluation of the OVAL Definition File in which it has been defined. Constant variables cannot be over-ridden by an external source. The actual value of a constant variable is defined by the required value child element. A collection of values can be specified by including multiple instances of the value element. Please refer to the description of the ValueType complex type for more information.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VariableType
    def __init__(self, id=None, version=None, datatype=None, comment=None, deprecated=False, Signature=None, notes=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("constant_variable"), self).__init__(id, version, datatype, comment, deprecated, Signature, notes,  **kwargs_)
        if value is None:
            self.value = []
        else:
            self.value = value
        self.value_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, constant_variable)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if constant_variable.subclass:
            return constant_variable.subclass(*args_, **kwargs_)
        else:
            return constant_variable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def add_value(self, value):
        self.value.append(value)
    def insert_value_at(self, index, value):
        self.value.insert(index, value)
    def replace_value_at(self, index, value):
        self.value[index] = value
    def has__content(self):
        if (
            self.value or
            super(constant_variable, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='constant_variable', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('constant_variable')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'constant_variable':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='constant_variable')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='constant_variable', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='constant_variable'):
        super(constant_variable, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='constant_variable')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='constant_variable', fromsubclass_=False, pretty_print=True):
        super(constant_variable, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for value_ in self.value:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            value_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='value', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(constant_variable, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'value':
            obj_ = ValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.value.append(obj_)
            obj_.original_tagname_ = 'value'
        super(constant_variable, self)._buildChildren(child_, node, nodeName_, True)
# end class constant_variable


class ValueType(GeneratedsSuper):
    """ValueType -- The ValueType complex type holds the actual value of the variable when dealing with a constant variable. This value should be used by all tests that reference this variable. The value cannot be over-ridden by an external source.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValueType.subclass:
            return ValueType.subclass(*args_, **kwargs_)
        else:
            return ValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ValueType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ValueType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class ValueType


class local_variable(VariableType):
    """local_variable -- The local_variable element extends the VariableType and defines a variable with some local source. The actual value(s) for the variable is not provided in the OVAL Definition document but rather it is retrieved during the evaluation of the OVAL Definition. Each local variable is defined by either a single component or a complex function, meaning that a value can be as simple as a literal string or as complex as multiple registry keys concatenated together. Note that if an individual component is used and it returns a collection of values, then there will be multiple values associated with the local_variable. For example, if an object_component is used and it references a file object that identifies a set of 5 files, then the local variable would evaluate to a collection of those 5 values. Please refer to the description of the ComponentGroup for more information.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VariableType
    def __init__(self, id=None, version=None, datatype=None, comment=None, deprecated=False, Signature=None, notes=None, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("local_variable"), self).__init__(id, version, datatype, comment, deprecated, Signature, notes,  **kwargs_)
        self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        self.end = end
        self.end_nsprefix_ = "oval-def"
        self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        self.split = split
        self.split_nsprefix_ = "oval-def"
        self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        self.count = count
        self.count_nsprefix_ = "oval-def"
        self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, local_variable)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if local_variable.subclass:
            return local_variable.subclass(*args_, **kwargs_)
        else:
            return local_variable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def has__content(self):
        if (
            self.object_component is not None or
            self.variable_component is not None or
            self.literal_component is not None or
            self.arithmetic is not None or
            self.begin is not None or
            self.concat is not None or
            self.end is not None or
            self.escape_regex is not None or
            self.split is not None or
            self.substring is not None or
            self.time_difference is not None or
            self.regex_capture is not None or
            self.unique is not None or
            self.count is not None or
            self.glob_to_regex is not None or
            super(local_variable, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='local_variable', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('local_variable')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'local_variable':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='local_variable')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='local_variable', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='local_variable'):
        super(local_variable, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='local_variable')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='local_variable', fromsubclass_=False, pretty_print=True):
        super(local_variable, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.object_component is not None:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            self.object_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        if self.variable_component is not None:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            self.variable_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        if self.literal_component is not None:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            self.literal_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        if self.arithmetic is not None:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            self.arithmetic.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        if self.begin is not None:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            self.begin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        if self.concat is not None:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            self.concat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        if self.end is not None:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            self.end.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        if self.escape_regex is not None:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            self.escape_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        if self.split is not None:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            self.split.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        if self.substring is not None:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            self.substring.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        if self.time_difference is not None:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            self.time_difference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        if self.regex_capture is not None:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            self.regex_capture.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        if self.unique is not None:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            self.unique.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        if self.count is not None:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            self.count.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        if self.glob_to_regex is not None:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            self.glob_to_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(local_variable, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component = obj_
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component = obj_
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component = obj_
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic = obj_
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin = obj_
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat = obj_
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end = obj_
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex = obj_
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split = obj_
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring = obj_
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference = obj_
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture = obj_
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique = obj_
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count = obj_
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex = obj_
            obj_.original_tagname_ = 'glob_to_regex'
        super(local_variable, self)._buildChildren(child_, node, nodeName_, True)
# end class local_variable


class LiteralComponentType(GeneratedsSuper):
    """The LiteralComponentType complex type defines a literal value to be used as a component.  The optional datatype attribute defines the type of data expected.  The default datatype is 'string'.
    LiteralComponentType -- The LiteralComponentType complex type defines a literal value to be used as a component.  The optional datatype attribute defines the type of data expected.  The default datatype is 'string'.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, datatype='string', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LiteralComponentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LiteralComponentType.subclass:
            return LiteralComponentType.subclass(*args_, **kwargs_)
        else:
            return LiteralComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='LiteralComponentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LiteralComponentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LiteralComponentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LiteralComponentType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LiteralComponentType'):
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='LiteralComponentType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class LiteralComponentType


class ObjectComponentType(GeneratedsSuper):
    """ObjectComponentType -- The ObjectComponentType complex type defines a specific value or set of values on the local system to obtain.
    The required object_ref attribute provides a reference to an existing OVAL Object declaration. The referenced OVAL Object specifies a set of OVAL Items to collect. Note that an OVAL Object might identify 0, 1, or many OVAL Items on a system. If no items are found on the system then an error should be reported when determining the value of an ObjectComponentType. If 1 or more OVAL Items are found then each OVAL Item will be considered and the ObjectComponentType may have one or more values.
    The required item_field attribute specifies the name of the entity whose value will be retrieved from each OVAL Item collected by the referenced OVAL Object. For example, if the object_ref references a win-def:file_object, the item_field may specify the 'version' entity as the field to use as the value of the ObjectComponentType. Note that an OVAL Item may have 0, 1, or many entities whose name matches the specified item_field value. If an entity is not found with a name that matches the value of the item_field an error should be reported when determining the value of an ObjectComponentType. If 1 or more matching entities are found in a single OVAL Item the value of the ObjectComponentType is the list of the values from each of the matching entities.
    The optional record_field attribute specifies the name of a field in a record entity in an OVAL Item. The record_field attribute allows the value of a specific field to be retrieved from an entity with a datatype of 'record'. If a field with a matching name attribute value is not found in the referenced OVAL Item entity an error should be reported when determining the value of the ObjectComponentType.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, object_ref=None, item_field=None, record_field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.object_ref = _cast(None, object_ref)
        self.object_ref_nsprefix_ = None
        self.item_field = _cast(None, item_field)
        self.item_field_nsprefix_ = None
        self.record_field = _cast(None, record_field)
        self.record_field_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObjectComponentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObjectComponentType.subclass:
            return ObjectComponentType.subclass(*args_, **kwargs_)
        else:
            return ObjectComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_ref(self):
        return self.object_ref
    def set_object_ref(self, object_ref):
        self.object_ref = object_ref
    def get_item_field(self):
        return self.item_field
    def set_item_field(self, item_field):
        self.item_field = item_field
    def get_record_field(self):
        return self.record_field
    def set_record_field(self, record_field):
        self.record_field = record_field
    def validate_ObjectIDPattern(self, value):
        # Validate type oval:ObjectIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_ObjectIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ObjectIDPattern_patterns_, ))
    validate_ObjectIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:obj:[1-9][0-9]*)$']]
    def validate_NonEmptyStringType(self, value):
        # Validate type oval:NonEmptyStringType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NonEmptyStringType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ObjectComponentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObjectComponentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ObjectComponentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ObjectComponentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ObjectComponentType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ObjectComponentType'):
        if self.object_ref is not None and 'object_ref' not in already_processed:
            already_processed.add('object_ref')
            outfile.write(' object_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.object_ref), input_name='object_ref')), ))
        if self.item_field is not None and 'item_field' not in already_processed:
            already_processed.add('item_field')
            outfile.write(' item_field=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.item_field), input_name='item_field')), ))
        if self.record_field is not None and 'record_field' not in already_processed:
            already_processed.add('record_field')
            outfile.write(' record_field=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.record_field), input_name='record_field')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ObjectComponentType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('object_ref', node)
        if value is not None and 'object_ref' not in already_processed:
            already_processed.add('object_ref')
            self.object_ref = value
            self.validate_ObjectIDPattern(self.object_ref)    # validate type ObjectIDPattern
        value = find_attr_value_('item_field', node)
        if value is not None and 'item_field' not in already_processed:
            already_processed.add('item_field')
            self.item_field = value
            self.validate_NonEmptyStringType(self.item_field)    # validate type NonEmptyStringType
        value = find_attr_value_('record_field', node)
        if value is not None and 'record_field' not in already_processed:
            already_processed.add('record_field')
            self.record_field = value
            self.validate_NonEmptyStringType(self.record_field)    # validate type NonEmptyStringType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class ObjectComponentType


class VariableComponentType(GeneratedsSuper):
    """VariableComponentType -- The VariableComponentType complex type defines a specific value obtained by looking at the value of another OVAL Variable. The required var_ref attribute provides a reference to the variable. One must make sure that the variable reference does not point to the parent variable that uses this component to avoid a race condition.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, var_ref=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.var_ref = _cast(None, var_ref)
        self.var_ref_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VariableComponentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VariableComponentType.subclass:
            return VariableComponentType.subclass(*args_, **kwargs_)
        else:
            return VariableComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_var_ref(self):
        return self.var_ref
    def set_var_ref(self, var_ref):
        self.var_ref = var_ref
    def validate_VariableIDPattern(self, value):
        # Validate type oval:VariableIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_VariableIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_VariableIDPattern_patterns_, ))
    validate_VariableIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:var:[1-9][0-9]*)$']]
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='VariableComponentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VariableComponentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VariableComponentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VariableComponentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VariableComponentType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VariableComponentType'):
        if self.var_ref is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            outfile.write(' var_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.var_ref), input_name='var_ref')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='VariableComponentType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('var_ref', node)
        if value is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            self.var_ref = value
            self.validate_VariableIDPattern(self.var_ref)    # validate type VariableIDPattern
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class VariableComponentType


class ArithmeticFunctionType(GeneratedsSuper):
    """The arithmetic function takes two or more integer or float components and performs a basic mathematical function on them. The result of this function is a single integer or float unless one of the components returns a collection of values. In this case the specified arithmetic function would be performed multiple times and the end result would also be a collection of values for the local variable. For example assume a local_variable specifies the arithmetic function with an arithmetic_operation of "add" and has two sub-components under this function: the first component returns "1" and "2", and the second component returns "3" and "4" and "5". The local_variable element would be evaluated to be a collection of six values: 1+3, 1+4, 1+5, 2+3, 2+4, and 2+5.
    ArithmeticFunctionType -- The arithmetic function takes two or more integer or float components and performs a basic mathematical function on them. The result of this function is a single integer or float unless one of the components returns a collection of values. In this case the specified arithmetic function would be performed multiple times and the end result would also be a collection of values for the local variable. For example assume a local_variable specifies the arithmetic function with an arithmetic_operation of "add" and has two sub-components under this function: the first component returns "1" and "2", and the second component returns "3" and "4" and "5". The local_variable element would be evaluated to be a collection of six values: 1+3, 1+4, 1+5, 2+3, 2+4, and 2+5.
    Note that if both an integer and float components are used then the result is a float.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, arithmetic_operation=None, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.arithmetic_operation = _cast(None, arithmetic_operation)
        self.arithmetic_operation_nsprefix_ = None
        if object_component is None:
            self.object_component = []
        else:
            self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        if variable_component is None:
            self.variable_component = []
        else:
            self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        if literal_component is None:
            self.literal_component = []
        else:
            self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        if arithmetic is None:
            self.arithmetic = []
        else:
            self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        if begin is None:
            self.begin = []
        else:
            self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        if concat is None:
            self.concat = []
        else:
            self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        if end is None:
            self.end = []
        else:
            self.end = end
        self.end_nsprefix_ = "oval-def"
        if escape_regex is None:
            self.escape_regex = []
        else:
            self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        if split is None:
            self.split = []
        else:
            self.split = split
        self.split_nsprefix_ = "oval-def"
        if substring is None:
            self.substring = []
        else:
            self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        if time_difference is None:
            self.time_difference = []
        else:
            self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        if regex_capture is None:
            self.regex_capture = []
        else:
            self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        if unique is None:
            self.unique = []
        else:
            self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        if count is None:
            self.count = []
        else:
            self.count = count
        self.count_nsprefix_ = "oval-def"
        if glob_to_regex is None:
            self.glob_to_regex = []
        else:
            self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArithmeticFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArithmeticFunctionType.subclass:
            return ArithmeticFunctionType.subclass(*args_, **kwargs_)
        else:
            return ArithmeticFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def add_object_component(self, value):
        self.object_component.append(value)
    def insert_object_component_at(self, index, value):
        self.object_component.insert(index, value)
    def replace_object_component_at(self, index, value):
        self.object_component[index] = value
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def add_variable_component(self, value):
        self.variable_component.append(value)
    def insert_variable_component_at(self, index, value):
        self.variable_component.insert(index, value)
    def replace_variable_component_at(self, index, value):
        self.variable_component[index] = value
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def add_literal_component(self, value):
        self.literal_component.append(value)
    def insert_literal_component_at(self, index, value):
        self.literal_component.insert(index, value)
    def replace_literal_component_at(self, index, value):
        self.literal_component[index] = value
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def add_arithmetic(self, value):
        self.arithmetic.append(value)
    def insert_arithmetic_at(self, index, value):
        self.arithmetic.insert(index, value)
    def replace_arithmetic_at(self, index, value):
        self.arithmetic[index] = value
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def add_begin(self, value):
        self.begin.append(value)
    def insert_begin_at(self, index, value):
        self.begin.insert(index, value)
    def replace_begin_at(self, index, value):
        self.begin[index] = value
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def add_concat(self, value):
        self.concat.append(value)
    def insert_concat_at(self, index, value):
        self.concat.insert(index, value)
    def replace_concat_at(self, index, value):
        self.concat[index] = value
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def add_end(self, value):
        self.end.append(value)
    def insert_end_at(self, index, value):
        self.end.insert(index, value)
    def replace_end_at(self, index, value):
        self.end[index] = value
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def add_escape_regex(self, value):
        self.escape_regex.append(value)
    def insert_escape_regex_at(self, index, value):
        self.escape_regex.insert(index, value)
    def replace_escape_regex_at(self, index, value):
        self.escape_regex[index] = value
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def add_split(self, value):
        self.split.append(value)
    def insert_split_at(self, index, value):
        self.split.insert(index, value)
    def replace_split_at(self, index, value):
        self.split[index] = value
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def add_substring(self, value):
        self.substring.append(value)
    def insert_substring_at(self, index, value):
        self.substring.insert(index, value)
    def replace_substring_at(self, index, value):
        self.substring[index] = value
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def add_time_difference(self, value):
        self.time_difference.append(value)
    def insert_time_difference_at(self, index, value):
        self.time_difference.insert(index, value)
    def replace_time_difference_at(self, index, value):
        self.time_difference[index] = value
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def add_regex_capture(self, value):
        self.regex_capture.append(value)
    def insert_regex_capture_at(self, index, value):
        self.regex_capture.insert(index, value)
    def replace_regex_capture_at(self, index, value):
        self.regex_capture[index] = value
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def add_unique(self, value):
        self.unique.append(value)
    def insert_unique_at(self, index, value):
        self.unique.insert(index, value)
    def replace_unique_at(self, index, value):
        self.unique[index] = value
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def add_count(self, value):
        self.count.append(value)
    def insert_count_at(self, index, value):
        self.count.insert(index, value)
    def replace_count_at(self, index, value):
        self.count[index] = value
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def add_glob_to_regex(self, value):
        self.glob_to_regex.append(value)
    def insert_glob_to_regex_at(self, index, value):
        self.glob_to_regex.insert(index, value)
    def replace_glob_to_regex_at(self, index, value):
        self.glob_to_regex[index] = value
    def get_arithmetic_operation(self):
        return self.arithmetic_operation
    def set_arithmetic_operation(self, arithmetic_operation):
        self.arithmetic_operation = arithmetic_operation
    def validate_ArithmeticEnumeration(self, value):
        # Validate type oval-def:ArithmeticEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['add', 'multiply']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ArithmeticEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.object_component or
            self.variable_component or
            self.literal_component or
            self.arithmetic or
            self.begin or
            self.concat or
            self.end or
            self.escape_regex or
            self.split or
            self.substring or
            self.time_difference or
            self.regex_capture or
            self.unique or
            self.count or
            self.glob_to_regex
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ArithmeticFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArithmeticFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ArithmeticFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArithmeticFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ArithmeticFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ArithmeticFunctionType'):
        if self.arithmetic_operation is not None and 'arithmetic_operation' not in already_processed:
            already_processed.add('arithmetic_operation')
            outfile.write(' arithmetic_operation=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.arithmetic_operation), input_name='arithmetic_operation')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ArithmeticFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for object_component_ in self.object_component:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            object_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        for variable_component_ in self.variable_component:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            variable_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        for literal_component_ in self.literal_component:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            literal_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        for arithmetic_ in self.arithmetic:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            arithmetic_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        for begin_ in self.begin:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            begin_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        for concat_ in self.concat:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            concat_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        for end_ in self.end:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            end_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        for escape_regex_ in self.escape_regex:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            escape_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        for split_ in self.split:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            split_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        for substring_ in self.substring:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            substring_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        for time_difference_ in self.time_difference:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            time_difference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        for regex_capture_ in self.regex_capture:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            regex_capture_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        for unique_ in self.unique:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            unique_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        for count_ in self.count:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            count_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        for glob_to_regex_ in self.glob_to_regex:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            glob_to_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('arithmetic_operation', node)
        if value is not None and 'arithmetic_operation' not in already_processed:
            already_processed.add('arithmetic_operation')
            self.arithmetic_operation = value
            self.validate_ArithmeticEnumeration(self.arithmetic_operation)    # validate type ArithmeticEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component.append(obj_)
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component.append(obj_)
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component.append(obj_)
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic.append(obj_)
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin.append(obj_)
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat.append(obj_)
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end.append(obj_)
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex.append(obj_)
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split.append(obj_)
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring.append(obj_)
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference.append(obj_)
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture.append(obj_)
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique.append(obj_)
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count.append(obj_)
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex.append(obj_)
            obj_.original_tagname_ = 'glob_to_regex'
# end class ArithmeticFunctionType


class BeginFunctionType(GeneratedsSuper):
    """BeginFunctionType -- The begin function takes a single string component and defines a character (or string) that the component string should start with. The character attribute defines the specific character (or string). The character (or string) is only added to the component string if the component string does not already start with the specified character (or string). If the component string does not start with the specified character (or string) the entire character (or string) will be prepended to the component string..
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, character=None, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.character = _cast(None, character)
        self.character_nsprefix_ = None
        self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        self.end = end
        self.end_nsprefix_ = "oval-def"
        self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        self.split = split
        self.split_nsprefix_ = "oval-def"
        self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        self.count = count
        self.count_nsprefix_ = "oval-def"
        self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BeginFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BeginFunctionType.subclass:
            return BeginFunctionType.subclass(*args_, **kwargs_)
        else:
            return BeginFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def get_character(self):
        return self.character
    def set_character(self, character):
        self.character = character
    def has__content(self):
        if (
            self.object_component is not None or
            self.variable_component is not None or
            self.literal_component is not None or
            self.arithmetic is not None or
            self.begin is not None or
            self.concat is not None or
            self.end is not None or
            self.escape_regex is not None or
            self.split is not None or
            self.substring is not None or
            self.time_difference is not None or
            self.regex_capture is not None or
            self.unique is not None or
            self.count is not None or
            self.glob_to_regex is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='BeginFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BeginFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BeginFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BeginFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BeginFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BeginFunctionType'):
        if self.character is not None and 'character' not in already_processed:
            already_processed.add('character')
            outfile.write(' character=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.character), input_name='character')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='BeginFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.object_component is not None:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            self.object_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        if self.variable_component is not None:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            self.variable_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        if self.literal_component is not None:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            self.literal_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        if self.arithmetic is not None:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            self.arithmetic.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        if self.begin is not None:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            self.begin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        if self.concat is not None:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            self.concat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        if self.end is not None:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            self.end.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        if self.escape_regex is not None:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            self.escape_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        if self.split is not None:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            self.split.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        if self.substring is not None:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            self.substring.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        if self.time_difference is not None:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            self.time_difference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        if self.regex_capture is not None:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            self.regex_capture.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        if self.unique is not None:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            self.unique.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        if self.count is not None:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            self.count.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        if self.glob_to_regex is not None:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            self.glob_to_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('character', node)
        if value is not None and 'character' not in already_processed:
            already_processed.add('character')
            self.character = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component = obj_
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component = obj_
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component = obj_
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic = obj_
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin = obj_
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat = obj_
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end = obj_
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex = obj_
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split = obj_
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring = obj_
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference = obj_
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture = obj_
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique = obj_
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count = obj_
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex = obj_
            obj_.original_tagname_ = 'glob_to_regex'
# end class BeginFunctionType


class ConcatFunctionType(GeneratedsSuper):
    """ConcatFunctionType -- The concat function takes two or more components and concatenates them together to form a single string. The first component makes up the beginning of the resulting string and any following components are added to the end it. If one of the components returns multiple values then the concat function would be performed multiple times and the end result would be a collection of values for the local variable. For example assume a local variable has two sub-components: a basic component element returns the values "abc" and "def", and a literal component element that has a value of "xyz". The local_variable element would evaluate to a collection of two values, "abcxyz" and "defxyz". If one of the components does not exist, then the result of the concat operation should be does not exist.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        if object_component is None:
            self.object_component = []
        else:
            self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        if variable_component is None:
            self.variable_component = []
        else:
            self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        if literal_component is None:
            self.literal_component = []
        else:
            self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        if arithmetic is None:
            self.arithmetic = []
        else:
            self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        if begin is None:
            self.begin = []
        else:
            self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        if concat is None:
            self.concat = []
        else:
            self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        if end is None:
            self.end = []
        else:
            self.end = end
        self.end_nsprefix_ = "oval-def"
        if escape_regex is None:
            self.escape_regex = []
        else:
            self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        if split is None:
            self.split = []
        else:
            self.split = split
        self.split_nsprefix_ = "oval-def"
        if substring is None:
            self.substring = []
        else:
            self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        if time_difference is None:
            self.time_difference = []
        else:
            self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        if regex_capture is None:
            self.regex_capture = []
        else:
            self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        if unique is None:
            self.unique = []
        else:
            self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        if count is None:
            self.count = []
        else:
            self.count = count
        self.count_nsprefix_ = "oval-def"
        if glob_to_regex is None:
            self.glob_to_regex = []
        else:
            self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConcatFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConcatFunctionType.subclass:
            return ConcatFunctionType.subclass(*args_, **kwargs_)
        else:
            return ConcatFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def add_object_component(self, value):
        self.object_component.append(value)
    def insert_object_component_at(self, index, value):
        self.object_component.insert(index, value)
    def replace_object_component_at(self, index, value):
        self.object_component[index] = value
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def add_variable_component(self, value):
        self.variable_component.append(value)
    def insert_variable_component_at(self, index, value):
        self.variable_component.insert(index, value)
    def replace_variable_component_at(self, index, value):
        self.variable_component[index] = value
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def add_literal_component(self, value):
        self.literal_component.append(value)
    def insert_literal_component_at(self, index, value):
        self.literal_component.insert(index, value)
    def replace_literal_component_at(self, index, value):
        self.literal_component[index] = value
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def add_arithmetic(self, value):
        self.arithmetic.append(value)
    def insert_arithmetic_at(self, index, value):
        self.arithmetic.insert(index, value)
    def replace_arithmetic_at(self, index, value):
        self.arithmetic[index] = value
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def add_begin(self, value):
        self.begin.append(value)
    def insert_begin_at(self, index, value):
        self.begin.insert(index, value)
    def replace_begin_at(self, index, value):
        self.begin[index] = value
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def add_concat(self, value):
        self.concat.append(value)
    def insert_concat_at(self, index, value):
        self.concat.insert(index, value)
    def replace_concat_at(self, index, value):
        self.concat[index] = value
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def add_end(self, value):
        self.end.append(value)
    def insert_end_at(self, index, value):
        self.end.insert(index, value)
    def replace_end_at(self, index, value):
        self.end[index] = value
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def add_escape_regex(self, value):
        self.escape_regex.append(value)
    def insert_escape_regex_at(self, index, value):
        self.escape_regex.insert(index, value)
    def replace_escape_regex_at(self, index, value):
        self.escape_regex[index] = value
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def add_split(self, value):
        self.split.append(value)
    def insert_split_at(self, index, value):
        self.split.insert(index, value)
    def replace_split_at(self, index, value):
        self.split[index] = value
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def add_substring(self, value):
        self.substring.append(value)
    def insert_substring_at(self, index, value):
        self.substring.insert(index, value)
    def replace_substring_at(self, index, value):
        self.substring[index] = value
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def add_time_difference(self, value):
        self.time_difference.append(value)
    def insert_time_difference_at(self, index, value):
        self.time_difference.insert(index, value)
    def replace_time_difference_at(self, index, value):
        self.time_difference[index] = value
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def add_regex_capture(self, value):
        self.regex_capture.append(value)
    def insert_regex_capture_at(self, index, value):
        self.regex_capture.insert(index, value)
    def replace_regex_capture_at(self, index, value):
        self.regex_capture[index] = value
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def add_unique(self, value):
        self.unique.append(value)
    def insert_unique_at(self, index, value):
        self.unique.insert(index, value)
    def replace_unique_at(self, index, value):
        self.unique[index] = value
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def add_count(self, value):
        self.count.append(value)
    def insert_count_at(self, index, value):
        self.count.insert(index, value)
    def replace_count_at(self, index, value):
        self.count[index] = value
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def add_glob_to_regex(self, value):
        self.glob_to_regex.append(value)
    def insert_glob_to_regex_at(self, index, value):
        self.glob_to_regex.insert(index, value)
    def replace_glob_to_regex_at(self, index, value):
        self.glob_to_regex[index] = value
    def has__content(self):
        if (
            self.object_component or
            self.variable_component or
            self.literal_component or
            self.arithmetic or
            self.begin or
            self.concat or
            self.end or
            self.escape_regex or
            self.split or
            self.substring or
            self.time_difference or
            self.regex_capture or
            self.unique or
            self.count or
            self.glob_to_regex
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ConcatFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConcatFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ConcatFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConcatFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConcatFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConcatFunctionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='ConcatFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for object_component_ in self.object_component:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            object_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        for variable_component_ in self.variable_component:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            variable_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        for literal_component_ in self.literal_component:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            literal_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        for arithmetic_ in self.arithmetic:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            arithmetic_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        for begin_ in self.begin:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            begin_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        for concat_ in self.concat:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            concat_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        for end_ in self.end:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            end_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        for escape_regex_ in self.escape_regex:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            escape_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        for split_ in self.split:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            split_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        for substring_ in self.substring:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            substring_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        for time_difference_ in self.time_difference:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            time_difference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        for regex_capture_ in self.regex_capture:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            regex_capture_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        for unique_ in self.unique:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            unique_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        for count_ in self.count:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            count_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        for glob_to_regex_ in self.glob_to_regex:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            glob_to_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component.append(obj_)
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component.append(obj_)
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component.append(obj_)
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic.append(obj_)
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin.append(obj_)
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat.append(obj_)
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end.append(obj_)
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex.append(obj_)
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split.append(obj_)
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring.append(obj_)
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference.append(obj_)
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture.append(obj_)
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique.append(obj_)
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count.append(obj_)
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex.append(obj_)
            obj_.original_tagname_ = 'glob_to_regex'
# end class ConcatFunctionType


class EndFunctionType(GeneratedsSuper):
    """EndFunctionType -- The end function takes a single string component and defines a character (or string) that the component string should end with. The character attribute defines the specific character (or string). The character (or string) is only added to the component string if the component string does not already end with the specified character (or string). If the desired end character is a string, then the entire end string must exist at the end if the component string. If the entire end string is not present then the entire end string is appended to the component string.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, character=None, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.character = _cast(None, character)
        self.character_nsprefix_ = None
        self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        self.end = end
        self.end_nsprefix_ = "oval-def"
        self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        self.split = split
        self.split_nsprefix_ = "oval-def"
        self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        self.count = count
        self.count_nsprefix_ = "oval-def"
        self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EndFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EndFunctionType.subclass:
            return EndFunctionType.subclass(*args_, **kwargs_)
        else:
            return EndFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def get_character(self):
        return self.character
    def set_character(self, character):
        self.character = character
    def has__content(self):
        if (
            self.object_component is not None or
            self.variable_component is not None or
            self.literal_component is not None or
            self.arithmetic is not None or
            self.begin is not None or
            self.concat is not None or
            self.end is not None or
            self.escape_regex is not None or
            self.split is not None or
            self.substring is not None or
            self.time_difference is not None or
            self.regex_capture is not None or
            self.unique is not None or
            self.count is not None or
            self.glob_to_regex is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EndFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EndFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EndFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EndFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EndFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EndFunctionType'):
        if self.character is not None and 'character' not in already_processed:
            already_processed.add('character')
            outfile.write(' character=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.character), input_name='character')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EndFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.object_component is not None:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            self.object_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        if self.variable_component is not None:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            self.variable_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        if self.literal_component is not None:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            self.literal_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        if self.arithmetic is not None:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            self.arithmetic.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        if self.begin is not None:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            self.begin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        if self.concat is not None:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            self.concat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        if self.end is not None:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            self.end.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        if self.escape_regex is not None:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            self.escape_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        if self.split is not None:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            self.split.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        if self.substring is not None:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            self.substring.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        if self.time_difference is not None:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            self.time_difference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        if self.regex_capture is not None:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            self.regex_capture.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        if self.unique is not None:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            self.unique.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        if self.count is not None:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            self.count.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        if self.glob_to_regex is not None:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            self.glob_to_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('character', node)
        if value is not None and 'character' not in already_processed:
            already_processed.add('character')
            self.character = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component = obj_
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component = obj_
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component = obj_
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic = obj_
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin = obj_
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat = obj_
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end = obj_
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex = obj_
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split = obj_
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring = obj_
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference = obj_
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture = obj_
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique = obj_
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count = obj_
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex = obj_
            obj_.original_tagname_ = 'glob_to_regex'
# end class EndFunctionType


class EscapeRegexFunctionType(GeneratedsSuper):
    """EscapeRegexFunctionType -- The escape_regex function takes a single string component and escapes all of the regular expression characters. If the string sub-component contains multiple values, then the escape_regex function will be applied to each individual value and return a multiple-valued result. For example, the string '(\.test_string*)?' will evaluate to '\(\\\.test_string\*\)\?'. The purpose for this is that many times, a component used in pattern match needs to be treated as a literal string and not a regular expression. For example, assume a basic component element that identifies a file path that is held in the Windows registry. This path is a string that might contain regular expression characters. These characters are likely not intended to be treated as regular expression characters and need to be escaped. This function allows a definition writer to mark convert the values of components to regular expression format.
    Note that when using regular expressions, OVAL supports a common subset of the regular expression character classes, operations, expressions and other lexical tokens defined within Perl 5's regular expression specification. The set of Perl metacharacters which must be escaped by this function is as follows, enclosed by single quotes: '^$\.[](){}*+?|'. For more information on the supported regular expression syntax in OVAL see: http://oval.mitre.org/language/about/re_support_5.6.html.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        self.end = end
        self.end_nsprefix_ = "oval-def"
        self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        self.split = split
        self.split_nsprefix_ = "oval-def"
        self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        self.count = count
        self.count_nsprefix_ = "oval-def"
        self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EscapeRegexFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EscapeRegexFunctionType.subclass:
            return EscapeRegexFunctionType.subclass(*args_, **kwargs_)
        else:
            return EscapeRegexFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def has__content(self):
        if (
            self.object_component is not None or
            self.variable_component is not None or
            self.literal_component is not None or
            self.arithmetic is not None or
            self.begin is not None or
            self.concat is not None or
            self.end is not None or
            self.escape_regex is not None or
            self.split is not None or
            self.substring is not None or
            self.time_difference is not None or
            self.regex_capture is not None or
            self.unique is not None or
            self.count is not None or
            self.glob_to_regex is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EscapeRegexFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EscapeRegexFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EscapeRegexFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EscapeRegexFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EscapeRegexFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EscapeRegexFunctionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EscapeRegexFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.object_component is not None:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            self.object_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        if self.variable_component is not None:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            self.variable_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        if self.literal_component is not None:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            self.literal_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        if self.arithmetic is not None:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            self.arithmetic.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        if self.begin is not None:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            self.begin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        if self.concat is not None:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            self.concat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        if self.end is not None:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            self.end.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        if self.escape_regex is not None:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            self.escape_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        if self.split is not None:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            self.split.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        if self.substring is not None:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            self.substring.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        if self.time_difference is not None:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            self.time_difference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        if self.regex_capture is not None:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            self.regex_capture.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        if self.unique is not None:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            self.unique.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        if self.count is not None:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            self.count.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        if self.glob_to_regex is not None:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            self.glob_to_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component = obj_
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component = obj_
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component = obj_
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic = obj_
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin = obj_
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat = obj_
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end = obj_
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex = obj_
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split = obj_
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring = obj_
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference = obj_
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture = obj_
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique = obj_
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count = obj_
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex = obj_
            obj_.original_tagname_ = 'glob_to_regex'
# end class EscapeRegexFunctionType


class SplitFunctionType(GeneratedsSuper):
    """SplitFunctionType -- The split function takes a single string component and turns it into a collection of values based on a delimiter string. For example, assume that a basic component element returns the value "a-b-c-d" to the split function with the delimiter set to "-". The local_variable element would be evaluated to have four values "a", "b", "c", and "d". If the basic component returns a value that begins, or ends, with a delimiter, the local_variable element would contain empty string values at the beginning, or end, of the collection of values returned for that string component. For example, if the delimiter is "-", and the basic component element returns the value "-a-a-", the local_variable element would evaluate to a collection of four values "", "a", "a", and "". Likewise, if the basic component element returns a value that contains adjacent delimiters such as "---", the local_variable element would evaluate to a collection of four values "", "", "", and "".
    Lastly, if the basic component element used by the split function returnsa collection of values, then the split function is performed multiple times, and all of the results, from each of the split functions, are returned.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, delimiter=None, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.delimiter = _cast(None, delimiter)
        self.delimiter_nsprefix_ = None
        self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        self.end = end
        self.end_nsprefix_ = "oval-def"
        self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        self.split = split
        self.split_nsprefix_ = "oval-def"
        self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        self.count = count
        self.count_nsprefix_ = "oval-def"
        self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SplitFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SplitFunctionType.subclass:
            return SplitFunctionType.subclass(*args_, **kwargs_)
        else:
            return SplitFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def get_delimiter(self):
        return self.delimiter
    def set_delimiter(self, delimiter):
        self.delimiter = delimiter
    def has__content(self):
        if (
            self.object_component is not None or
            self.variable_component is not None or
            self.literal_component is not None or
            self.arithmetic is not None or
            self.begin is not None or
            self.concat is not None or
            self.end is not None or
            self.escape_regex is not None or
            self.split is not None or
            self.substring is not None or
            self.time_difference is not None or
            self.regex_capture is not None or
            self.unique is not None or
            self.count is not None or
            self.glob_to_regex is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='SplitFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SplitFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SplitFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SplitFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SplitFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SplitFunctionType'):
        if self.delimiter is not None and 'delimiter' not in already_processed:
            already_processed.add('delimiter')
            outfile.write(' delimiter=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.delimiter), input_name='delimiter')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='SplitFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.object_component is not None:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            self.object_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        if self.variable_component is not None:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            self.variable_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        if self.literal_component is not None:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            self.literal_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        if self.arithmetic is not None:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            self.arithmetic.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        if self.begin is not None:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            self.begin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        if self.concat is not None:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            self.concat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        if self.end is not None:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            self.end.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        if self.escape_regex is not None:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            self.escape_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        if self.split is not None:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            self.split.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        if self.substring is not None:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            self.substring.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        if self.time_difference is not None:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            self.time_difference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        if self.regex_capture is not None:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            self.regex_capture.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        if self.unique is not None:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            self.unique.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        if self.count is not None:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            self.count.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        if self.glob_to_regex is not None:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            self.glob_to_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('delimiter', node)
        if value is not None and 'delimiter' not in already_processed:
            already_processed.add('delimiter')
            self.delimiter = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component = obj_
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component = obj_
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component = obj_
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic = obj_
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin = obj_
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat = obj_
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end = obj_
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex = obj_
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split = obj_
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring = obj_
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference = obj_
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture = obj_
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique = obj_
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count = obj_
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex = obj_
            obj_.original_tagname_ = 'glob_to_regex'
# end class SplitFunctionType


class SubstringFunctionType(GeneratedsSuper):
    """SubstringFunctionType -- The substring function takes a single string component and produces a single value that contains a portion of the original string. The substring_start attribute defines the starting position in the original string. To include the first character of the string, the start position would be 1. A value less than 1 also means that the start position would be 1. If the substring_start attribute has value greater than the length of the original string an error should be reported. The substring_length attribute defines how many characters after, and including, the starting character to include. A substring_length value greater than the actual length of the string, or a negative value, means to include all of the characters after the starting character. For example, assume a basic component element that returns the value "abcdefg" with a substring_start value of 3 and a substring_length value of 2. The local_variable element would evaluate to have a single value
    of "cd". If the string component used by the substring function returns a collection of values, then the substring operation is performed multiple times and results in a collection of values for the component.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, substring_start=None, substring_length=None, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.substring_start = _cast(int, substring_start)
        self.substring_start_nsprefix_ = None
        self.substring_length = _cast(int, substring_length)
        self.substring_length_nsprefix_ = None
        self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        self.end = end
        self.end_nsprefix_ = "oval-def"
        self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        self.split = split
        self.split_nsprefix_ = "oval-def"
        self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        self.count = count
        self.count_nsprefix_ = "oval-def"
        self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SubstringFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SubstringFunctionType.subclass:
            return SubstringFunctionType.subclass(*args_, **kwargs_)
        else:
            return SubstringFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def get_substring_start(self):
        return self.substring_start
    def set_substring_start(self, substring_start):
        self.substring_start = substring_start
    def get_substring_length(self):
        return self.substring_length
    def set_substring_length(self, substring_length):
        self.substring_length = substring_length
    def has__content(self):
        if (
            self.object_component is not None or
            self.variable_component is not None or
            self.literal_component is not None or
            self.arithmetic is not None or
            self.begin is not None or
            self.concat is not None or
            self.end is not None or
            self.escape_regex is not None or
            self.split is not None or
            self.substring is not None or
            self.time_difference is not None or
            self.regex_capture is not None or
            self.unique is not None or
            self.count is not None or
            self.glob_to_regex is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='SubstringFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SubstringFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SubstringFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubstringFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SubstringFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SubstringFunctionType'):
        if self.substring_start is not None and 'substring_start' not in already_processed:
            already_processed.add('substring_start')
            outfile.write(' substring_start="%s"' % self.gds_format_integer(self.substring_start, input_name='substring_start'))
        if self.substring_length is not None and 'substring_length' not in already_processed:
            already_processed.add('substring_length')
            outfile.write(' substring_length="%s"' % self.gds_format_integer(self.substring_length, input_name='substring_length'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='SubstringFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.object_component is not None:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            self.object_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        if self.variable_component is not None:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            self.variable_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        if self.literal_component is not None:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            self.literal_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        if self.arithmetic is not None:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            self.arithmetic.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        if self.begin is not None:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            self.begin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        if self.concat is not None:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            self.concat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        if self.end is not None:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            self.end.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        if self.escape_regex is not None:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            self.escape_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        if self.split is not None:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            self.split.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        if self.substring is not None:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            self.substring.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        if self.time_difference is not None:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            self.time_difference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        if self.regex_capture is not None:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            self.regex_capture.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        if self.unique is not None:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            self.unique.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        if self.count is not None:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            self.count.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        if self.glob_to_regex is not None:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            self.glob_to_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('substring_start', node)
        if value is not None and 'substring_start' not in already_processed:
            already_processed.add('substring_start')
            self.substring_start = self.gds_parse_integer(value, node, 'substring_start')
        value = find_attr_value_('substring_length', node)
        if value is not None and 'substring_length' not in already_processed:
            already_processed.add('substring_length')
            self.substring_length = self.gds_parse_integer(value, node, 'substring_length')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component = obj_
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component = obj_
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component = obj_
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic = obj_
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin = obj_
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat = obj_
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end = obj_
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex = obj_
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split = obj_
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring = obj_
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference = obj_
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture = obj_
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique = obj_
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count = obj_
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex = obj_
            obj_.original_tagname_ = 'glob_to_regex'
# end class SubstringFunctionType


class TimeDifferenceFunctionType(GeneratedsSuper):
    """TimeDifferenceFunctionType -- The time_difference function calculates the difference in seconds between date-time values. If one component is specified, the values of that component are subtracted from the current time (UTC). The current time is the time at which the function is evaluated. If two components are specified, the value of the second component is subtracted from the value of the first component. If the component(s) contain a collection of values, the operation is performed multiple times on the Cartesian product of the component(s) and the result is also a collection of time difference values. For example, assume a local_variable specifies the time_difference function and has two sub-components under this function: the first component returns "04/02/2009" and "04/03/2009", and the second component returns "02/02/2005" and "02/03/2005" and "02/04/2005". The local_variable element would evaluate to a collection of six values: (ToSeconds("04/02/2009") - ToSeconds("02/02/2005")), (ToSeconds("04/02/2009") - ToSeconds("02/03/2005")),
    (ToSeconds("04/02/2009") - ToSeconds("02/04/2005")), (ToSeconds("04/03/2009") - ToSeconds("02/02/2005")), (ToSeconds("04/03/2009") - ToSeconds("02/03/2005")), and (ToSeconds("04/03/2009") - ToSeconds("02/04/2005")).
    The date-time format of each component is determined by the two format attributes. The format1 attribute applies to the first component, and the format2 attribute applies to the second component. Valid values for the attributes are 'win_filetime', 'seconds_since_epoch', 'day_month_year', 'year_month_day', and 'month_day_year'. Please see the DateTimeFormatEnumeration for more information about each of these values. If an input value is not understood, the result is an error. If only one input is specified, specify the format with the format2 attribute, as the first input is considered to be the implied 'current time' input.
    Note that the datatype associated with the components should be 'string' or 'int' depending on which date time format is specified.  The result of this function though is always an integer.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, format_1='year_month_day', format_2='year_month_day', object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.format_1 = _cast(None, format_1)
        self.format_1_nsprefix_ = None
        self.format_2 = _cast(None, format_2)
        self.format_2_nsprefix_ = None
        if object_component is None:
            self.object_component = []
        else:
            self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        if variable_component is None:
            self.variable_component = []
        else:
            self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        if literal_component is None:
            self.literal_component = []
        else:
            self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        if arithmetic is None:
            self.arithmetic = []
        else:
            self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        if begin is None:
            self.begin = []
        else:
            self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        if concat is None:
            self.concat = []
        else:
            self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        if end is None:
            self.end = []
        else:
            self.end = end
        self.end_nsprefix_ = "oval-def"
        if escape_regex is None:
            self.escape_regex = []
        else:
            self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        if split is None:
            self.split = []
        else:
            self.split = split
        self.split_nsprefix_ = "oval-def"
        if substring is None:
            self.substring = []
        else:
            self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        if time_difference is None:
            self.time_difference = []
        else:
            self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        if regex_capture is None:
            self.regex_capture = []
        else:
            self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        if unique is None:
            self.unique = []
        else:
            self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        if count is None:
            self.count = []
        else:
            self.count = count
        self.count_nsprefix_ = "oval-def"
        if glob_to_regex is None:
            self.glob_to_regex = []
        else:
            self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeDifferenceFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeDifferenceFunctionType.subclass:
            return TimeDifferenceFunctionType.subclass(*args_, **kwargs_)
        else:
            return TimeDifferenceFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def add_object_component(self, value):
        self.object_component.append(value)
    def insert_object_component_at(self, index, value):
        self.object_component.insert(index, value)
    def replace_object_component_at(self, index, value):
        self.object_component[index] = value
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def add_variable_component(self, value):
        self.variable_component.append(value)
    def insert_variable_component_at(self, index, value):
        self.variable_component.insert(index, value)
    def replace_variable_component_at(self, index, value):
        self.variable_component[index] = value
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def add_literal_component(self, value):
        self.literal_component.append(value)
    def insert_literal_component_at(self, index, value):
        self.literal_component.insert(index, value)
    def replace_literal_component_at(self, index, value):
        self.literal_component[index] = value
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def add_arithmetic(self, value):
        self.arithmetic.append(value)
    def insert_arithmetic_at(self, index, value):
        self.arithmetic.insert(index, value)
    def replace_arithmetic_at(self, index, value):
        self.arithmetic[index] = value
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def add_begin(self, value):
        self.begin.append(value)
    def insert_begin_at(self, index, value):
        self.begin.insert(index, value)
    def replace_begin_at(self, index, value):
        self.begin[index] = value
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def add_concat(self, value):
        self.concat.append(value)
    def insert_concat_at(self, index, value):
        self.concat.insert(index, value)
    def replace_concat_at(self, index, value):
        self.concat[index] = value
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def add_end(self, value):
        self.end.append(value)
    def insert_end_at(self, index, value):
        self.end.insert(index, value)
    def replace_end_at(self, index, value):
        self.end[index] = value
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def add_escape_regex(self, value):
        self.escape_regex.append(value)
    def insert_escape_regex_at(self, index, value):
        self.escape_regex.insert(index, value)
    def replace_escape_regex_at(self, index, value):
        self.escape_regex[index] = value
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def add_split(self, value):
        self.split.append(value)
    def insert_split_at(self, index, value):
        self.split.insert(index, value)
    def replace_split_at(self, index, value):
        self.split[index] = value
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def add_substring(self, value):
        self.substring.append(value)
    def insert_substring_at(self, index, value):
        self.substring.insert(index, value)
    def replace_substring_at(self, index, value):
        self.substring[index] = value
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def add_time_difference(self, value):
        self.time_difference.append(value)
    def insert_time_difference_at(self, index, value):
        self.time_difference.insert(index, value)
    def replace_time_difference_at(self, index, value):
        self.time_difference[index] = value
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def add_regex_capture(self, value):
        self.regex_capture.append(value)
    def insert_regex_capture_at(self, index, value):
        self.regex_capture.insert(index, value)
    def replace_regex_capture_at(self, index, value):
        self.regex_capture[index] = value
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def add_unique(self, value):
        self.unique.append(value)
    def insert_unique_at(self, index, value):
        self.unique.insert(index, value)
    def replace_unique_at(self, index, value):
        self.unique[index] = value
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def add_count(self, value):
        self.count.append(value)
    def insert_count_at(self, index, value):
        self.count.insert(index, value)
    def replace_count_at(self, index, value):
        self.count[index] = value
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def add_glob_to_regex(self, value):
        self.glob_to_regex.append(value)
    def insert_glob_to_regex_at(self, index, value):
        self.glob_to_regex.insert(index, value)
    def replace_glob_to_regex_at(self, index, value):
        self.glob_to_regex[index] = value
    def get_format_1(self):
        return self.format_1
    def set_format_1(self, format_1):
        self.format_1 = format_1
    def get_format_2(self):
        return self.format_2
    def set_format_2(self, format_2):
        self.format_2 = format_2
    def validate_DateTimeFormatEnumeration(self, value):
        # Validate type oval-def:DateTimeFormatEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['year_month_day', 'month_day_year', 'day_month_year', 'win_filetime', 'seconds_since_epoch', 'cim_datetime']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DateTimeFormatEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.object_component or
            self.variable_component or
            self.literal_component or
            self.arithmetic or
            self.begin or
            self.concat or
            self.end or
            self.escape_regex or
            self.split or
            self.substring or
            self.time_difference or
            self.regex_capture or
            self.unique or
            self.count or
            self.glob_to_regex
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='TimeDifferenceFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeDifferenceFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TimeDifferenceFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TimeDifferenceFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TimeDifferenceFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TimeDifferenceFunctionType'):
        if self.format_1 != "year_month_day" and 'format_1' not in already_processed:
            already_processed.add('format_1')
            outfile.write(' format_1=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.format_1), input_name='format_1')), ))
        if self.format_2 != "year_month_day" and 'format_2' not in already_processed:
            already_processed.add('format_2')
            outfile.write(' format_2=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.format_2), input_name='format_2')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='TimeDifferenceFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for object_component_ in self.object_component:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            object_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        for variable_component_ in self.variable_component:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            variable_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        for literal_component_ in self.literal_component:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            literal_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        for arithmetic_ in self.arithmetic:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            arithmetic_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        for begin_ in self.begin:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            begin_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        for concat_ in self.concat:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            concat_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        for end_ in self.end:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            end_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        for escape_regex_ in self.escape_regex:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            escape_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        for split_ in self.split:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            split_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        for substring_ in self.substring:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            substring_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        for time_difference_ in self.time_difference:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            time_difference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        for regex_capture_ in self.regex_capture:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            regex_capture_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        for unique_ in self.unique:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            unique_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        for count_ in self.count:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            count_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        for glob_to_regex_ in self.glob_to_regex:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            glob_to_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('format_1', node)
        if value is not None and 'format_1' not in already_processed:
            already_processed.add('format_1')
            self.format_1 = value
            self.validate_DateTimeFormatEnumeration(self.format_1)    # validate type DateTimeFormatEnumeration
        value = find_attr_value_('format_2', node)
        if value is not None and 'format_2' not in already_processed:
            already_processed.add('format_2')
            self.format_2 = value
            self.validate_DateTimeFormatEnumeration(self.format_2)    # validate type DateTimeFormatEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component.append(obj_)
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component.append(obj_)
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component.append(obj_)
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic.append(obj_)
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin.append(obj_)
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat.append(obj_)
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end.append(obj_)
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex.append(obj_)
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split.append(obj_)
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring.append(obj_)
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference.append(obj_)
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture.append(obj_)
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique.append(obj_)
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count.append(obj_)
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex.append(obj_)
            obj_.original_tagname_ = 'glob_to_regex'
# end class TimeDifferenceFunctionType


class RegexCaptureFunctionType(GeneratedsSuper):
    """RegexCaptureFunctionType -- The regex_capture function captures a single substring from a single string component. If the string sub-component contains multiple values, then the regex_capture function will extract a substring from each value. The 'pattern' attribute provides a regular expression that should contain a single subexpression (using parentheses). For example, the pattern ^abc(.*)xyz$ would capture a substring from each of the string component's values if the value starts with abc and ends with xyz. In this case the subexpression would be all the characters that exist in between the abc and the xyz. Note that subexpressions match the longest possible substrings.
    If the regular expression contains multiple capturing sub-patterns, only the first capture is used. If there are no capturing sub-patterns, the result for each target string must be the empty string. Otherwise, if the regular expression could match the target string in more than one place, only the first match (and its first capture) is used. If no matches are found in a target string, the result for that target must be the empty string.
    Note that a quantified capturing sub-pattern does not produce multiple substrings. Standard regular expression semantics are such that if a capturing sub-pattern is required to match multiple times in order for the overall regular expression to match, the capture produced is the last substring to have matched the sub-pattern.
    Note that when using regular expressions, OVAL supports a common subset of the regular expression character classes, operations, expressions and other lexical tokens defined within Perl 5's regular expression specification. If any of the Perl metacharacters are to be used literally, then they must be escaped. The set of metacharacters which must be escaped for this purpose is as follows, enclosed by single quotes: '^$\.[](){}*+?|'. For more information on the supported regular expression syntax in OVAL see: http://oval.mitre.org/language/about/re_support_5.6.html.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, pattern=None, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.pattern = _cast(None, pattern)
        self.pattern_nsprefix_ = None
        self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        self.end = end
        self.end_nsprefix_ = "oval-def"
        self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        self.split = split
        self.split_nsprefix_ = "oval-def"
        self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        self.count = count
        self.count_nsprefix_ = "oval-def"
        self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegexCaptureFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegexCaptureFunctionType.subclass:
            return RegexCaptureFunctionType.subclass(*args_, **kwargs_)
        else:
            return RegexCaptureFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def get_pattern(self):
        return self.pattern
    def set_pattern(self, pattern):
        self.pattern = pattern
    def has__content(self):
        if (
            self.object_component is not None or
            self.variable_component is not None or
            self.literal_component is not None or
            self.arithmetic is not None or
            self.begin is not None or
            self.concat is not None or
            self.end is not None or
            self.escape_regex is not None or
            self.split is not None or
            self.substring is not None or
            self.time_difference is not None or
            self.regex_capture is not None or
            self.unique is not None or
            self.count is not None or
            self.glob_to_regex is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='RegexCaptureFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegexCaptureFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RegexCaptureFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegexCaptureFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RegexCaptureFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RegexCaptureFunctionType'):
        if self.pattern is not None and 'pattern' not in already_processed:
            already_processed.add('pattern')
            outfile.write(' pattern=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.pattern), input_name='pattern')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='RegexCaptureFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.object_component is not None:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            self.object_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        if self.variable_component is not None:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            self.variable_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        if self.literal_component is not None:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            self.literal_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        if self.arithmetic is not None:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            self.arithmetic.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        if self.begin is not None:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            self.begin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        if self.concat is not None:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            self.concat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        if self.end is not None:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            self.end.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        if self.escape_regex is not None:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            self.escape_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        if self.split is not None:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            self.split.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        if self.substring is not None:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            self.substring.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        if self.time_difference is not None:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            self.time_difference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        if self.regex_capture is not None:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            self.regex_capture.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        if self.unique is not None:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            self.unique.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        if self.count is not None:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            self.count.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        if self.glob_to_regex is not None:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            self.glob_to_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('pattern', node)
        if value is not None and 'pattern' not in already_processed:
            already_processed.add('pattern')
            self.pattern = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component = obj_
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component = obj_
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component = obj_
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic = obj_
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin = obj_
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat = obj_
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end = obj_
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex = obj_
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split = obj_
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring = obj_
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference = obj_
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture = obj_
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique = obj_
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count = obj_
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex = obj_
            obj_.original_tagname_ = 'glob_to_regex'
# end class RegexCaptureFunctionType


class UniqueFunctionType(GeneratedsSuper):
    """UniqueFunctionType -- The unique function takes one or more components and removes any duplicate value from the set of components. All components used in the unique function will be treated as strings. For example, assume that three components exist, one that contains a string value of 'foo', and two of which both resolve to the string value 'bar'. Applying the unique function to these three components resolves to a local_variable with two string values, 'foo' and 'bar'. Additionally, if any of the components referenced by the unique function evaluate to a collection of values, then those values are used in the unique calculation. For example, assume that there are two components, one of which resolves to a single string value, 'foo', the other of which resolves to two string values, 'foo' and 'bar'. If the unique function is used to remove duplicates from these two components, the function will resolve to a local_variable that is a collection of two string values, 'foo' and
    'bar'.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        if object_component is None:
            self.object_component = []
        else:
            self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        if variable_component is None:
            self.variable_component = []
        else:
            self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        if literal_component is None:
            self.literal_component = []
        else:
            self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        if arithmetic is None:
            self.arithmetic = []
        else:
            self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        if begin is None:
            self.begin = []
        else:
            self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        if concat is None:
            self.concat = []
        else:
            self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        if end is None:
            self.end = []
        else:
            self.end = end
        self.end_nsprefix_ = "oval-def"
        if escape_regex is None:
            self.escape_regex = []
        else:
            self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        if split is None:
            self.split = []
        else:
            self.split = split
        self.split_nsprefix_ = "oval-def"
        if substring is None:
            self.substring = []
        else:
            self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        if time_difference is None:
            self.time_difference = []
        else:
            self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        if regex_capture is None:
            self.regex_capture = []
        else:
            self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        if unique is None:
            self.unique = []
        else:
            self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        if count is None:
            self.count = []
        else:
            self.count = count
        self.count_nsprefix_ = "oval-def"
        if glob_to_regex is None:
            self.glob_to_regex = []
        else:
            self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UniqueFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UniqueFunctionType.subclass:
            return UniqueFunctionType.subclass(*args_, **kwargs_)
        else:
            return UniqueFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def add_object_component(self, value):
        self.object_component.append(value)
    def insert_object_component_at(self, index, value):
        self.object_component.insert(index, value)
    def replace_object_component_at(self, index, value):
        self.object_component[index] = value
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def add_variable_component(self, value):
        self.variable_component.append(value)
    def insert_variable_component_at(self, index, value):
        self.variable_component.insert(index, value)
    def replace_variable_component_at(self, index, value):
        self.variable_component[index] = value
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def add_literal_component(self, value):
        self.literal_component.append(value)
    def insert_literal_component_at(self, index, value):
        self.literal_component.insert(index, value)
    def replace_literal_component_at(self, index, value):
        self.literal_component[index] = value
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def add_arithmetic(self, value):
        self.arithmetic.append(value)
    def insert_arithmetic_at(self, index, value):
        self.arithmetic.insert(index, value)
    def replace_arithmetic_at(self, index, value):
        self.arithmetic[index] = value
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def add_begin(self, value):
        self.begin.append(value)
    def insert_begin_at(self, index, value):
        self.begin.insert(index, value)
    def replace_begin_at(self, index, value):
        self.begin[index] = value
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def add_concat(self, value):
        self.concat.append(value)
    def insert_concat_at(self, index, value):
        self.concat.insert(index, value)
    def replace_concat_at(self, index, value):
        self.concat[index] = value
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def add_end(self, value):
        self.end.append(value)
    def insert_end_at(self, index, value):
        self.end.insert(index, value)
    def replace_end_at(self, index, value):
        self.end[index] = value
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def add_escape_regex(self, value):
        self.escape_regex.append(value)
    def insert_escape_regex_at(self, index, value):
        self.escape_regex.insert(index, value)
    def replace_escape_regex_at(self, index, value):
        self.escape_regex[index] = value
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def add_split(self, value):
        self.split.append(value)
    def insert_split_at(self, index, value):
        self.split.insert(index, value)
    def replace_split_at(self, index, value):
        self.split[index] = value
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def add_substring(self, value):
        self.substring.append(value)
    def insert_substring_at(self, index, value):
        self.substring.insert(index, value)
    def replace_substring_at(self, index, value):
        self.substring[index] = value
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def add_time_difference(self, value):
        self.time_difference.append(value)
    def insert_time_difference_at(self, index, value):
        self.time_difference.insert(index, value)
    def replace_time_difference_at(self, index, value):
        self.time_difference[index] = value
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def add_regex_capture(self, value):
        self.regex_capture.append(value)
    def insert_regex_capture_at(self, index, value):
        self.regex_capture.insert(index, value)
    def replace_regex_capture_at(self, index, value):
        self.regex_capture[index] = value
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def add_unique(self, value):
        self.unique.append(value)
    def insert_unique_at(self, index, value):
        self.unique.insert(index, value)
    def replace_unique_at(self, index, value):
        self.unique[index] = value
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def add_count(self, value):
        self.count.append(value)
    def insert_count_at(self, index, value):
        self.count.insert(index, value)
    def replace_count_at(self, index, value):
        self.count[index] = value
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def add_glob_to_regex(self, value):
        self.glob_to_regex.append(value)
    def insert_glob_to_regex_at(self, index, value):
        self.glob_to_regex.insert(index, value)
    def replace_glob_to_regex_at(self, index, value):
        self.glob_to_regex[index] = value
    def has__content(self):
        if (
            self.object_component or
            self.variable_component or
            self.literal_component or
            self.arithmetic or
            self.begin or
            self.concat or
            self.end or
            self.escape_regex or
            self.split or
            self.substring or
            self.time_difference or
            self.regex_capture or
            self.unique or
            self.count or
            self.glob_to_regex
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='UniqueFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UniqueFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UniqueFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UniqueFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UniqueFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UniqueFunctionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='UniqueFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for object_component_ in self.object_component:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            object_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        for variable_component_ in self.variable_component:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            variable_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        for literal_component_ in self.literal_component:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            literal_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        for arithmetic_ in self.arithmetic:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            arithmetic_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        for begin_ in self.begin:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            begin_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        for concat_ in self.concat:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            concat_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        for end_ in self.end:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            end_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        for escape_regex_ in self.escape_regex:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            escape_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        for split_ in self.split:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            split_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        for substring_ in self.substring:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            substring_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        for time_difference_ in self.time_difference:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            time_difference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        for regex_capture_ in self.regex_capture:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            regex_capture_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        for unique_ in self.unique:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            unique_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        for count_ in self.count:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            count_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        for glob_to_regex_ in self.glob_to_regex:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            glob_to_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component.append(obj_)
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component.append(obj_)
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component.append(obj_)
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic.append(obj_)
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin.append(obj_)
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat.append(obj_)
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end.append(obj_)
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex.append(obj_)
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split.append(obj_)
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring.append(obj_)
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference.append(obj_)
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture.append(obj_)
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique.append(obj_)
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count.append(obj_)
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex.append(obj_)
            obj_.original_tagname_ = 'glob_to_regex'
# end class UniqueFunctionType


class CountFunctionType(GeneratedsSuper):
    """CountFunctionType -- The count function takes one or more components and returns the count of all of the values represented by the components. For example, assume that two variables exist, each with a single value. By applying the count function against two variable components that resolve to the two variables, the resulting local_variable would have a value of '2'. Additionally, if any of the components referenced by the count function evaluate to a collection of values, then those values are used in the count calculation. For example, assume that there are two components, one of which resolves to a single value, the other of which resolves to two values. If the count function is used to provide a count of these two components, the function will resolve to a local_variable with the values '3'.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        if object_component is None:
            self.object_component = []
        else:
            self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        if variable_component is None:
            self.variable_component = []
        else:
            self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        if literal_component is None:
            self.literal_component = []
        else:
            self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        if arithmetic is None:
            self.arithmetic = []
        else:
            self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        if begin is None:
            self.begin = []
        else:
            self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        if concat is None:
            self.concat = []
        else:
            self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        if end is None:
            self.end = []
        else:
            self.end = end
        self.end_nsprefix_ = "oval-def"
        if escape_regex is None:
            self.escape_regex = []
        else:
            self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        if split is None:
            self.split = []
        else:
            self.split = split
        self.split_nsprefix_ = "oval-def"
        if substring is None:
            self.substring = []
        else:
            self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        if time_difference is None:
            self.time_difference = []
        else:
            self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        if regex_capture is None:
            self.regex_capture = []
        else:
            self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        if unique is None:
            self.unique = []
        else:
            self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        if count is None:
            self.count = []
        else:
            self.count = count
        self.count_nsprefix_ = "oval-def"
        if glob_to_regex is None:
            self.glob_to_regex = []
        else:
            self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountFunctionType.subclass:
            return CountFunctionType.subclass(*args_, **kwargs_)
        else:
            return CountFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def add_object_component(self, value):
        self.object_component.append(value)
    def insert_object_component_at(self, index, value):
        self.object_component.insert(index, value)
    def replace_object_component_at(self, index, value):
        self.object_component[index] = value
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def add_variable_component(self, value):
        self.variable_component.append(value)
    def insert_variable_component_at(self, index, value):
        self.variable_component.insert(index, value)
    def replace_variable_component_at(self, index, value):
        self.variable_component[index] = value
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def add_literal_component(self, value):
        self.literal_component.append(value)
    def insert_literal_component_at(self, index, value):
        self.literal_component.insert(index, value)
    def replace_literal_component_at(self, index, value):
        self.literal_component[index] = value
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def add_arithmetic(self, value):
        self.arithmetic.append(value)
    def insert_arithmetic_at(self, index, value):
        self.arithmetic.insert(index, value)
    def replace_arithmetic_at(self, index, value):
        self.arithmetic[index] = value
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def add_begin(self, value):
        self.begin.append(value)
    def insert_begin_at(self, index, value):
        self.begin.insert(index, value)
    def replace_begin_at(self, index, value):
        self.begin[index] = value
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def add_concat(self, value):
        self.concat.append(value)
    def insert_concat_at(self, index, value):
        self.concat.insert(index, value)
    def replace_concat_at(self, index, value):
        self.concat[index] = value
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def add_end(self, value):
        self.end.append(value)
    def insert_end_at(self, index, value):
        self.end.insert(index, value)
    def replace_end_at(self, index, value):
        self.end[index] = value
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def add_escape_regex(self, value):
        self.escape_regex.append(value)
    def insert_escape_regex_at(self, index, value):
        self.escape_regex.insert(index, value)
    def replace_escape_regex_at(self, index, value):
        self.escape_regex[index] = value
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def add_split(self, value):
        self.split.append(value)
    def insert_split_at(self, index, value):
        self.split.insert(index, value)
    def replace_split_at(self, index, value):
        self.split[index] = value
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def add_substring(self, value):
        self.substring.append(value)
    def insert_substring_at(self, index, value):
        self.substring.insert(index, value)
    def replace_substring_at(self, index, value):
        self.substring[index] = value
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def add_time_difference(self, value):
        self.time_difference.append(value)
    def insert_time_difference_at(self, index, value):
        self.time_difference.insert(index, value)
    def replace_time_difference_at(self, index, value):
        self.time_difference[index] = value
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def add_regex_capture(self, value):
        self.regex_capture.append(value)
    def insert_regex_capture_at(self, index, value):
        self.regex_capture.insert(index, value)
    def replace_regex_capture_at(self, index, value):
        self.regex_capture[index] = value
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def add_unique(self, value):
        self.unique.append(value)
    def insert_unique_at(self, index, value):
        self.unique.insert(index, value)
    def replace_unique_at(self, index, value):
        self.unique[index] = value
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def add_count(self, value):
        self.count.append(value)
    def insert_count_at(self, index, value):
        self.count.insert(index, value)
    def replace_count_at(self, index, value):
        self.count[index] = value
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def add_glob_to_regex(self, value):
        self.glob_to_regex.append(value)
    def insert_glob_to_regex_at(self, index, value):
        self.glob_to_regex.insert(index, value)
    def replace_glob_to_regex_at(self, index, value):
        self.glob_to_regex[index] = value
    def has__content(self):
        if (
            self.object_component or
            self.variable_component or
            self.literal_component or
            self.arithmetic or
            self.begin or
            self.concat or
            self.end or
            self.escape_regex or
            self.split or
            self.substring or
            self.time_difference or
            self.regex_capture or
            self.unique or
            self.count or
            self.glob_to_regex
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='CountFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CountFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CountFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CountFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CountFunctionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='CountFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for object_component_ in self.object_component:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            object_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        for variable_component_ in self.variable_component:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            variable_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        for literal_component_ in self.literal_component:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            literal_component_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        for arithmetic_ in self.arithmetic:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            arithmetic_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        for begin_ in self.begin:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            begin_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        for concat_ in self.concat:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            concat_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        for end_ in self.end:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            end_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        for escape_regex_ in self.escape_regex:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            escape_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        for split_ in self.split:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            split_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        for substring_ in self.substring:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            substring_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        for time_difference_ in self.time_difference:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            time_difference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        for regex_capture_ in self.regex_capture:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            regex_capture_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        for unique_ in self.unique:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            unique_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        for count_ in self.count:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            count_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        for glob_to_regex_ in self.glob_to_regex:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            glob_to_regex_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component.append(obj_)
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component.append(obj_)
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component.append(obj_)
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic.append(obj_)
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin.append(obj_)
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat.append(obj_)
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end.append(obj_)
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex.append(obj_)
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split.append(obj_)
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring.append(obj_)
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference.append(obj_)
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture.append(obj_)
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique.append(obj_)
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count.append(obj_)
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex.append(obj_)
            obj_.original_tagname_ = 'glob_to_regex'
# end class CountFunctionType


class GlobToRegexFunctionType(GeneratedsSuper):
    """GlobToRegexFunctionType --  The glob_to_regex function takes a single string component representing shell glob pattern and produces a single value that corresponds to result of a conversion of the original glob pattern into Perl 5's regular expression pattern. The glob_noescape attribute defines the way how the backslash ('\') character should be interpreted. It defaults to 'false' meaning backslash should be interpreted as an escape character (backslash is allowed to be used as an escape character). If the glob_noescape attribute would be set to 'true' it instructs the glob_to_regex function to interpret the backslash ('\') character as a literal, rather than as an escape character (backslash is *not* allowed to be used as an escape character). Refer to table with examples below to see the difference how a different boolean value of the 'glob_noescape' attribute will impact the output form of the resulting Perl 5's regular expression produced by glob_to_regex function.
    Please note the glob_to_regex function will fail to perform the conversion and return an error when the provided string argument (to represent glob pattern) does not represent a syntactically correct glob pattern. For example given the 'a*b?[' as the argument to be converted, glob_to_regex would return an error since there's missing the corresponding closing bracket in the provided glob pattern argument.
    Also, it is necessary to mention that the glob_to_regex function respects the default behaviour for the input glob pattern and output Perl 5's regular expression spaces. Namely this means that:
    - glob_to_regex will respect the UNIX glob behavior when processing forward slashes, forward slash should be treated as a path separator and * or ? shall not match it,
    - glob_to_regex will rule out matches having special meaning (for example '.' as a representation of the current working directory or '..' as a representation of the parent directory of the current working directory,
    - glob_to_regex will rule out files or folders starting with '.' character (e.g. dotfiles) unless the respective glob pattern part itself starts with the '.' character,
    - glob_to_regex will not perform case-sensitivity transformation (alphabetical characters will be copied from input glob pattern space to output Perl 5's regular expression pattern space intact). It is kept as a responsibility of the OVAL content author to provide input glob pattern argument in such case so the resulting Perl 5's regular expression pattern will match the expected pathname entries according to the case of preference,
    - glob_to_regex will not perform any possible brace expansion. Therefore glob patterns like '{pat,pat,pat}' would be converted into Perl 5's regular expression syntax in the original un-expanded form (kept for any potential subsequent expansion to be performed by Perl 5's regular expression engine in the moment of the use of that resulting regular expression),
    - glob_to_regex will not perform tilde ('~') character substitution to user name home directory pathname. The ('~') character will be passed to Perl 5's regular expression engine intact. If user name home directory pathname glob pattern behaviour is expected, the pathname of the user name home directory needs to be specified in the original input glob pattern already,
    - glob_to_regex function will not perform any custom changes wrt to the ordering of items (perform any additional sorting of set of pathnames represented by the provided glob pattern argument).
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, glob_noescape=False, object_component=None, variable_component=None, literal_component=None, arithmetic=None, begin=None, concat=None, end=None, escape_regex=None, split=None, substring=None, time_difference=None, regex_capture=None, unique=None, count=None, glob_to_regex=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.glob_noescape = _cast(bool, glob_noescape)
        self.glob_noescape_nsprefix_ = None
        self.object_component = object_component
        self.object_component_nsprefix_ = "oval-def"
        self.variable_component = variable_component
        self.variable_component_nsprefix_ = "oval-def"
        self.literal_component = literal_component
        self.literal_component_nsprefix_ = "oval-def"
        self.arithmetic = arithmetic
        self.arithmetic_nsprefix_ = "oval-def"
        self.begin = begin
        self.begin_nsprefix_ = "oval-def"
        self.concat = concat
        self.concat_nsprefix_ = "oval-def"
        self.end = end
        self.end_nsprefix_ = "oval-def"
        self.escape_regex = escape_regex
        self.escape_regex_nsprefix_ = "oval-def"
        self.split = split
        self.split_nsprefix_ = "oval-def"
        self.substring = substring
        self.substring_nsprefix_ = "oval-def"
        self.time_difference = time_difference
        self.time_difference_nsprefix_ = "oval-def"
        self.regex_capture = regex_capture
        self.regex_capture_nsprefix_ = "oval-def"
        self.unique = unique
        self.unique_nsprefix_ = "oval-def"
        self.count = count
        self.count_nsprefix_ = "oval-def"
        self.glob_to_regex = glob_to_regex
        self.glob_to_regex_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GlobToRegexFunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GlobToRegexFunctionType.subclass:
            return GlobToRegexFunctionType.subclass(*args_, **kwargs_)
        else:
            return GlobToRegexFunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_object_component(self):
        return self.object_component
    def set_object_component(self, object_component):
        self.object_component = object_component
    def get_variable_component(self):
        return self.variable_component
    def set_variable_component(self, variable_component):
        self.variable_component = variable_component
    def get_literal_component(self):
        return self.literal_component
    def set_literal_component(self, literal_component):
        self.literal_component = literal_component
    def get_arithmetic(self):
        return self.arithmetic
    def set_arithmetic(self, arithmetic):
        self.arithmetic = arithmetic
    def get_begin(self):
        return self.begin
    def set_begin(self, begin):
        self.begin = begin
    def get_concat(self):
        return self.concat
    def set_concat(self, concat):
        self.concat = concat
    def get_end(self):
        return self.end
    def set_end(self, end):
        self.end = end
    def get_escape_regex(self):
        return self.escape_regex
    def set_escape_regex(self, escape_regex):
        self.escape_regex = escape_regex
    def get_split(self):
        return self.split
    def set_split(self, split):
        self.split = split
    def get_substring(self):
        return self.substring
    def set_substring(self, substring):
        self.substring = substring
    def get_time_difference(self):
        return self.time_difference
    def set_time_difference(self, time_difference):
        self.time_difference = time_difference
    def get_regex_capture(self):
        return self.regex_capture
    def set_regex_capture(self, regex_capture):
        self.regex_capture = regex_capture
    def get_unique(self):
        return self.unique
    def set_unique(self, unique):
        self.unique = unique
    def get_count(self):
        return self.count
    def set_count(self, count):
        self.count = count
    def get_glob_to_regex(self):
        return self.glob_to_regex
    def set_glob_to_regex(self, glob_to_regex):
        self.glob_to_regex = glob_to_regex
    def get_glob_noescape(self):
        return self.glob_noescape
    def set_glob_noescape(self, glob_noescape):
        self.glob_noescape = glob_noescape
    def has__content(self):
        if (
            self.object_component is not None or
            self.variable_component is not None or
            self.literal_component is not None or
            self.arithmetic is not None or
            self.begin is not None or
            self.concat is not None or
            self.end is not None or
            self.escape_regex is not None or
            self.split is not None or
            self.substring is not None or
            self.time_difference is not None or
            self.regex_capture is not None or
            self.unique is not None or
            self.count is not None or
            self.glob_to_regex is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='GlobToRegexFunctionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GlobToRegexFunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GlobToRegexFunctionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GlobToRegexFunctionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GlobToRegexFunctionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GlobToRegexFunctionType'):
        if self.glob_noescape and 'glob_noescape' not in already_processed:
            already_processed.add('glob_noescape')
            outfile.write(' glob_noescape="%s"' % self.gds_format_boolean(self.glob_noescape, input_name='glob_noescape'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='GlobToRegexFunctionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.object_component is not None:
            namespaceprefix_ = self.object_component_nsprefix_ + ':' if (UseCapturedNS_ and self.object_component_nsprefix_) else ''
            self.object_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object_component', pretty_print=pretty_print)
        if self.variable_component is not None:
            namespaceprefix_ = self.variable_component_nsprefix_ + ':' if (UseCapturedNS_ and self.variable_component_nsprefix_) else ''
            self.variable_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='variable_component', pretty_print=pretty_print)
        if self.literal_component is not None:
            namespaceprefix_ = self.literal_component_nsprefix_ + ':' if (UseCapturedNS_ and self.literal_component_nsprefix_) else ''
            self.literal_component.export(outfile, level, namespaceprefix_, namespacedef_='', name_='literal_component', pretty_print=pretty_print)
        if self.arithmetic is not None:
            namespaceprefix_ = self.arithmetic_nsprefix_ + ':' if (UseCapturedNS_ and self.arithmetic_nsprefix_) else ''
            self.arithmetic.export(outfile, level, namespaceprefix_, namespacedef_='', name_='arithmetic', pretty_print=pretty_print)
        if self.begin is not None:
            namespaceprefix_ = self.begin_nsprefix_ + ':' if (UseCapturedNS_ and self.begin_nsprefix_) else ''
            self.begin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='begin', pretty_print=pretty_print)
        if self.concat is not None:
            namespaceprefix_ = self.concat_nsprefix_ + ':' if (UseCapturedNS_ and self.concat_nsprefix_) else ''
            self.concat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='concat', pretty_print=pretty_print)
        if self.end is not None:
            namespaceprefix_ = self.end_nsprefix_ + ':' if (UseCapturedNS_ and self.end_nsprefix_) else ''
            self.end.export(outfile, level, namespaceprefix_, namespacedef_='', name_='end', pretty_print=pretty_print)
        if self.escape_regex is not None:
            namespaceprefix_ = self.escape_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.escape_regex_nsprefix_) else ''
            self.escape_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='escape_regex', pretty_print=pretty_print)
        if self.split is not None:
            namespaceprefix_ = self.split_nsprefix_ + ':' if (UseCapturedNS_ and self.split_nsprefix_) else ''
            self.split.export(outfile, level, namespaceprefix_, namespacedef_='', name_='split', pretty_print=pretty_print)
        if self.substring is not None:
            namespaceprefix_ = self.substring_nsprefix_ + ':' if (UseCapturedNS_ and self.substring_nsprefix_) else ''
            self.substring.export(outfile, level, namespaceprefix_, namespacedef_='', name_='substring', pretty_print=pretty_print)
        if self.time_difference is not None:
            namespaceprefix_ = self.time_difference_nsprefix_ + ':' if (UseCapturedNS_ and self.time_difference_nsprefix_) else ''
            self.time_difference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='time_difference', pretty_print=pretty_print)
        if self.regex_capture is not None:
            namespaceprefix_ = self.regex_capture_nsprefix_ + ':' if (UseCapturedNS_ and self.regex_capture_nsprefix_) else ''
            self.regex_capture.export(outfile, level, namespaceprefix_, namespacedef_='', name_='regex_capture', pretty_print=pretty_print)
        if self.unique is not None:
            namespaceprefix_ = self.unique_nsprefix_ + ':' if (UseCapturedNS_ and self.unique_nsprefix_) else ''
            self.unique.export(outfile, level, namespaceprefix_, namespacedef_='', name_='unique', pretty_print=pretty_print)
        if self.count is not None:
            namespaceprefix_ = self.count_nsprefix_ + ':' if (UseCapturedNS_ and self.count_nsprefix_) else ''
            self.count.export(outfile, level, namespaceprefix_, namespacedef_='', name_='count', pretty_print=pretty_print)
        if self.glob_to_regex is not None:
            namespaceprefix_ = self.glob_to_regex_nsprefix_ + ':' if (UseCapturedNS_ and self.glob_to_regex_nsprefix_) else ''
            self.glob_to_regex.export(outfile, level, namespaceprefix_, namespacedef_='', name_='glob_to_regex', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('glob_noescape', node)
        if value is not None and 'glob_noescape' not in already_processed:
            already_processed.add('glob_noescape')
            if value in ('true', '1'):
                self.glob_noescape = True
            elif value in ('false', '0'):
                self.glob_noescape = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'object_component':
            obj_ = ObjectComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object_component = obj_
            obj_.original_tagname_ = 'object_component'
        elif nodeName_ == 'variable_component':
            obj_ = VariableComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.variable_component = obj_
            obj_.original_tagname_ = 'variable_component'
        elif nodeName_ == 'literal_component':
            obj_ = LiteralComponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.literal_component = obj_
            obj_.original_tagname_ = 'literal_component'
        elif nodeName_ == 'arithmetic':
            obj_ = ArithmeticFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.arithmetic = obj_
            obj_.original_tagname_ = 'arithmetic'
        elif nodeName_ == 'begin':
            obj_ = BeginFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.begin = obj_
            obj_.original_tagname_ = 'begin'
        elif nodeName_ == 'concat':
            obj_ = ConcatFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.concat = obj_
            obj_.original_tagname_ = 'concat'
        elif nodeName_ == 'end':
            obj_ = EndFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.end = obj_
            obj_.original_tagname_ = 'end'
        elif nodeName_ == 'escape_regex':
            obj_ = EscapeRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.escape_regex = obj_
            obj_.original_tagname_ = 'escape_regex'
        elif nodeName_ == 'split':
            obj_ = SplitFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.split = obj_
            obj_.original_tagname_ = 'split'
        elif nodeName_ == 'substring':
            obj_ = SubstringFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.substring = obj_
            obj_.original_tagname_ = 'substring'
        elif nodeName_ == 'time_difference':
            obj_ = TimeDifferenceFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.time_difference = obj_
            obj_.original_tagname_ = 'time_difference'
        elif nodeName_ == 'regex_capture':
            obj_ = RegexCaptureFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.regex_capture = obj_
            obj_.original_tagname_ = 'regex_capture'
        elif nodeName_ == 'unique':
            obj_ = UniqueFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.unique = obj_
            obj_.original_tagname_ = 'unique'
        elif nodeName_ == 'count':
            obj_ = CountFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.count = obj_
            obj_.original_tagname_ = 'count'
        elif nodeName_ == 'glob_to_regex':
            obj_ = GlobToRegexFunctionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.glob_to_regex = obj_
            obj_.original_tagname_ = 'glob_to_regex'
# end class GlobToRegexFunctionType


class EntitySimpleBaseType(GeneratedsSuper):
    """The EntitySimpleBaseType complex type is an abstract type that defines the default attributes associated with every simple entity. Entities can be found in both OVAL Objects and OVAL States and represent the individual properties associated with items found on a system. An example of a single entity would be the path of a file. Another example would be the version of the file.
    EntitySimpleBaseType -- The EntitySimpleBaseType complex type is an abstract type that defines the default attributes associated with every simple entity. Entities can be found in both OVAL Objects and OVAL States and represent the individual properties associated with items found on a system. An example of a single entity would be the path of a file. Another example would be the version of the file.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.operation = _cast(None, operation)
        self.operation_nsprefix_ = None
        self.mask = _cast(bool, mask)
        self.mask_nsprefix_ = None
        self.var_ref = _cast(None, var_ref)
        self.var_ref_nsprefix_ = None
        self.var_check = _cast(None, var_check)
        self.var_check_nsprefix_ = None
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntitySimpleBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntitySimpleBaseType.subclass:
            return EntitySimpleBaseType.subclass(*args_, **kwargs_)
        else:
            return EntitySimpleBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_operation(self):
        return self.operation
    def set_operation(self, operation):
        self.operation = operation
    def get_mask(self):
        return self.mask
    def set_mask(self, mask):
        self.mask = mask
    def get_var_ref(self):
        return self.var_ref
    def set_var_ref(self, var_ref):
        self.var_ref = var_ref
    def get_var_check(self):
        return self.var_check
    def set_var_check(self, var_check):
        self.var_check = var_check
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_DatatypeEnumeration(self, value):
        # Validate type oval:DatatypeEnumeration, a restriction on None.
        pass
    def validate_OperationEnumeration(self, value):
        # Validate type oval:OperationEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['equals', 'not equal', 'case insensitive equals', 'case insensitive not equal', 'greater than', 'less than', 'greater than or equal', 'less than or equal', 'bitwise and', 'bitwise or', 'pattern match', 'subset of', 'superset of']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperationEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_VariableIDPattern(self, value):
        # Validate type oval:VariableIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_VariableIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_VariableIDPattern_patterns_, ))
    validate_VariableIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:var:[1-9][0-9]*)$']]
    def validate_CheckEnumeration(self, value):
        # Validate type oval:CheckEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all', 'at least one', 'none exist', 'none satisfy', 'only one']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CheckEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntitySimpleBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntitySimpleBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntitySimpleBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntitySimpleBaseType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntitySimpleBaseType'):
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (quote_attrib(self.datatype), ))
        if self.operation != "equals" and 'operation' not in already_processed:
            already_processed.add('operation')
            outfile.write(' operation=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operation), input_name='operation')), ))
        if self.mask and 'mask' not in already_processed:
            already_processed.add('mask')
            outfile.write(' mask="%s"' % self.gds_format_boolean(self.mask, input_name='mask'))
        if self.var_ref is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            outfile.write(' var_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.var_ref), input_name='var_ref')), ))
        if self.var_check is not None and 'var_check' not in already_processed:
            already_processed.add('var_check')
            outfile.write(' var_check=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.var_check), input_name='var_check')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntitySimpleBaseType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_DatatypeEnumeration(self.datatype)    # validate type DatatypeEnumeration
        value = find_attr_value_('operation', node)
        if value is not None and 'operation' not in already_processed:
            already_processed.add('operation')
            self.operation = value
            self.validate_OperationEnumeration(self.operation)    # validate type OperationEnumeration
        value = find_attr_value_('mask', node)
        if value is not None and 'mask' not in already_processed:
            already_processed.add('mask')
            if value in ('true', '1'):
                self.mask = True
            elif value in ('false', '0'):
                self.mask = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('var_ref', node)
        if value is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            self.var_ref = value
            self.validate_VariableIDPattern(self.var_ref)    # validate type VariableIDPattern
        value = find_attr_value_('var_check', node)
        if value is not None and 'var_check' not in already_processed:
            already_processed.add('var_check')
            self.var_check = value
            self.validate_CheckEnumeration(self.var_check)    # validate type CheckEnumeration
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntitySimpleBaseType


class EntityComplexBaseType(GeneratedsSuper):
    """EntityComplexBaseType -- The EntityComplexBaseType complex type is an abstract type that defines the default attributes associated with every complex entity. Entities can be found in both OVAL Objects and OVAL States and represent the individual properties associated with items found on a system. An example of a single entity would be the path of a file. Another example would be the version of the file.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.operation = _cast(None, operation)
        self.operation_nsprefix_ = None
        self.mask = _cast(bool, mask)
        self.mask_nsprefix_ = None
        self.var_ref = _cast(None, var_ref)
        self.var_ref_nsprefix_ = None
        self.var_check = _cast(None, var_check)
        self.var_check_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityComplexBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityComplexBaseType.subclass:
            return EntityComplexBaseType.subclass(*args_, **kwargs_)
        else:
            return EntityComplexBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_operation(self):
        return self.operation
    def set_operation(self, operation):
        self.operation = operation
    def get_mask(self):
        return self.mask
    def set_mask(self, mask):
        self.mask = mask
    def get_var_ref(self):
        return self.var_ref
    def set_var_ref(self, var_ref):
        self.var_ref = var_ref
    def get_var_check(self):
        return self.var_check
    def set_var_check(self, var_check):
        self.var_check = var_check
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_DatatypeEnumeration(self, value):
        # Validate type oval:DatatypeEnumeration, a restriction on None.
        pass
    def validate_OperationEnumeration(self, value):
        # Validate type oval:OperationEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['equals', 'not equal', 'case insensitive equals', 'case insensitive not equal', 'greater than', 'less than', 'greater than or equal', 'less than or equal', 'bitwise and', 'bitwise or', 'pattern match', 'subset of', 'superset of']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperationEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_VariableIDPattern(self, value):
        # Validate type oval:VariableIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_VariableIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_VariableIDPattern_patterns_, ))
    validate_VariableIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:var:[1-9][0-9]*)$']]
    def validate_CheckEnumeration(self, value):
        # Validate type oval:CheckEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all', 'at least one', 'none exist', 'none satisfy', 'only one']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CheckEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityComplexBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityComplexBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityComplexBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityComplexBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EntityComplexBaseType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityComplexBaseType'):
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (quote_attrib(self.datatype), ))
        if self.operation != "equals" and 'operation' not in already_processed:
            already_processed.add('operation')
            outfile.write(' operation=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operation), input_name='operation')), ))
        if self.mask and 'mask' not in already_processed:
            already_processed.add('mask')
            outfile.write(' mask="%s"' % self.gds_format_boolean(self.mask, input_name='mask'))
        if self.var_ref is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            outfile.write(' var_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.var_ref), input_name='var_ref')), ))
        if self.var_check is not None and 'var_check' not in already_processed:
            already_processed.add('var_check')
            outfile.write(' var_check=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.var_check), input_name='var_check')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityComplexBaseType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_DatatypeEnumeration(self.datatype)    # validate type DatatypeEnumeration
        value = find_attr_value_('operation', node)
        if value is not None and 'operation' not in already_processed:
            already_processed.add('operation')
            self.operation = value
            self.validate_OperationEnumeration(self.operation)    # validate type OperationEnumeration
        value = find_attr_value_('mask', node)
        if value is not None and 'mask' not in already_processed:
            already_processed.add('mask')
            if value in ('true', '1'):
                self.mask = True
            elif value in ('false', '0'):
                self.mask = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('var_ref', node)
        if value is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            self.var_ref = value
            self.validate_VariableIDPattern(self.var_ref)    # validate type VariableIDPattern
        value = find_attr_value_('var_check', node)
        if value is not None and 'var_check' not in already_processed:
            already_processed.add('var_check')
            self.var_check = value
            self.validate_CheckEnumeration(self.var_check)    # validate type CheckEnumeration
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityComplexBaseType


class EntityObjectIPAddressType(EntitySimpleBaseType):
    """EntityObjectIPAddressType -- The EntityObjectIPAddressType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes any IPv4/IPv6 address or address prefix.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectIPAddressType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectIPAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectIPAddressType.subclass:
            return EntityObjectIPAddressType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectIPAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityObjectIPAddressType(self, value):
        result = True
        # Validate type EntityObjectIPAddressType, a restriction on xsd:string.
        pass
        return result
    def validate_datatypeType(self, value):
        # Validate type datatypeType, a restriction on oval:SimpleDatatypeEnumeration.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ipv4_address', 'ipv6_address']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityObjectIPAddressType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectIPAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectIPAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectIPAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectIPAddressType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectIPAddressType'):
        super(EntityObjectIPAddressType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectIPAddressType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (quote_attrib(self.datatype), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectIPAddressType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectIPAddressType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_datatypeType(self.datatype)    # validate type datatypeType
        super(EntityObjectIPAddressType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectIPAddressType


class EntityObjectIPAddressStringType(EntitySimpleBaseType):
    """EntityObjectIPAddressStringType -- The EntityObjectIPAddressStringType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes any IPv4/IPv6 address, address prefix, or its string representation.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectIPAddressStringType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectIPAddressStringType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectIPAddressStringType.subclass:
            return EntityObjectIPAddressStringType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectIPAddressStringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityObjectIPAddressStringType(self, value):
        result = True
        # Validate type EntityObjectIPAddressStringType, a restriction on xsd:string.
        pass
        return result
    def validate_datatypeType3(self, value):
        # Validate type datatypeType3, a restriction on oval:SimpleDatatypeEnumeration.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ipv4_address', 'ipv6_address', 'string']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType3' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType3' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityObjectIPAddressStringType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectIPAddressStringType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectIPAddressStringType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectIPAddressStringType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectIPAddressStringType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectIPAddressStringType'):
        super(EntityObjectIPAddressStringType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectIPAddressStringType')
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (quote_attrib(self.datatype), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectIPAddressStringType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectIPAddressStringType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_datatypeType3(self.datatype)    # validate type datatypeType3
        super(EntityObjectIPAddressStringType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectIPAddressStringType


class EntityObjectAnySimpleType(EntitySimpleBaseType):
    """EntityObjectAnySimpleType -- The EntityObjectAnySimpleType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes any simple data.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectAnySimpleType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectAnySimpleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectAnySimpleType.subclass:
            return EntityObjectAnySimpleType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectAnySimpleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityObjectAnySimpleType(self, value):
        result = True
        # Validate type EntityObjectAnySimpleType, a restriction on xsd:string.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityObjectAnySimpleType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectAnySimpleType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectAnySimpleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectAnySimpleType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectAnySimpleType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectAnySimpleType'):
        super(EntityObjectAnySimpleType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectAnySimpleType')
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectAnySimpleType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectAnySimpleType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityObjectAnySimpleType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectAnySimpleType


class EntityObjectBinaryType(EntitySimpleBaseType):
    """EntityObjectBinaryType -- The EntityBinaryType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple binary data. The empty string is also allowed when using a variable reference with an element.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectBinaryType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectBinaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectBinaryType.subclass:
            return EntityObjectBinaryType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectBinaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityObjectBinaryType(self, value):
        result = True
        # Validate type EntityObjectBinaryType, a restriction on None.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityObjectBinaryType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectBinaryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectBinaryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectBinaryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectBinaryType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectBinaryType'):
        super(EntityObjectBinaryType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectBinaryType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectBinaryType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectBinaryType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityObjectBinaryType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectBinaryType


class EntityObjectBoolType(EntitySimpleBaseType):
    """EntityObjectBoolType -- The EntityBoolType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple boolean data. The empty string is also allowed when using a variable reference with an element.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectBoolType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectBoolType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectBoolType.subclass:
            return EntityObjectBoolType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectBoolType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityObjectBoolType(self, value):
        result = True
        # Validate type EntityObjectBoolType, a restriction on None.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityObjectBoolType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectBoolType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectBoolType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectBoolType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectBoolType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectBoolType'):
        super(EntityObjectBoolType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectBoolType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectBoolType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectBoolType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityObjectBoolType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectBoolType


class EntityObjectFloatType(EntitySimpleBaseType):
    """EntityObjectFloatType -- The EntityObjectFloatType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple float data. The empty string is also allowed when using a variable reference with an element.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectFloatType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectFloatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectFloatType.subclass:
            return EntityObjectFloatType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectFloatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityObjectFloatType(self, value):
        result = True
        # Validate type EntityObjectFloatType, a restriction on None.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityObjectFloatType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectFloatType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectFloatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectFloatType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectFloatType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectFloatType'):
        super(EntityObjectFloatType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectFloatType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectFloatType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectFloatType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityObjectFloatType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectFloatType


class EntityObjectIntType(EntitySimpleBaseType):
    """EntityObjectIntType -- The EntityIntType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple integer data. The empty string is also allowed when using a variable reference with an element.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectIntType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectIntType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectIntType.subclass:
            return EntityObjectIntType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectIntType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityObjectIntType(self, value):
        result = True
        # Validate type EntityObjectIntType, a restriction on None.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityObjectIntType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectIntType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectIntType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectIntType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectIntType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectIntType'):
        super(EntityObjectIntType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectIntType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectIntType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectIntType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityObjectIntType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectIntType


class EntityObjectStringType(EntitySimpleBaseType):
    """EntityObjectStringType -- The EntityStringType type is extended by the entities of an individual OVAL Object. This type provides uniformity to each object entity by including the attributes found in the EntitySimpleBaseType. This specific type describes simple string data.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectStringType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectStringType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectStringType.subclass:
            return EntityObjectStringType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectStringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityObjectStringType(self, value):
        result = True
        # Validate type EntityObjectStringType, a restriction on xsd:string.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityObjectStringType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectStringType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectStringType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectStringType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectStringType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectStringType'):
        super(EntityObjectStringType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectStringType')
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectStringType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectStringType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityObjectStringType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectStringType


class EntityObjectVersionType(EntitySimpleBaseType):
    """EntityObjectVersionType -- The EntityObjectVersionType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes simple version data.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectVersionType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectVersionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectVersionType.subclass:
            return EntityObjectVersionType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectVersionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityObjectVersionType(self, value):
        result = True
        # Validate type EntityObjectVersionType, a restriction on xsd:string.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityObjectVersionType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectVersionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectVersionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectVersionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectVersionType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectVersionType'):
        super(EntityObjectVersionType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectVersionType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectVersionType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectVersionType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityObjectVersionType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectVersionType


class EntityObjectRecordType(EntityComplexBaseType):
    """EntityObjectRecordType -- The EntityObjectRecordType defines an entity that consists of a number of uniquely named fields. This structure is used for representing a record from a database query and other similar structures where multiple related fields must be represented at once. Note that for all entities of this type, the only allowed datatype is 'record' and the only allowed operation is 'equals'. During analysis of a system characteristics item, each field is analyzed and then the overall result for elements of this type is computed by logically anding the results for each field and then applying the entity_check attribute.
    Note the datatype attribute must be set to 'record'.
    Note the operation attribute must be set to 'equals'.
    Note the var_ref attribute is not permitted and the var_check attribute does not apply.
    Note that when the mask attribute is set to 'true', all child field elements must be masked regardless of the child field's mask attribute value.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityComplexBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityObjectRecordType"), self).__init__(datatype, operation, mask, var_ref, var_check,  **kwargs_)
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectRecordType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectRecordType.subclass:
            return EntityObjectRecordType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectRecordType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def has__content(self):
        if (
            self.field or
            super(EntityObjectRecordType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectRecordType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectRecordType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectRecordType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectRecordType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EntityObjectRecordType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectRecordType'):
        super(EntityObjectRecordType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectRecordType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectRecordType', fromsubclass_=False, pretty_print=True):
        super(EntityObjectRecordType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(EntityObjectRecordType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = EntityObjectFieldType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
        super(EntityObjectRecordType, self)._buildChildren(child_, node, nodeName_, True)
# end class EntityObjectRecordType


class EntityObjectFieldType(GeneratedsSuper):
    """EntityObjectFieldType -- The EntityObjectFieldType defines an element with simple content that represents a named field in a record that may contain any number of named fields. The EntityObjectFieldType is much like all other entities with one significant difference, the EntityObjectFieldType has a name attribute
    The required name attribute specifies a unique name for the field. Field names are lowercase and must be unique within a given parent record element. When analyzing system characteristics an error should be reported for the result of a field that is present in the OVAL State, but not found in the system characteristics Item.
    The optional entity_check attribute specifies how to handle multiple record fields with the same name in the OVAL Systems Characteristics file. For example, while collecting group information where one field is the represents the users that are members of the group.  It is very likely that there will be multiple fields with a name of 'user' associated with the group.  If the OVAL State defines the value of the field with name equal 'user' to equal 'Fred', then the entity_check attribute determines if all values for field entities must be equal to 'Fred', or at least one value must be equal to 'Fred', etc.
    Note that when the mask attribute is set to 'true' on a field's parent element the field must be masked regardless of the field's mask attribute value.
    name -- A string restricted to disallow upper case characters.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, entity_check='all', datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.entity_check = _cast(None, entity_check)
        self.entity_check_nsprefix_ = None
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.operation = _cast(None, operation)
        self.operation_nsprefix_ = None
        self.mask = _cast(bool, mask)
        self.mask_nsprefix_ = None
        self.var_ref = _cast(None, var_ref)
        self.var_ref_nsprefix_ = None
        self.var_check = _cast(None, var_check)
        self.var_check_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityObjectFieldType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityObjectFieldType.subclass:
            return EntityObjectFieldType.subclass(*args_, **kwargs_)
        else:
            return EntityObjectFieldType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_entity_check(self):
        return self.entity_check
    def set_entity_check(self, entity_check):
        self.entity_check = entity_check
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_operation(self):
        return self.operation
    def set_operation(self, operation):
        self.operation = operation
    def get_mask(self):
        return self.mask
    def set_mask(self, mask):
        self.mask = mask
    def get_var_ref(self):
        return self.var_ref
    def set_var_ref(self, var_ref):
        self.var_ref = var_ref
    def get_var_check(self):
        return self.var_check
    def set_var_check(self, var_check):
        self.var_check = var_check
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_nameType(self, value):
        # Validate type nameType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_nameType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_nameType_patterns_, ))
    validate_nameType_patterns_ = [['^([^A-Z]+)$']]
    def validate_CheckEnumeration(self, value):
        # Validate type oval:CheckEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all', 'at least one', 'none exist', 'none satisfy', 'only one']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CheckEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_DatatypeEnumeration(self, value):
        # Validate type oval:DatatypeEnumeration, a restriction on None.
        pass
    def validate_OperationEnumeration(self, value):
        # Validate type oval:OperationEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['equals', 'not equal', 'case insensitive equals', 'case insensitive not equal', 'greater than', 'less than', 'greater than or equal', 'less than or equal', 'bitwise and', 'bitwise or', 'pattern match', 'subset of', 'superset of']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperationEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_VariableIDPattern(self, value):
        # Validate type oval:VariableIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_VariableIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_VariableIDPattern_patterns_, ))
    validate_VariableIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:var:[1-9][0-9]*)$']]
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectFieldType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityObjectFieldType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityObjectFieldType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityObjectFieldType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityObjectFieldType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.entity_check != "all" and 'entity_check' not in already_processed:
            already_processed.add('entity_check')
            outfile.write(' entity_check=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity_check), input_name='entity_check')), ))
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (quote_attrib(self.datatype), ))
        if self.operation != "equals" and 'operation' not in already_processed:
            already_processed.add('operation')
            outfile.write(' operation=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operation), input_name='operation')), ))
        if self.mask and 'mask' not in already_processed:
            already_processed.add('mask')
            outfile.write(' mask="%s"' % self.gds_format_boolean(self.mask, input_name='mask'))
        if self.var_ref is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            outfile.write(' var_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.var_ref), input_name='var_ref')), ))
        if self.var_check is not None and 'var_check' not in already_processed:
            already_processed.add('var_check')
            outfile.write(' var_check=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.var_check), input_name='var_check')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityObjectFieldType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_nameType(self.name)    # validate type nameType
        value = find_attr_value_('entity_check', node)
        if value is not None and 'entity_check' not in already_processed:
            already_processed.add('entity_check')
            self.entity_check = value
            self.validate_CheckEnumeration(self.entity_check)    # validate type CheckEnumeration
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_DatatypeEnumeration(self.datatype)    # validate type DatatypeEnumeration
        value = find_attr_value_('operation', node)
        if value is not None and 'operation' not in already_processed:
            already_processed.add('operation')
            self.operation = value
            self.validate_OperationEnumeration(self.operation)    # validate type OperationEnumeration
        value = find_attr_value_('mask', node)
        if value is not None and 'mask' not in already_processed:
            already_processed.add('mask')
            if value in ('true', '1'):
                self.mask = True
            elif value in ('false', '0'):
                self.mask = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('var_ref', node)
        if value is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            self.var_ref = value
            self.validate_VariableIDPattern(self.var_ref)    # validate type VariableIDPattern
        value = find_attr_value_('var_check', node)
        if value is not None and 'var_check' not in already_processed:
            already_processed.add('var_check')
            self.var_check = value
            self.validate_CheckEnumeration(self.var_check)    # validate type CheckEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityObjectFieldType


class EntityStateSimpleBaseType(EntitySimpleBaseType):
    """EntityStateSimpleBaseType -- The EntityStateSimpleBaseType complex type is an abstract type that extends the EntitySimpleBaseType and is used by some entities within an OVAL State.
    The optional check_existence attribute specifies how to interpret the status of corresponding item entities when performing an item-state comparison. The default value for this attribute is 'at_least_one_exists' indicating that by default an item comparison may evaluate to true only if at least one corresponding item entity has a status of 'exists'. For example, if a value of 'none_exist' is given, then the comparison can evaluate to true only if there are one or more corresponding item entities, each with a status of 'does not exist'.
    The optional entity_check attribute specifies how to handle multiple item entities with the same name in the OVAL Systems Characteristics file. For example, suppose we are dealing with a Group Test and an entity in the state is related to the user.  It is very likely that when the information about the group is collected off of the system (and represented in the OVAL System Characteristics file) that there will be multiple users associated with the group (i.e. multiple 'user' item entities associated with the same 'user' state entity).  If the OVAL State defines the value of the user entity to equal 'Fred', then the entity_check attribute determines if all values for 'user' item entities must be equal to 'Fred', or at least one value must be equal to 'Fred', etc.  Note that with the exception of the 'none_satisfy' check value, the entity_check attribute can only affect the result of the test if the corresponding OVAL Item allows more than one occurrence of the entity (e.g. 'maxOccurs' is some value greater than one).
    The entity_check and var_check attributes are considered together when evaluating a single state entity. When a variable identifies more than one value and multiple item entities with the same name exist, for a single state entity, a many-to-many comparison must be conducted.  In this situation, there are many values for the state entity that must be compared to many item entities.  Each item entity is compared to the state entity. For each item entity, an interim result is calculated by using the var_check attribute to combine the result of comparing each variable value with a single system value. Then these interim results are combined for each system value using the entity_check attribute.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntitySimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateSimpleBaseType"), self).__init__(datatype, operation, mask, var_ref, var_check, valueOf_, extensiontype_,  **kwargs_)
        self.entity_check = _cast(None, entity_check)
        self.entity_check_nsprefix_ = None
        self.check_existence = _cast(None, check_existence)
        self.check_existence_nsprefix_ = None
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateSimpleBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateSimpleBaseType.subclass:
            return EntityStateSimpleBaseType.subclass(*args_, **kwargs_)
        else:
            return EntityStateSimpleBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_entity_check(self):
        return self.entity_check
    def set_entity_check(self, entity_check):
        self.entity_check = entity_check
    def get_check_existence(self):
        return self.check_existence
    def set_check_existence(self, check_existence):
        self.check_existence = check_existence
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CheckEnumeration(self, value):
        # Validate type oval:CheckEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all', 'at least one', 'none exist', 'none satisfy', 'only one']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CheckEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_ExistenceEnumeration(self, value):
        # Validate type oval:ExistenceEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all_exist', 'any_exist', 'at_least_one_exists', 'none_exist', 'only_one_exists']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ExistenceEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateSimpleBaseType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateSimpleBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateSimpleBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateSimpleBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateSimpleBaseType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateSimpleBaseType'):
        super(EntityStateSimpleBaseType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateSimpleBaseType')
        if self.entity_check != "all" and 'entity_check' not in already_processed:
            already_processed.add('entity_check')
            outfile.write(' entity_check=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity_check), input_name='entity_check')), ))
        if self.check_existence != "at_least_one_exists" and 'check_existence' not in already_processed:
            already_processed.add('check_existence')
            outfile.write(' check_existence=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.check_existence), input_name='check_existence')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateSimpleBaseType', fromsubclass_=False, pretty_print=True):
        super(EntityStateSimpleBaseType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('entity_check', node)
        if value is not None and 'entity_check' not in already_processed:
            already_processed.add('entity_check')
            self.entity_check = value
            self.validate_CheckEnumeration(self.entity_check)    # validate type CheckEnumeration
        value = find_attr_value_('check_existence', node)
        if value is not None and 'check_existence' not in already_processed:
            already_processed.add('check_existence')
            self.check_existence = value
            self.validate_ExistenceEnumeration(self.check_existence)    # validate type ExistenceEnumeration
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(EntityStateSimpleBaseType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateSimpleBaseType


class EntityStateComplexBaseType(EntityComplexBaseType):
    """EntityStateComplexBaseType -- The EntityStateComplexBaseType complex type is an abstract type that extends the EntityComplexBaseType and is used by some entities within an OVAL State.
    The optional check_existence attribute specifies how to interpret the status of corresponding item entities when performing an item-state comparison. The default value for this attribute is 'at_least_one_exists' indicating that by default an item comparison may evaluate to true only if at least one corresponding item entity has a status of 'exists'. For example, if a value of 'none_exist' is given, then the comparison can evaluate to true only if there are one or more corresponding item entities, each with a status of 'does not exist'.
    The optional entity_check attribute specifies how to handle multiple item entities with the same name in the OVAL Systems Characteristics file. For example, suppose we are dealing with a Group Test and an entity in the state is related to the user.  It is very likely that when the information about the group is collected off of the system (and represented in the OVAL System Characteristics file) that there will be multiple users associated with the group (i.e. multiple 'user' item entities associated with the same 'user' state entity).  If the OVAL State defines the value of the user entity to equal 'Fred', then the entity_check attribute determines if all values for 'user' item entities must be equal to 'Fred', or at least one value must be equal to 'Fred', etc.  Note that with the exception of the 'none_satisfy' check value, the entity_check attribute can only affect the result of the test if the corresponding OVAL Item allows more than one occurrence of the entity (e.g. 'maxOccurs' is some value greater than one).
    The entity_check and var_check attributes are considered together when evaluating a single state entity. When a variable identifies more than one value and multiple item entities with the same name exist, for a single state entity, a many-to-many comparison must be conducted.  In this situation, there are many values for the state entity that must be compared to many item entities.  Each item entity is compared to the state entity. For each item entity, an interim result is calculated by using the var_check attribute to combine the result of comparing each variable value with a single system value. Then these interim results are combined for each system value using the entity_check attribute.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityComplexBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateComplexBaseType"), self).__init__(datatype, operation, mask, var_ref, var_check, extensiontype_,  **kwargs_)
        self.entity_check = _cast(None, entity_check)
        self.entity_check_nsprefix_ = None
        self.check_existence = _cast(None, check_existence)
        self.check_existence_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateComplexBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateComplexBaseType.subclass:
            return EntityStateComplexBaseType.subclass(*args_, **kwargs_)
        else:
            return EntityStateComplexBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_entity_check(self):
        return self.entity_check
    def set_entity_check(self, entity_check):
        self.entity_check = entity_check
    def get_check_existence(self):
        return self.check_existence
    def set_check_existence(self, check_existence):
        self.check_existence = check_existence
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CheckEnumeration(self, value):
        # Validate type oval:CheckEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all', 'at least one', 'none exist', 'none satisfy', 'only one']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CheckEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_ExistenceEnumeration(self, value):
        # Validate type oval:ExistenceEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all_exist', 'any_exist', 'at_least_one_exists', 'none_exist', 'only_one_exists']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ExistenceEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            super(EntityStateComplexBaseType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateComplexBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateComplexBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateComplexBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateComplexBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EntityStateComplexBaseType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateComplexBaseType'):
        super(EntityStateComplexBaseType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateComplexBaseType')
        if self.entity_check != "all" and 'entity_check' not in already_processed:
            already_processed.add('entity_check')
            outfile.write(' entity_check=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity_check), input_name='entity_check')), ))
        if self.check_existence != "at_least_one_exists" and 'check_existence' not in already_processed:
            already_processed.add('check_existence')
            outfile.write(' check_existence=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.check_existence), input_name='check_existence')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateComplexBaseType', fromsubclass_=False, pretty_print=True):
        super(EntityStateComplexBaseType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('entity_check', node)
        if value is not None and 'entity_check' not in already_processed:
            already_processed.add('entity_check')
            self.entity_check = value
            self.validate_CheckEnumeration(self.entity_check)    # validate type CheckEnumeration
        value = find_attr_value_('check_existence', node)
        if value is not None and 'check_existence' not in already_processed:
            already_processed.add('check_existence')
            self.check_existence = value
            self.validate_ExistenceEnumeration(self.check_existence)    # validate type ExistenceEnumeration
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(EntityStateComplexBaseType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(EntityStateComplexBaseType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class EntityStateComplexBaseType


class EntityStateIPAddressType(EntityStateSimpleBaseType):
    """EntityStateIPAddressType -- The EntityStateIPAddressType type is extended by the entities of an individual OVAL State. This type provides uniformity to each object entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes any IPv4/IPv6 address or address prefix.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateIPAddressType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateIPAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateIPAddressType.subclass:
            return EntityStateIPAddressType.subclass(*args_, **kwargs_)
        else:
            return EntityStateIPAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateIPAddressType(self, value):
        result = True
        # Validate type EntityStateIPAddressType, a restriction on xsd:string.
        pass
        return result
    def validate_datatypeType4(self, value):
        # Validate type datatypeType4, a restriction on oval:SimpleDatatypeEnumeration.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ipv4_address', 'ipv6_address']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType4' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType4' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateIPAddressType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateIPAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateIPAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateIPAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateIPAddressType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateIPAddressType'):
        super(EntityStateIPAddressType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateIPAddressType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (quote_attrib(self.datatype), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateIPAddressType', fromsubclass_=False, pretty_print=True):
        super(EntityStateIPAddressType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_datatypeType4(self.datatype)    # validate type datatypeType4
        super(EntityStateIPAddressType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateIPAddressType


class EntityStateIPAddressStringType(EntityStateSimpleBaseType):
    """EntityStateIPAddressStringType -- The EntityStateIPAddressStringType type is extended by the entities of an individual OVAL State. This type provides uniformity to each object entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes any IPv4/IPv6 address, address prefix, or its string representation.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateIPAddressStringType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateIPAddressStringType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateIPAddressStringType.subclass:
            return EntityStateIPAddressStringType.subclass(*args_, **kwargs_)
        else:
            return EntityStateIPAddressStringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateIPAddressStringType(self, value):
        result = True
        # Validate type EntityStateIPAddressStringType, a restriction on xsd:string.
        pass
        return result
    def validate_datatypeType5(self, value):
        # Validate type datatypeType5, a restriction on oval:SimpleDatatypeEnumeration.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ipv4_address', 'ipv6_address', 'string']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType5' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType5' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateIPAddressStringType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateIPAddressStringType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateIPAddressStringType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateIPAddressStringType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateIPAddressStringType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateIPAddressStringType'):
        super(EntityStateIPAddressStringType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateIPAddressStringType')
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (quote_attrib(self.datatype), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateIPAddressStringType', fromsubclass_=False, pretty_print=True):
        super(EntityStateIPAddressStringType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_datatypeType5(self.datatype)    # validate type datatypeType5
        super(EntityStateIPAddressStringType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateIPAddressStringType


class EntityStateAnySimpleType(EntityStateSimpleBaseType):
    """EntityStateAnySimpleType -- The EntityStateAnySimpleType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes any simple data.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateAnySimpleType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateAnySimpleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateAnySimpleType.subclass:
            return EntityStateAnySimpleType.subclass(*args_, **kwargs_)
        else:
            return EntityStateAnySimpleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateAnySimpleType(self, value):
        result = True
        # Validate type EntityStateAnySimpleType, a restriction on xsd:string.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateAnySimpleType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateAnySimpleType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateAnySimpleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateAnySimpleType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateAnySimpleType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateAnySimpleType'):
        super(EntityStateAnySimpleType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateAnySimpleType')
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateAnySimpleType', fromsubclass_=False, pretty_print=True):
        super(EntityStateAnySimpleType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateAnySimpleType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateAnySimpleType


class EntityStateBinaryType(EntityStateSimpleBaseType):
    """EntityStateBinaryType -- The EntityStateBinaryType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes simple binary data. The empty string is also allowed when using a variable reference with an element.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateBinaryType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateBinaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateBinaryType.subclass:
            return EntityStateBinaryType.subclass(*args_, **kwargs_)
        else:
            return EntityStateBinaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateBinaryType(self, value):
        result = True
        # Validate type EntityStateBinaryType, a restriction on None.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateBinaryType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateBinaryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateBinaryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateBinaryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateBinaryType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateBinaryType'):
        super(EntityStateBinaryType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateBinaryType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateBinaryType', fromsubclass_=False, pretty_print=True):
        super(EntityStateBinaryType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateBinaryType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateBinaryType


class EntityStateBoolType(EntityStateSimpleBaseType):
    """EntityStateBoolType -- The EntityStateBoolType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes simple boolean data. The empty string is also allowed when using a variable reference with an element.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateBoolType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateBoolType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateBoolType.subclass:
            return EntityStateBoolType.subclass(*args_, **kwargs_)
        else:
            return EntityStateBoolType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateBoolType(self, value):
        result = True
        # Validate type EntityStateBoolType, a restriction on None.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateBoolType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateBoolType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateBoolType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateBoolType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateBoolType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateBoolType'):
        super(EntityStateBoolType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateBoolType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateBoolType', fromsubclass_=False, pretty_print=True):
        super(EntityStateBoolType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateBoolType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateBoolType


class EntityStateFloatType(EntityStateSimpleBaseType):
    """EntityStateFloatType -- The EntityStateFloatType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes simple float data. The empty string is also allowed when using a variable reference with an element.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateFloatType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateFloatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateFloatType.subclass:
            return EntityStateFloatType.subclass(*args_, **kwargs_)
        else:
            return EntityStateFloatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateFloatType(self, value):
        result = True
        # Validate type EntityStateFloatType, a restriction on None.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateFloatType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateFloatType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateFloatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateFloatType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateFloatType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateFloatType'):
        super(EntityStateFloatType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateFloatType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateFloatType', fromsubclass_=False, pretty_print=True):
        super(EntityStateFloatType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateFloatType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateFloatType


class EntityStateIntType(EntityStateSimpleBaseType):
    """EntityStateIntType -- The EntityStateIntType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes simple integer data. The empty string is also allowed when using a variable reference with an element.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateIntType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateIntType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateIntType.subclass:
            return EntityStateIntType.subclass(*args_, **kwargs_)
        else:
            return EntityStateIntType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateIntType(self, value):
        result = True
        # Validate type EntityStateIntType, a restriction on None.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateIntType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateIntType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateIntType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateIntType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateIntType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateIntType'):
        super(EntityStateIntType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateIntType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateIntType', fromsubclass_=False, pretty_print=True):
        super(EntityStateIntType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateIntType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateIntType


class EntityStateEVRStringType(EntityStateSimpleBaseType):
    """EntityStateEVRStringType -- The EntityStateEVRStringType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This type represents the epoch, version, and release fields, for an RPM package, as a single version string. It has the form "EPOCH:VERSION-RELEASE". Note that a null epoch (or '(none)' as returned by rpm) is equivalent to '0' and would hence have the form 0:VERSION-RELEASE. Comparisons involving this datatype should follow the algorithm of librpm's rpmvercmp() function.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateEVRStringType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateEVRStringType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateEVRStringType.subclass:
            return EntityStateEVRStringType.subclass(*args_, **kwargs_)
        else:
            return EntityStateEVRStringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateEVRStringType(self, value):
        result = True
        # Validate type EntityStateEVRStringType, a restriction on xsd:string.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateEVRStringType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateEVRStringType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateEVRStringType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateEVRStringType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateEVRStringType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateEVRStringType'):
        super(EntityStateEVRStringType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateEVRStringType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateEVRStringType', fromsubclass_=False, pretty_print=True):
        super(EntityStateEVRStringType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateEVRStringType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateEVRStringType


class EntityStateDebianEVRStringType(EntityStateSimpleBaseType):
    """EntityStateDebianEVRStringType -- The EntityStateDebianEVRStringType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This type represents the epoch, upstream_version, and debian_revision fields, for a Debian package, as a single version string. It has the form "EPOCH:UPSTREAM_VERSION-DEBIAN_REVISION". Note that a null epoch (or '(none)' as returned by dpkg) is equivalent to '0' and would hence have the form 0:UPSTREAM_VERSION-DEBIAN_REVISION. Comparisons involving this datatype should follow the algorithm outlined in Chapter 5 of the "Debian Policy Manual" (https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version). An implementation of this is the cmpversions() function in dpkg's enquiry.c.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateDebianEVRStringType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateDebianEVRStringType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateDebianEVRStringType.subclass:
            return EntityStateDebianEVRStringType.subclass(*args_, **kwargs_)
        else:
            return EntityStateDebianEVRStringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateDebianEVRStringType(self, value):
        result = True
        # Validate type EntityStateDebianEVRStringType, a restriction on xsd:string.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateDebianEVRStringType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateDebianEVRStringType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateDebianEVRStringType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateDebianEVRStringType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateDebianEVRStringType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateDebianEVRStringType'):
        super(EntityStateDebianEVRStringType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateDebianEVRStringType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateDebianEVRStringType', fromsubclass_=False, pretty_print=True):
        super(EntityStateDebianEVRStringType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateDebianEVRStringType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateDebianEVRStringType


class EntityStateVersionType(EntityStateSimpleBaseType):
    """EntityStateVersionType -- The EntityStateVersionType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes simple version data.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateVersionType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateVersionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateVersionType.subclass:
            return EntityStateVersionType.subclass(*args_, **kwargs_)
        else:
            return EntityStateVersionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateVersionType(self, value):
        result = True
        # Validate type EntityStateVersionType, a restriction on xsd:string.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateVersionType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateVersionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateVersionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateVersionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateVersionType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateVersionType'):
        super(EntityStateVersionType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateVersionType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateVersionType', fromsubclass_=False, pretty_print=True):
        super(EntityStateVersionType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateVersionType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateVersionType


class EntityStateFileSetRevisionType(EntityStateSimpleBaseType):
    """EntityStateFileSetRevisionType -- The EntityStateFileSetRevisionType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type represents the version string related to filesets in HP-UX.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateFileSetRevisionType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateFileSetRevisionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateFileSetRevisionType.subclass:
            return EntityStateFileSetRevisionType.subclass(*args_, **kwargs_)
        else:
            return EntityStateFileSetRevisionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateFileSetRevisionType(self, value):
        result = True
        # Validate type EntityStateFileSetRevisionType, a restriction on xsd:string.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateFileSetRevisionType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateFileSetRevisionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateFileSetRevisionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateFileSetRevisionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateFileSetRevisionType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateFileSetRevisionType'):
        super(EntityStateFileSetRevisionType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateFileSetRevisionType')
        if self.datatype is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateFileSetRevisionType', fromsubclass_=False, pretty_print=True):
        super(EntityStateFileSetRevisionType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateFileSetRevisionType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateFileSetRevisionType


class EntityStateIOSVersionType(EntityStateSimpleBaseType):
    """EntityStateIOSVersionType -- The EntityStateIOSVersionType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type represents the version string related to CISCO IOS.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateIOSVersionType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateIOSVersionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateIOSVersionType.subclass:
            return EntityStateIOSVersionType.subclass(*args_, **kwargs_)
        else:
            return EntityStateIOSVersionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateIOSVersionType(self, value):
        result = True
        # Validate type EntityStateIOSVersionType, a restriction on xsd:string.
        pass
        return result
    def validate_datatypeType6(self, value):
        # Validate type datatypeType6, a restriction on oval:SimpleDatatypeEnumeration.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ios_version', 'string']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType6' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on datatypeType6' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateIOSVersionType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateIOSVersionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateIOSVersionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateIOSVersionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateIOSVersionType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateIOSVersionType'):
        super(EntityStateIOSVersionType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateIOSVersionType')
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (quote_attrib(self.datatype), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateIOSVersionType', fromsubclass_=False, pretty_print=True):
        super(EntityStateIOSVersionType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_datatypeType6(self.datatype)    # validate type datatypeType6
        super(EntityStateIOSVersionType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateIOSVersionType


class EntityStateStringType(EntityStateSimpleBaseType):
    """EntityStateStringType -- The EntityStateStringType type is extended by the entities of an individual OVAL State. This type provides uniformity to each state entity by including the attributes found in the EntityStateSimpleBaseType. This specific type describes simple string data.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateSimpleBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateStringType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence, valueOf_,  **kwargs_)
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateStringType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateStringType.subclass:
            return EntityStateStringType.subclass(*args_, **kwargs_)
        else:
            return EntityStateStringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EntityStateStringType(self, value):
        result = True
        # Validate type EntityStateStringType, a restriction on xsd:string.
        pass
        return result
    def validate_SimpleDatatypeEnumeration(self, value):
        # Validate type oval:SimpleDatatypeEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['binary', 'boolean', 'evr_string', 'debian_evr_string', 'fileset_revision', 'float', 'ios_version', 'int', 'ipv4_address', 'ipv6_address', 'string', 'version']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SimpleDatatypeEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(EntityStateStringType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateStringType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateStringType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateStringType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateStringType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateStringType'):
        super(EntityStateStringType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateStringType')
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.datatype), input_name='datatype')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateStringType', fromsubclass_=False, pretty_print=True):
        super(EntityStateStringType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_SimpleDatatypeEnumeration(self.datatype)    # validate type SimpleDatatypeEnumeration
        super(EntityStateStringType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateStringType


class EntityStateRecordType(EntityStateComplexBaseType):
    """EntityStateRecordType -- The EntityStateRecordType defines an entity that consists of a number of uniquely named fields. This structure is used for representing a record from a database query and other similar structures where multiple related fields must be collected at once. Note that for all entities of this type, the only allowed datatype is 'record' and the only allowed operation is 'equals'. During analysis of a system characteristics item, each field is analyzed and then the overall result for elements of this type is computed by logically anding the results for each field and then applying the entity_check attribute.
    Note the datatype attribute must be set to 'record'.
    Note the operation attribute must be set to 'equals'.
    Note the var_ref attribute is not permitted and the var_check attribute does not apply.
    Note that when the mask attribute is set to 'true', all child field elements must be masked regardless of the child field's mask attribute value.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EntityStateComplexBaseType
    def __init__(self, datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, entity_check='all', check_existence='at_least_one_exists', field=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        super(globals().get("EntityStateRecordType"), self).__init__(datatype, operation, mask, var_ref, var_check, entity_check, check_existence,  **kwargs_)
        if field is None:
            self.field = []
        else:
            self.field = field
        self.field_nsprefix_ = "oval-def"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateRecordType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateRecordType.subclass:
            return EntityStateRecordType.subclass(*args_, **kwargs_)
        else:
            return EntityStateRecordType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_field(self):
        return self.field
    def set_field(self, field):
        self.field = field
    def add_field(self, value):
        self.field.append(value)
    def insert_field_at(self, index, value):
        self.field.insert(index, value)
    def replace_field_at(self, index, value):
        self.field[index] = value
    def has__content(self):
        if (
            self.field or
            super(EntityStateRecordType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateRecordType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateRecordType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateRecordType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateRecordType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EntityStateRecordType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateRecordType'):
        super(EntityStateRecordType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateRecordType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateRecordType', fromsubclass_=False, pretty_print=True):
        super(EntityStateRecordType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            namespaceprefix_ = self.field_nsprefix_ + ':' if (UseCapturedNS_ and self.field_nsprefix_) else ''
            field_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='field', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(EntityStateRecordType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'field':
            obj_ = EntityStateFieldType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.field.append(obj_)
            obj_.original_tagname_ = 'field'
        super(EntityStateRecordType, self)._buildChildren(child_, node, nodeName_, True)
# end class EntityStateRecordType


class EntityStateFieldType(GeneratedsSuper):
    """EntityStateFieldType -- The EntityStateFieldType defines an element with simple content that represents a named field in a record that may contain any number of named fields. The EntityStateFieldType is much like all other entities with one significant difference, the EntityStateFieldType has a name attribute
    The required name attribute specifies a unique name for the field. Field names are lowercase and must be unique within a given parent record element. When analyzing system characteristics an error should be reported for the result of a field that is present in the OVAL State, but not found in the system characteristics Item.
    The optional entity_check attribute specifies how to handle multiple record fields with the same name in the OVAL Systems Characteristics file. For example, while collecting group information where one field is the represents the users that are members of the group.  It is very likely that there will be multiple fields with a name of 'user' associated with the group.  If the OVAL State defines the value of the field with name equal 'user' to equal 'Fred', then the entity_check attribute determines if all values for field entities must be equal to 'Fred', or at least one value must be equal to 'Fred', etc.
    Note that when the mask attribute is set to 'true' on a field's parent element the field must be masked regardless of the field's mask attribute value.
    name -- A string restricted to disallow upper case characters.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, entity_check='all', datatype='string', operation='equals', mask=False, var_ref=None, var_check=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.entity_check = _cast(None, entity_check)
        self.entity_check_nsprefix_ = None
        self.datatype = _cast(None, datatype)
        self.datatype_nsprefix_ = None
        self.operation = _cast(None, operation)
        self.operation_nsprefix_ = None
        self.mask = _cast(bool, mask)
        self.mask_nsprefix_ = None
        self.var_ref = _cast(None, var_ref)
        self.var_ref_nsprefix_ = None
        self.var_check = _cast(None, var_check)
        self.var_check_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntityStateFieldType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntityStateFieldType.subclass:
            return EntityStateFieldType.subclass(*args_, **kwargs_)
        else:
            return EntityStateFieldType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_entity_check(self):
        return self.entity_check
    def set_entity_check(self, entity_check):
        self.entity_check = entity_check
    def get_datatype(self):
        return self.datatype
    def set_datatype(self, datatype):
        self.datatype = datatype
    def get_operation(self):
        return self.operation
    def set_operation(self, operation):
        self.operation = operation
    def get_mask(self):
        return self.mask
    def set_mask(self, mask):
        self.mask = mask
    def get_var_ref(self):
        return self.var_ref
    def set_var_ref(self, var_ref):
        self.var_ref = var_ref
    def get_var_check(self):
        return self.var_check
    def set_var_check(self, var_check):
        self.var_check = var_check
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_nameType7(self, value):
        # Validate type nameType7, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_nameType7_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_nameType7_patterns_, ))
    validate_nameType7_patterns_ = [['^([^A-Z]+)$']]
    def validate_CheckEnumeration(self, value):
        # Validate type oval:CheckEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['all', 'at least one', 'none exist', 'none satisfy', 'only one']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CheckEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_DatatypeEnumeration(self, value):
        # Validate type oval:DatatypeEnumeration, a restriction on None.
        pass
    def validate_OperationEnumeration(self, value):
        # Validate type oval:OperationEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['equals', 'not equal', 'case insensitive equals', 'case insensitive not equal', 'greater than', 'less than', 'greater than or equal', 'less than or equal', 'bitwise and', 'bitwise or', 'pattern match', 'subset of', 'superset of']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperationEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_VariableIDPattern(self, value):
        # Validate type oval:VariableIDPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_VariableIDPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_VariableIDPattern_patterns_, ))
    validate_VariableIDPattern_patterns_ = [['^(oval:[A-Za-z0-9_\\-\\.]+:var:[1-9][0-9]*)$']]
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateFieldType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntityStateFieldType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntityStateFieldType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntityStateFieldType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntityStateFieldType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.entity_check != "all" and 'entity_check' not in already_processed:
            already_processed.add('entity_check')
            outfile.write(' entity_check=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.entity_check), input_name='entity_check')), ))
        if self.datatype != "string" and 'datatype' not in already_processed:
            already_processed.add('datatype')
            outfile.write(' datatype=%s' % (quote_attrib(self.datatype), ))
        if self.operation != "equals" and 'operation' not in already_processed:
            already_processed.add('operation')
            outfile.write(' operation=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operation), input_name='operation')), ))
        if self.mask and 'mask' not in already_processed:
            already_processed.add('mask')
            outfile.write(' mask="%s"' % self.gds_format_boolean(self.mask, input_name='mask'))
        if self.var_ref is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            outfile.write(' var_ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.var_ref), input_name='var_ref')), ))
        if self.var_check is not None and 'var_check' not in already_processed:
            already_processed.add('var_check')
            outfile.write(' var_check=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.var_check), input_name='var_check')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"', name_='EntityStateFieldType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_nameType7(self.name)    # validate type nameType7
        value = find_attr_value_('entity_check', node)
        if value is not None and 'entity_check' not in already_processed:
            already_processed.add('entity_check')
            self.entity_check = value
            self.validate_CheckEnumeration(self.entity_check)    # validate type CheckEnumeration
        value = find_attr_value_('datatype', node)
        if value is not None and 'datatype' not in already_processed:
            already_processed.add('datatype')
            self.datatype = value
            self.validate_DatatypeEnumeration(self.datatype)    # validate type DatatypeEnumeration
        value = find_attr_value_('operation', node)
        if value is not None and 'operation' not in already_processed:
            already_processed.add('operation')
            self.operation = value
            self.validate_OperationEnumeration(self.operation)    # validate type OperationEnumeration
        value = find_attr_value_('mask', node)
        if value is not None and 'mask' not in already_processed:
            already_processed.add('mask')
            if value in ('true', '1'):
                self.mask = True
            elif value in ('false', '0'):
                self.mask = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('var_ref', node)
        if value is not None and 'var_ref' not in already_processed:
            already_processed.add('var_ref')
            self.var_ref = value
            self.validate_VariableIDPattern(self.var_ref)    # validate type VariableIDPattern
        value = find_attr_value_('var_check', node)
        if value is not None and 'var_check' not in already_processed:
            already_processed.add('var_check')
            self.var_check = value
            self.validate_CheckEnumeration(self.var_check)    # validate type CheckEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EntityStateFieldType


class ElementMapType(GeneratedsSuper):
    """ElementMapType -- The ElementMapType is used to document the association between OVAL test, object, state, and item entities.
    test -- The local name of an OVAL test.
    object -- The local name of an OVAL object.
    state -- The local name of an OVAL state.
    item -- The local name of an OVAL item.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, test=None, object=None, state=None, item=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval"
        self.test = test
        self.test_nsprefix_ = "oval"
        self.object = object
        self.object_nsprefix_ = "oval"
        self.state = state
        self.state_nsprefix_ = "oval"
        self.item = item
        self.item_nsprefix_ = "oval"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementMapType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementMapType.subclass:
            return ElementMapType.subclass(*args_, **kwargs_)
        else:
            return ElementMapType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_test(self):
        return self.test
    def set_test(self, test):
        self.test = test
    def get_object(self):
        return self.object
    def set_object(self, object):
        self.object = object
    def get_state(self):
        return self.state
    def set_state(self, state):
        self.state = state
    def get_item(self):
        return self.item
    def set_item(self, item):
        self.item = item
    def has__content(self):
        if (
            self.test is not None or
            self.object is not None or
            self.state is not None or
            self.item is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"', name_='ElementMapType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementMapType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ElementMapType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ElementMapType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ElementMapType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='oval:', name_='ElementMapType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"', name_='ElementMapType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.test is not None:
            namespaceprefix_ = self.test_nsprefix_ + ':' if (UseCapturedNS_ and self.test_nsprefix_) else ''
            self.test.export(outfile, level, namespaceprefix_, namespacedef_='', name_='test', pretty_print=pretty_print)
        if self.object is not None:
            namespaceprefix_ = self.object_nsprefix_ + ':' if (UseCapturedNS_ and self.object_nsprefix_) else ''
            self.object.export(outfile, level, namespaceprefix_, namespacedef_='', name_='object', pretty_print=pretty_print)
        if self.state is not None:
            namespaceprefix_ = self.state_nsprefix_ + ':' if (UseCapturedNS_ and self.state_nsprefix_) else ''
            self.state.export(outfile, level, namespaceprefix_, namespacedef_='', name_='state', pretty_print=pretty_print)
        if self.item is not None:
            namespaceprefix_ = self.item_nsprefix_ + ':' if (UseCapturedNS_ and self.item_nsprefix_) else ''
            self.item.export(outfile, level, namespaceprefix_, namespacedef_='', name_='item', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'test':
            obj_ = ElementMapItemType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.test = obj_
            obj_.original_tagname_ = 'test'
        elif nodeName_ == 'object':
            obj_ = ElementMapItemType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.object = obj_
            obj_.original_tagname_ = 'object'
        elif nodeName_ == 'state':
            obj_ = ElementMapItemType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.state = obj_
            obj_.original_tagname_ = 'state'
        elif nodeName_ == 'item':
            obj_ = ElementMapItemType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.item = obj_
            obj_.original_tagname_ = 'item'
# end class ElementMapType


class ElementMapItemType(GeneratedsSuper):
    """ElementMapItemType -- Defines a reference to an OVAL entity using the schema namespace and element name.
    target_namespace -- The target_namespace attributes indicates what XML namespace the element belongs to. If not present, the namespace is that of the document in which the ElementMapItemType instance element appears.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, target_namespace=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval"
        self.target_namespace = _cast(None, target_namespace)
        self.target_namespace_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementMapItemType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementMapItemType.subclass:
            return ElementMapItemType.subclass(*args_, **kwargs_)
        else:
            return ElementMapItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_target_namespace(self):
        return self.target_namespace
    def set_target_namespace(self, target_namespace):
        self.target_namespace = target_namespace
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"', name_='ElementMapItemType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementMapItemType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ElementMapItemType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ElementMapItemType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='oval:', name_='ElementMapItemType'):
        if self.target_namespace is not None and 'target_namespace' not in already_processed:
            already_processed.add('target_namespace')
            outfile.write(' target_namespace=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.target_namespace), input_name='target_namespace')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"', name_='ElementMapItemType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('target_namespace', node)
        if value is not None and 'target_namespace' not in already_processed:
            already_processed.add('target_namespace')
            self.target_namespace = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class ElementMapItemType


class DeprecatedInfoType(GeneratedsSuper):
    """DeprecatedInfoType -- The DeprecatedInfoType complex type defines a structure that will be used to flag schema-defined constructs as deprecated.  It holds information related to the version of OVAL when the construct was deprecated along with a reason and comment.
    version -- The required version child element details the version of OVAL in which the construct became deprecated.
    reason -- The required reason child element is used to provide an explanation as to why an item was deprecated and to direct a reader to possible alternative structures within OVAL.
    comment -- The optional comment child element is used to supply additional information regarding the element's deprecated status.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, version=None, reason=None, comment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.version = version
        self.validate_versionType(self.version)
        self.version_nsprefix_ = None
        self.reason = reason
        self.reason_nsprefix_ = None
        self.comment = comment
        self.comment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeprecatedInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeprecatedInfoType.subclass:
            return DeprecatedInfoType.subclass(*args_, **kwargs_)
        else:
            return DeprecatedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_reason(self):
        return self.reason
    def set_reason(self, reason):
        self.reason = reason
    def get_comment(self):
        return self.comment
    def set_comment(self, comment):
        self.comment = comment
    def validate_versionType(self, value):
        result = True
        # Validate type versionType, a restriction on oval:SchemaVersionPattern.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_versionType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_versionType_patterns_, ))
                result = False
        return result
    validate_versionType_patterns_ = [['^([0-9]+\\.[0-9]+(\\.[0-9]+)?(:[0-9]+\\.[0-9]+(\\.[0-9]+)?)?)$']]
    def has__content(self):
        if (
            self.version is not None or
            self.reason is not None or
            self.comment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='DeprecatedInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeprecatedInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeprecatedInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeprecatedInfoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeprecatedInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='oval:', name_='DeprecatedInfoType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='DeprecatedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.reason is not None:
            namespaceprefix_ = self.reason_nsprefix_ + ':' if (UseCapturedNS_ and self.reason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreason>%s</%sreason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reason), input_name='reason')), namespaceprefix_ , eol_))
        if self.comment is not None:
            namespaceprefix_ = self.comment_nsprefix_ + ':' if (UseCapturedNS_ and self.comment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.comment), input_name='comment')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
            # validate type versionType
            self.validate_versionType(self.version)
        elif nodeName_ == 'reason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reason')
            value_ = self.gds_validate_string(value_, node, 'reason')
            self.reason = value_
            self.reason_nsprefix_ = child_.prefix
        elif nodeName_ == 'comment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'comment')
            value_ = self.gds_validate_string(value_, node, 'comment')
            self.comment = value_
            self.comment_nsprefix_ = child_.prefix
# end class DeprecatedInfoType


class GeneratorType(GeneratedsSuper):
    """GeneratorType -- The GeneratorType complex type defines an element that is used to hold information about when a particular OVAL document was compiled, what version of the schema was used, what tool compiled the document, and what version of that tool was used.
    Additional generator information is also allowed although it is not part of the official OVAL Schema. Individual organizations can place generator information that they feel are important and these will be skipped during the validation. All OVAL really cares about is that the stated generator information is there.
     -- The Asset Identification specification (http://scap.nist.gov/specifications/ai/) provides a standardized way of reporting asset information across different organizations.
    Asset Identification elements can hold data useful for identifying what tool, what version of that tool was used, and identify other assets used to compile an OVAL document, such as persons or organizations.
    To support greater interoperability, an ai:assets element describing assets used to produce an OVAL document may appear at this point in an OVAL document.
    product_name -- The optional product_name specifies the name of the application used to generate the file. Product names SHOULD be expressed as CPE Names according to the Common Platform Enumeration: Name Matching Specification Version 2.3.
    product_version -- The optional product_version specifies the version of the application used to generate the file.
    schema_version -- The required schema_version specifies the version of the OVAL Schema that the document has been written in and that should be used for validation. The versions for both the Core and any platform extensions used should be declared in separate schema_version elements.
    timestamp -- The required timestamp specifies when the particular OVAL document was compiled. The format for the timestamp is yyyy-mm-ddThh:mm:ss. Note that the timestamp element does not specify when a definition (or set of definitions) was created or modified but rather when the actual XML document that contains the definition was created. For example, the document might have pulled a bunch of existing OVAL Definitions together, each of the definitions having been created at some point in the past. The timestamp in this case would be when the combined document was created.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, product_name=None, product_version=None, schema_version=None, timestamp=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval-def"
        self.product_name = product_name
        self.product_name_nsprefix_ = "oval"
        self.product_version = product_version
        self.product_version_nsprefix_ = "oval"
        if schema_version is None:
            self.schema_version = []
        else:
            self.schema_version = schema_version
        self.schema_version_nsprefix_ = "oval"
        if isinstance(timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = timestamp
        self.timestamp = initvalue_
        self.timestamp_nsprefix_ = "oval"
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneratorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneratorType.subclass:
            return GeneratorType.subclass(*args_, **kwargs_)
        else:
            return GeneratorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_product_name(self):
        return self.product_name
    def set_product_name(self, product_name):
        self.product_name = product_name
    def get_product_version(self):
        return self.product_version
    def set_product_version(self, product_version):
        self.product_version = product_version
    def get_schema_version(self):
        return self.schema_version
    def set_schema_version(self, schema_version):
        self.schema_version = schema_version
    def add_schema_version(self, value):
        self.schema_version.append(value)
    def insert_schema_version_at(self, index, value):
        self.schema_version.insert(index, value)
    def replace_schema_version_at(self, index, value):
        self.schema_version[index] = value
    def get_timestamp(self):
        return self.timestamp
    def set_timestamp(self, timestamp):
        self.timestamp = timestamp
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def has__content(self):
        if (
            self.product_name is not None or
            self.product_version is not None or
            self.schema_version or
            self.timestamp is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='GeneratorType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneratorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GeneratorType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneratorType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneratorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='oval:', name_='GeneratorType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='GeneratorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.product_name is not None:
            namespaceprefix_ = self.product_name_nsprefix_ + ':' if (UseCapturedNS_ and self.product_name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproduct_name>%s</%sproduct_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.product_name), input_name='product_name')), namespaceprefix_ , eol_))
        if self.product_version is not None:
            namespaceprefix_ = self.product_version_nsprefix_ + ':' if (UseCapturedNS_ and self.product_version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproduct_version>%s</%sproduct_version>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.product_version), input_name='product_version')), namespaceprefix_ , eol_))
        for schema_version_ in self.schema_version:
            namespaceprefix_ = self.schema_version_nsprefix_ + ':' if (UseCapturedNS_ and self.schema_version_nsprefix_) else ''
            schema_version_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='schema_version', pretty_print=pretty_print)
        if self.timestamp is not None:
            namespaceprefix_ = self.timestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.timestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stimestamp>%s</%stimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.timestamp, input_name='timestamp'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'product_name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'product_name')
            value_ = self.gds_validate_string(value_, node, 'product_name')
            self.product_name = value_
            self.product_name_nsprefix_ = child_.prefix
        elif nodeName_ == 'product_version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'product_version')
            value_ = self.gds_validate_string(value_, node, 'product_version')
            self.product_version = value_
            self.product_version_nsprefix_ = child_.prefix
        elif nodeName_ == 'schema_version':
            obj_ = SchemaVersionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.schema_version.append(obj_)
            obj_.original_tagname_ = 'schema_version'
        elif nodeName_ == 'timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.timestamp = dval_
            self.timestamp_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'GeneratorType')
            self.anytypeobjs_.append(content_)
# end class GeneratorType


class SchemaVersionType(GeneratedsSuper):
    """SchemaVersionType -- The core version MUST match on all platform schema versions.
    platform -- The platform attribute is available to indicate the URI of the target namespace for any platform extension being included. This platform attribute is to be omitted when specifying the core schema version.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, platform=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval"
        self.platform = _cast(None, platform)
        self.platform_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SchemaVersionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SchemaVersionType.subclass:
            return SchemaVersionType.subclass(*args_, **kwargs_)
        else:
            return SchemaVersionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_platform(self):
        return self.platform
    def set_platform(self, platform):
        self.platform = platform
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_SchemaVersionPattern(self, value):
        result = True
        # Validate type SchemaVersionPattern, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_SchemaVersionPattern_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_SchemaVersionPattern_patterns_, ))
                result = False
        return result
    validate_SchemaVersionPattern_patterns_ = [['^([0-9]+\\.[0-9]+(\\.[0-9]+)?(:[0-9]+\\.[0-9]+(\\.[0-9]+)?)?)$']]
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"', name_='SchemaVersionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SchemaVersionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SchemaVersionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SchemaVersionType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='oval:', name_='SchemaVersionType'):
        if self.platform is not None and 'platform' not in already_processed:
            already_processed.add('platform')
            outfile.write(' platform=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.platform), input_name='platform')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"', name_='SchemaVersionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('platform', node)
        if value is not None and 'platform' not in already_processed:
            already_processed.add('platform')
            self.platform = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class SchemaVersionType


class MessageType(GeneratedsSuper):
    """MessageType -- The MessageType complex type defines the structure for which messages are relayed from the data collection engine. Each message is a text string that has an associated level attribute identifying the type of message being sent. These messages could be error messages, warning messages, debug messages, etc. How the messages are used by tools and whether or not they are displayed to the user is up to the specific implementation. Please refer to the description of the MessageLevelEnumeration for more information about each type of message.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, level='info', valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "oval"
        self.level = _cast(None, level)
        self.level_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MessageType.subclass:
            return MessageType.subclass(*args_, **kwargs_)
        else:
            return MessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_level(self):
        return self.level
    def set_level(self, level):
        self.level = level
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_MessageLevelEnumeration(self, value):
        # Validate type oval:MessageLevelEnumeration, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['debug', 'error', 'fatal', 'info', 'warning']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on MessageLevelEnumeration' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"', name_='MessageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MessageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MessageType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='oval:', name_='MessageType'):
        if self.level != "info" and 'level' not in already_processed:
            already_processed.add('level')
            outfile.write(' level=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.level), input_name='level')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"', name_='MessageType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('level', node)
        if value is not None and 'level' not in already_processed:
            already_processed.add('level')
            self.level = value
            self.validate_MessageLevelEnumeration(self.level)    # validate type MessageLevelEnumeration
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class MessageType


class NotesType(GeneratedsSuper):
    """NotesType -- The NotesType complex type is a container for one or more note child elements. Each note contains some information about the definition or tests that it references. A note may record an unresolved question about the definition or test or present the reason as to why a particular approach was taken.
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if note is None:
            self.note = []
        else:
            self.note = note
        self.note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType.subclass:
            return NotesType.subclass(*args_, **kwargs_)
        else:
            return NotesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_note(self):
        return self.note
    def set_note(self, note):
        self.note = note
    def add_note(self, value):
        self.note.append(value)
    def insert_note_at(self, index, value):
        self.note.insert(index, value)
    def replace_note_at(self, index, value):
        self.note[index] = value
    def has__content(self):
        if (
            self.note
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='NotesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='oval:', name_='NotesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='oval:', namespacedef_='xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='NotesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for note_ in self.note:
            namespaceprefix_ = self.note_nsprefix_ + ':' if (UseCapturedNS_ and self.note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snote>%s</%snote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(note_), input_name='note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'note')
            value_ = self.gds_validate_string(value_, node, 'note')
            self.note.append(value_)
            self.note_nsprefix_ = child_.prefix
# end class NotesType


class SignatureType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None, Object=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.SignedInfo = SignedInfo
        self.SignedInfo_nsprefix_ = "ds"
        self.SignatureValue = SignatureValue
        self.SignatureValue_nsprefix_ = "ds"
        self.KeyInfo = KeyInfo
        self.KeyInfo_nsprefix_ = "ds"
        if Object is None:
            self.Object = []
        else:
            self.Object = Object
        self.Object_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SignedInfo(self):
        return self.SignedInfo
    def set_SignedInfo(self, SignedInfo):
        self.SignedInfo = SignedInfo
    def get_SignatureValue(self):
        return self.SignatureValue
    def set_SignatureValue(self, SignatureValue):
        self.SignatureValue = SignatureValue
    def get_KeyInfo(self):
        return self.KeyInfo
    def set_KeyInfo(self, KeyInfo):
        self.KeyInfo = KeyInfo
    def get_Object(self):
        return self.Object
    def set_Object(self, Object):
        self.Object = Object
    def add_Object(self, value):
        self.Object.append(value)
    def insert_Object_at(self, index, value):
        self.Object.insert(index, value)
    def replace_Object_at(self, index, value):
        self.Object[index] = value
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def has__content(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None or
            self.Object
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignatureType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatureType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignatureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignedInfo is not None:
            namespaceprefix_ = self.SignedInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.SignedInfo_nsprefix_) else ''
            self.SignedInfo.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SignedInfo', pretty_print=pretty_print)
        if self.SignatureValue is not None:
            namespaceprefix_ = self.SignatureValue_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureValue_nsprefix_) else ''
            self.SignatureValue.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SignatureValue', pretty_print=pretty_print)
        if self.KeyInfo is not None:
            namespaceprefix_ = self.KeyInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.KeyInfo_nsprefix_) else ''
            self.KeyInfo.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='KeyInfo', pretty_print=pretty_print)
        for Object_ in self.Object:
            namespaceprefix_ = self.Object_nsprefix_ + ':' if (UseCapturedNS_ and self.Object_nsprefix_) else ''
            Object_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Object', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignedInfo = obj_
            obj_.original_tagname_ = 'SignedInfo'
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureValue = obj_
            obj_.original_tagname_ = 'SignatureValue'
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.KeyInfo = obj_
            obj_.original_tagname_ = 'KeyInfo'
        elif nodeName_ == 'Object':
            obj_ = ObjectType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Object.append(obj_)
            obj_.original_tagname_ = 'Object'
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignatureValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatureValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureValueType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignatureValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, CanonicalizationMethod=None, SignatureMethod=None, Reference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.CanonicalizationMethod = CanonicalizationMethod
        self.CanonicalizationMethod_nsprefix_ = "ds"
        self.SignatureMethod = SignatureMethod
        self.SignatureMethod_nsprefix_ = "ds"
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        self.Reference_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignedInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CanonicalizationMethod(self):
        return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod):
        self.CanonicalizationMethod = CanonicalizationMethod
    def get_SignatureMethod(self):
        return self.SignatureMethod
    def set_SignatureMethod(self, SignatureMethod):
        self.SignatureMethod = SignatureMethod
    def get_Reference(self):
        return self.Reference
    def set_Reference(self, Reference):
        self.Reference = Reference
    def add_Reference(self, value):
        self.Reference.append(value)
    def insert_Reference_at(self, index, value):
        self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value):
        self.Reference[index] = value
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def has__content(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignedInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignedInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignedInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignedInfoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignedInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CanonicalizationMethod is not None:
            namespaceprefix_ = self.CanonicalizationMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.CanonicalizationMethod_nsprefix_) else ''
            self.CanonicalizationMethod.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='CanonicalizationMethod', pretty_print=pretty_print)
        if self.SignatureMethod is not None:
            namespaceprefix_ = self.SignatureMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureMethod_nsprefix_) else ''
            self.SignatureMethod.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SignatureMethod', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            namespaceprefix_ = self.Reference_nsprefix_ + ':' if (UseCapturedNS_ and self.Reference_nsprefix_) else ''
            Reference_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Reference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CanonicalizationMethod = obj_
            obj_.original_tagname_ = 'CanonicalizationMethod'
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureMethod = obj_
            obj_.original_tagname_ = 'SignatureMethod'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class SignedInfoType


class CanonicalizationMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.Algorithm_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CanonicalizationMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self):
        return self.Algorithm
    def set_Algorithm(self, Algorithm):
        self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='CanonicalizationMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CanonicalizationMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CanonicalizationMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CanonicalizationMethodType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='CanonicalizationMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, HMACOutputLength=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.Algorithm_nsprefix_ = None
        self.HMACOutputLength = HMACOutputLength
        self.validate_HMACOutputLengthType(self.HMACOutputLength)
        self.HMACOutputLength_nsprefix_ = "ds"
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HMACOutputLength(self):
        return self.HMACOutputLength
    def set_HMACOutputLength(self, HMACOutputLength):
        self.HMACOutputLength = HMACOutputLength
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self):
        return self.Algorithm
    def set_Algorithm(self, Algorithm):
        self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_HMACOutputLengthType(self, value):
        result = True
        # Validate type HMACOutputLengthType, a restriction on integer.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.HMACOutputLength is not None or
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SignatureMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatureMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureMethodType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SignatureMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HMACOutputLength is not None:
            namespaceprefix_ = self.HMACOutputLength_nsprefix_ + ':' if (UseCapturedNS_ and self.HMACOutputLength_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHMACOutputLength>%s</%sHMACOutputLength>%s' % (namespaceprefix_ , self.gds_format_integer(self.HMACOutputLength, input_name='HMACOutputLength'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HMACOutputLength' and child_.text is not None:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'HMACOutputLength')
            ival_ = self.gds_validate_integer(ival_, node, 'HMACOutputLength')
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeInteger, 'HMACOutputLength', ival_)
            self.content_.append(obj_)
            self.HMACOutputLength_nsprefix_ = child_.prefix
        elif nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignatureMethodType


class ReferenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, URI=None, Type=None, Transforms=None, DigestMethod=None, DigestValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.URI = _cast(None, URI)
        self.URI_nsprefix_ = None
        self.Type = _cast(None, Type)
        self.Type_nsprefix_ = None
        self.Transforms = Transforms
        self.Transforms_nsprefix_ = "ds"
        self.DigestMethod = DigestMethod
        self.DigestMethod_nsprefix_ = "ds"
        self.DigestValue = DigestValue
        self.DigestValue_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Transforms(self):
        return self.Transforms
    def set_Transforms(self, Transforms):
        self.Transforms = Transforms
    def get_DigestMethod(self):
        return self.DigestMethod
    def set_DigestMethod(self, DigestMethod):
        self.DigestMethod = DigestMethod
    def get_DigestValue(self):
        return self.DigestValue
    def set_DigestValue(self, DigestValue):
        self.DigestValue = DigestValue
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_URI(self):
        return self.URI
    def set_URI(self, URI):
        self.URI = URI
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def has__content(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='ReferenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReferenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReferenceType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='ReferenceType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            namespaceprefix_ = self.Transforms_nsprefix_ + ':' if (UseCapturedNS_ and self.Transforms_nsprefix_) else ''
            self.Transforms.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Transforms', pretty_print=pretty_print)
        if self.DigestMethod is not None:
            namespaceprefix_ = self.DigestMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.DigestMethod_nsprefix_) else ''
            self.DigestMethod.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='DigestMethod', pretty_print=pretty_print)
        if self.DigestValue is not None:
            namespaceprefix_ = self.DigestValue_nsprefix_ + ':' if (UseCapturedNS_ and self.DigestValue_nsprefix_) else ''
            self.DigestValue.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='DigestValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DigestMethod = obj_
            obj_.original_tagname_ = 'DigestMethod'
        elif nodeName_ == 'DigestValue':
            obj_ = DigestValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DigestValue = obj_
            obj_.original_tagname_ = 'DigestValue'
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Transform=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform
        self.Transform_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Transform(self):
        return self.Transform
    def set_Transform(self, Transform):
        self.Transform = Transform
    def add_Transform(self, value):
        self.Transform.append(value)
    def insert_Transform_at(self, index, value):
        self.Transform.insert(index, value)
    def replace_Transform_at(self, index, value):
        self.Transform[index] = value
    def has__content(self):
        if (
            self.Transform
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='TransformsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransformsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransformsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransformsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='TransformsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='TransformsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transform_ in self.Transform:
            namespaceprefix_ = self.Transform_nsprefix_ + ':' if (UseCapturedNS_ and self.Transform_nsprefix_) else ''
            Transform_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Transform', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transform.append(obj_)
            obj_.original_tagname_ = 'Transform'
# end class TransformsType


class TransformType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, XPath=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.Algorithm_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
        if XPath is None:
            self.XPath = []
        else:
            self.XPath = XPath
        self.XPath_nsprefix_ = None
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_XPath(self):
        return self.XPath
    def set_XPath(self, XPath):
        self.XPath = XPath
    def add_XPath(self, value):
        self.XPath.append(value)
    def insert_XPath_at(self, index, value):
        self.XPath.insert(index, value)
    def replace_XPath_at(self, index, value):
        self.XPath[index] = value
    def get_Algorithm(self):
        return self.Algorithm
    def set_Algorithm(self, Algorithm):
        self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ is not None or
            self.XPath or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='TransformType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransformType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransformType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='TransformType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for XPath_ in self.XPath:
            namespaceprefix_ = self.XPath_nsprefix_ + ':' if (UseCapturedNS_ and self.XPath_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sXPath>%s</%sXPath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(XPath_), input_name='XPath')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        elif nodeName_ == 'XPath' and child_.text is not None:
            valuestr_ = child_.text
            valuestr_ = self.gds_parse_string(valuestr_, node, 'XPath')
            valuestr_ = self.gds_validate_string(valuestr_, node, 'XPath')
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'XPath', valuestr_)
            self.content_.append(obj_)
            self.XPath_nsprefix_ = child_.prefix
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class TransformType


class DigestMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.Algorithm_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DigestMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self):
        return self.Algorithm
    def set_Algorithm(self, Algorithm):
        self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='DigestMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DigestMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DigestMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DigestMethodType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='DigestMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class DigestMethodType


class KeyInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, KeyName=None, KeyValue=None, RetrievalMethod=None, X509Data=None, PGPData=None, SPKIData=None, MgmtData=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        if KeyName is None:
            self.KeyName = []
        else:
            self.KeyName = KeyName
        self.KeyName_nsprefix_ = "ds"
        if KeyValue is None:
            self.KeyValue = []
        else:
            self.KeyValue = KeyValue
        self.KeyValue_nsprefix_ = "ds"
        if RetrievalMethod is None:
            self.RetrievalMethod = []
        else:
            self.RetrievalMethod = RetrievalMethod
        self.RetrievalMethod_nsprefix_ = "ds"
        if X509Data is None:
            self.X509Data = []
        else:
            self.X509Data = X509Data
        self.X509Data_nsprefix_ = "ds"
        if PGPData is None:
            self.PGPData = []
        else:
            self.PGPData = PGPData
        self.PGPData_nsprefix_ = "ds"
        if SPKIData is None:
            self.SPKIData = []
        else:
            self.SPKIData = SPKIData
        self.SPKIData_nsprefix_ = "ds"
        if MgmtData is None:
            self.MgmtData = []
        else:
            self.MgmtData = MgmtData
        self.MgmtData_nsprefix_ = "ds"
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_KeyName(self):
        return self.KeyName
    def set_KeyName(self, KeyName):
        self.KeyName = KeyName
    def add_KeyName(self, value):
        self.KeyName.append(value)
    def insert_KeyName_at(self, index, value):
        self.KeyName.insert(index, value)
    def replace_KeyName_at(self, index, value):
        self.KeyName[index] = value
    def get_KeyValue(self):
        return self.KeyValue
    def set_KeyValue(self, KeyValue):
        self.KeyValue = KeyValue
    def add_KeyValue(self, value):
        self.KeyValue.append(value)
    def insert_KeyValue_at(self, index, value):
        self.KeyValue.insert(index, value)
    def replace_KeyValue_at(self, index, value):
        self.KeyValue[index] = value
    def get_RetrievalMethod(self):
        return self.RetrievalMethod
    def set_RetrievalMethod(self, RetrievalMethod):
        self.RetrievalMethod = RetrievalMethod
    def add_RetrievalMethod(self, value):
        self.RetrievalMethod.append(value)
    def insert_RetrievalMethod_at(self, index, value):
        self.RetrievalMethod.insert(index, value)
    def replace_RetrievalMethod_at(self, index, value):
        self.RetrievalMethod[index] = value
    def get_X509Data(self):
        return self.X509Data
    def set_X509Data(self, X509Data):
        self.X509Data = X509Data
    def add_X509Data(self, value):
        self.X509Data.append(value)
    def insert_X509Data_at(self, index, value):
        self.X509Data.insert(index, value)
    def replace_X509Data_at(self, index, value):
        self.X509Data[index] = value
    def get_PGPData(self):
        return self.PGPData
    def set_PGPData(self, PGPData):
        self.PGPData = PGPData
    def add_PGPData(self, value):
        self.PGPData.append(value)
    def insert_PGPData_at(self, index, value):
        self.PGPData.insert(index, value)
    def replace_PGPData_at(self, index, value):
        self.PGPData[index] = value
    def get_SPKIData(self):
        return self.SPKIData
    def set_SPKIData(self, SPKIData):
        self.SPKIData = SPKIData
    def add_SPKIData(self, value):
        self.SPKIData.append(value)
    def insert_SPKIData_at(self, index, value):
        self.SPKIData.insert(index, value)
    def replace_SPKIData_at(self, index, value):
        self.SPKIData[index] = value
    def get_MgmtData(self):
        return self.MgmtData
    def set_MgmtData(self, MgmtData):
        self.MgmtData = MgmtData
    def add_MgmtData(self, value):
        self.MgmtData.append(value)
    def insert_MgmtData_at(self, index, value):
        self.MgmtData.insert(index, value)
    def replace_MgmtData_at(self, index, value):
        self.MgmtData[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.KeyName or
            self.KeyValue or
            self.RetrievalMethod or
            self.X509Data or
            self.PGPData or
            self.SPKIData or
            self.MgmtData or
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='KeyInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'KeyInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='KeyInfoType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='KeyInfoType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for KeyName_ in self.KeyName:
            namespaceprefix_ = self.KeyName_nsprefix_ + ':' if (UseCapturedNS_ and self.KeyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKeyName>%s</%sKeyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(KeyName_), input_name='KeyName')), namespaceprefix_ , eol_))
        for KeyValue_ in self.KeyValue:
            namespaceprefix_ = self.KeyValue_nsprefix_ + ':' if (UseCapturedNS_ and self.KeyValue_nsprefix_) else ''
            KeyValue_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='KeyValue', pretty_print=pretty_print)
        for RetrievalMethod_ in self.RetrievalMethod:
            namespaceprefix_ = self.RetrievalMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.RetrievalMethod_nsprefix_) else ''
            RetrievalMethod_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='RetrievalMethod', pretty_print=pretty_print)
        for X509Data_ in self.X509Data:
            namespaceprefix_ = self.X509Data_nsprefix_ + ':' if (UseCapturedNS_ and self.X509Data_nsprefix_) else ''
            X509Data_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='X509Data', pretty_print=pretty_print)
        for PGPData_ in self.PGPData:
            namespaceprefix_ = self.PGPData_nsprefix_ + ':' if (UseCapturedNS_ and self.PGPData_nsprefix_) else ''
            PGPData_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='PGPData', pretty_print=pretty_print)
        for SPKIData_ in self.SPKIData:
            namespaceprefix_ = self.SPKIData_nsprefix_ + ':' if (UseCapturedNS_ and self.SPKIData_nsprefix_) else ''
            SPKIData_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SPKIData', pretty_print=pretty_print)
        for MgmtData_ in self.MgmtData:
            namespaceprefix_ = self.MgmtData_nsprefix_ + ':' if (UseCapturedNS_ and self.MgmtData_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMgmtData>%s</%sMgmtData>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(MgmtData_), input_name='MgmtData')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'KeyName' and child_.text is not None:
            valuestr_ = child_.text
            valuestr_ = self.gds_parse_string(valuestr_, node, 'KeyName')
            valuestr_ = self.gds_validate_string(valuestr_, node, 'KeyName')
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'KeyName', valuestr_)
            self.content_.append(obj_)
            self.KeyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'KeyValue':
            obj_ = KeyValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'KeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_KeyValue'):
              self.add_KeyValue(obj_.value)
            elif hasattr(self, 'set_KeyValue'):
              self.set_KeyValue(obj_.value)
        elif nodeName_ == 'RetrievalMethod':
            obj_ = RetrievalMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RetrievalMethod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RetrievalMethod'):
              self.add_RetrievalMethod(obj_.value)
            elif hasattr(self, 'set_RetrievalMethod'):
              self.set_RetrievalMethod(obj_.value)
        elif nodeName_ == 'X509Data':
            obj_ = X509DataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'X509Data', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_X509Data'):
              self.add_X509Data(obj_.value)
            elif hasattr(self, 'set_X509Data'):
              self.set_X509Data(obj_.value)
        elif nodeName_ == 'PGPData':
            obj_ = PGPDataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'PGPData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_PGPData'):
              self.add_PGPData(obj_.value)
            elif hasattr(self, 'set_PGPData'):
              self.set_PGPData(obj_.value)
        elif nodeName_ == 'SPKIData':
            obj_ = SPKIDataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'SPKIData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_SPKIData'):
              self.add_SPKIData(obj_.value)
            elif hasattr(self, 'set_SPKIData'):
              self.set_SPKIData(obj_.value)
        elif nodeName_ == 'MgmtData' and child_.text is not None:
            valuestr_ = child_.text
            valuestr_ = self.gds_parse_string(valuestr_, node, 'MgmtData')
            valuestr_ = self.gds_validate_string(valuestr_, node, 'MgmtData')
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'MgmtData', valuestr_)
            self.content_.append(obj_)
            self.MgmtData_nsprefix_ = child_.prefix
        elif nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyInfoType


class KeyValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DSAKeyValue=None, RSAKeyValue=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DSAKeyValue = DSAKeyValue
        self.DSAKeyValue_nsprefix_ = "ds"
        self.RSAKeyValue = RSAKeyValue
        self.RSAKeyValue_nsprefix_ = "ds"
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyValueType.subclass:
            return KeyValueType.subclass(*args_, **kwargs_)
        else:
            return KeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DSAKeyValue(self):
        return self.DSAKeyValue
    def set_DSAKeyValue(self, DSAKeyValue):
        self.DSAKeyValue = DSAKeyValue
    def get_RSAKeyValue(self):
        return self.RSAKeyValue
    def set_RSAKeyValue(self, RSAKeyValue):
        self.RSAKeyValue = RSAKeyValue
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.DSAKeyValue is not None or
            self.RSAKeyValue is not None or
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='KeyValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'KeyValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='KeyValueType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='KeyValueType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='KeyValueType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DSAKeyValue is not None:
            namespaceprefix_ = self.DSAKeyValue_nsprefix_ + ':' if (UseCapturedNS_ and self.DSAKeyValue_nsprefix_) else ''
            self.DSAKeyValue.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='DSAKeyValue', pretty_print=pretty_print)
        if self.RSAKeyValue is not None:
            namespaceprefix_ = self.RSAKeyValue_nsprefix_ + ':' if (UseCapturedNS_ and self.RSAKeyValue_nsprefix_) else ''
            self.RSAKeyValue.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='RSAKeyValue', pretty_print=pretty_print)
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DSAKeyValue':
            obj_ = DSAKeyValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'DSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_DSAKeyValue'):
              self.add_DSAKeyValue(obj_.value)
            elif hasattr(self, 'set_DSAKeyValue'):
              self.set_DSAKeyValue(obj_.value)
        elif nodeName_ == 'RSAKeyValue':
            obj_ = RSAKeyValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RSAKeyValue'):
              self.add_RSAKeyValue(obj_.value)
            elif hasattr(self, 'set_RSAKeyValue'):
              self.set_RSAKeyValue(obj_.value)
        elif nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyValueType


class RetrievalMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, URI=None, Type=None, Transforms=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.URI = _cast(None, URI)
        self.URI_nsprefix_ = None
        self.Type = _cast(None, Type)
        self.Type_nsprefix_ = None
        self.Transforms = Transforms
        self.Transforms_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RetrievalMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RetrievalMethodType.subclass:
            return RetrievalMethodType.subclass(*args_, **kwargs_)
        else:
            return RetrievalMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Transforms(self):
        return self.Transforms
    def set_Transforms(self, Transforms):
        self.Transforms = Transforms
    def get_URI(self):
        return self.URI
    def set_URI(self, URI):
        self.URI = URI
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def has__content(self):
        if (
            self.Transforms is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='RetrievalMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RetrievalMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RetrievalMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RetrievalMethodType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RetrievalMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='RetrievalMethodType'):
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='RetrievalMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            namespaceprefix_ = self.Transforms_nsprefix_ + ':' if (UseCapturedNS_ and self.Transforms_nsprefix_) else ''
            self.Transforms.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Transforms', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
# end class RetrievalMethodType


class X509DataType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, X509IssuerSerial=None, X509SKI=None, X509SubjectName=None, X509Certificate=None, X509CRL=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if X509IssuerSerial is None:
            self.X509IssuerSerial = []
        else:
            self.X509IssuerSerial = X509IssuerSerial
        self.X509IssuerSerial_nsprefix_ = "ds"
        if X509SKI is None:
            self.X509SKI = []
        else:
            self.X509SKI = X509SKI
        self.X509SKI_nsprefix_ = None
        if X509SubjectName is None:
            self.X509SubjectName = []
        else:
            self.X509SubjectName = X509SubjectName
        self.X509SubjectName_nsprefix_ = None
        if X509Certificate is None:
            self.X509Certificate = []
        else:
            self.X509Certificate = X509Certificate
        self.X509Certificate_nsprefix_ = None
        if X509CRL is None:
            self.X509CRL = []
        else:
            self.X509CRL = X509CRL
        self.X509CRL_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_X509IssuerSerial(self):
        return self.X509IssuerSerial
    def set_X509IssuerSerial(self, X509IssuerSerial):
        self.X509IssuerSerial = X509IssuerSerial
    def add_X509IssuerSerial(self, value):
        self.X509IssuerSerial.append(value)
    def insert_X509IssuerSerial_at(self, index, value):
        self.X509IssuerSerial.insert(index, value)
    def replace_X509IssuerSerial_at(self, index, value):
        self.X509IssuerSerial[index] = value
    def get_X509SKI(self):
        return self.X509SKI
    def set_X509SKI(self, X509SKI):
        self.X509SKI = X509SKI
    def add_X509SKI(self, value):
        self.X509SKI.append(value)
    def insert_X509SKI_at(self, index, value):
        self.X509SKI.insert(index, value)
    def replace_X509SKI_at(self, index, value):
        self.X509SKI[index] = value
    def get_X509SubjectName(self):
        return self.X509SubjectName
    def set_X509SubjectName(self, X509SubjectName):
        self.X509SubjectName = X509SubjectName
    def add_X509SubjectName(self, value):
        self.X509SubjectName.append(value)
    def insert_X509SubjectName_at(self, index, value):
        self.X509SubjectName.insert(index, value)
    def replace_X509SubjectName_at(self, index, value):
        self.X509SubjectName[index] = value
    def get_X509Certificate(self):
        return self.X509Certificate
    def set_X509Certificate(self, X509Certificate):
        self.X509Certificate = X509Certificate
    def add_X509Certificate(self, value):
        self.X509Certificate.append(value)
    def insert_X509Certificate_at(self, index, value):
        self.X509Certificate.insert(index, value)
    def replace_X509Certificate_at(self, index, value):
        self.X509Certificate[index] = value
    def get_X509CRL(self):
        return self.X509CRL
    def set_X509CRL(self, X509CRL):
        self.X509CRL = X509CRL
    def add_X509CRL(self, value):
        self.X509CRL.append(value)
    def insert_X509CRL_at(self, index, value):
        self.X509CRL.insert(index, value)
    def replace_X509CRL_at(self, index, value):
        self.X509CRL[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def has__content(self):
        if (
            self.X509IssuerSerial or
            self.X509SKI or
            self.X509SubjectName or
            self.X509Certificate or
            self.X509CRL or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='X509DataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'X509DataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='X509DataType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='X509DataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='X509DataType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='X509DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for X509IssuerSerial_ in self.X509IssuerSerial:
            namespaceprefix_ = self.X509IssuerSerial_nsprefix_ + ':' if (UseCapturedNS_ and self.X509IssuerSerial_nsprefix_) else ''
            X509IssuerSerial_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='X509IssuerSerial', pretty_print=pretty_print)
        for X509SKI_ in self.X509SKI:
            namespaceprefix_ = self.X509SKI_nsprefix_ + ':' if (UseCapturedNS_ and self.X509SKI_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SKI>%s</%sX509SKI>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(X509SKI_), input_name='X509SKI')), namespaceprefix_ , eol_))
        for X509SubjectName_ in self.X509SubjectName:
            namespaceprefix_ = self.X509SubjectName_nsprefix_ + ':' if (UseCapturedNS_ and self.X509SubjectName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SubjectName>%s</%sX509SubjectName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(X509SubjectName_), input_name='X509SubjectName')), namespaceprefix_ , eol_))
        for X509Certificate_ in self.X509Certificate:
            namespaceprefix_ = self.X509Certificate_nsprefix_ + ':' if (UseCapturedNS_ and self.X509Certificate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509Certificate>%s</%sX509Certificate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(X509Certificate_), input_name='X509Certificate')), namespaceprefix_ , eol_))
        for X509CRL_ in self.X509CRL:
            namespaceprefix_ = self.X509CRL_nsprefix_ + ':' if (UseCapturedNS_ and self.X509CRL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509CRL>%s</%sX509CRL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(X509CRL_), input_name='X509CRL')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'X509IssuerSerial':
            obj_ = X509IssuerSerialType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.X509IssuerSerial.append(obj_)
            obj_.original_tagname_ = 'X509IssuerSerial'
        elif nodeName_ == 'X509SKI':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509SKI')
            value_ = self.gds_validate_string(value_, node, 'X509SKI')
            self.X509SKI.append(value_)
            self.X509SKI_nsprefix_ = child_.prefix
        elif nodeName_ == 'X509SubjectName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509SubjectName')
            value_ = self.gds_validate_string(value_, node, 'X509SubjectName')
            self.X509SubjectName.append(value_)
            self.X509SubjectName_nsprefix_ = child_.prefix
        elif nodeName_ == 'X509Certificate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509Certificate')
            value_ = self.gds_validate_string(value_, node, 'X509Certificate')
            self.X509Certificate.append(value_)
            self.X509Certificate_nsprefix_ = child_.prefix
        elif nodeName_ == 'X509CRL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509CRL')
            value_ = self.gds_validate_string(value_, node, 'X509CRL')
            self.X509CRL.append(value_)
            self.X509CRL_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'X509DataType')
            self.set_anytypeobjs_(content_)
# end class X509DataType


class X509IssuerSerialType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, X509IssuerName=None, X509SerialNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.X509IssuerName = X509IssuerName
        self.X509IssuerName_nsprefix_ = None
        self.X509SerialNumber = X509SerialNumber
        self.X509SerialNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509IssuerSerialType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509IssuerSerialType.subclass:
            return X509IssuerSerialType.subclass(*args_, **kwargs_)
        else:
            return X509IssuerSerialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_X509IssuerName(self):
        return self.X509IssuerName
    def set_X509IssuerName(self, X509IssuerName):
        self.X509IssuerName = X509IssuerName
    def get_X509SerialNumber(self):
        return self.X509SerialNumber
    def set_X509SerialNumber(self, X509SerialNumber):
        self.X509SerialNumber = X509SerialNumber
    def has__content(self):
        if (
            self.X509IssuerName is not None or
            self.X509SerialNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='X509IssuerSerialType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509IssuerSerialType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'X509IssuerSerialType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='X509IssuerSerialType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='X509IssuerSerialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='X509IssuerSerialType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='X509IssuerSerialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509IssuerName is not None:
            namespaceprefix_ = self.X509IssuerName_nsprefix_ + ':' if (UseCapturedNS_ and self.X509IssuerName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509IssuerName>%s</%sX509IssuerName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.X509IssuerName), input_name='X509IssuerName')), namespaceprefix_ , eol_))
        if self.X509SerialNumber is not None:
            namespaceprefix_ = self.X509SerialNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.X509SerialNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SerialNumber>%s</%sX509SerialNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.X509SerialNumber), input_name='X509SerialNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'X509IssuerName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509IssuerName')
            value_ = self.gds_validate_string(value_, node, 'X509IssuerName')
            self.X509IssuerName = value_
            self.X509IssuerName_nsprefix_ = child_.prefix
        elif nodeName_ == 'X509SerialNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509SerialNumber')
            value_ = self.gds_validate_string(value_, node, 'X509SerialNumber')
            self.X509SerialNumber = value_
            self.X509SerialNumber_nsprefix_ = child_.prefix
# end class X509IssuerSerialType


class PGPDataType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PGPKeyID=None, PGPKeyPacket=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PGPKeyID = PGPKeyID
        self.PGPKeyID_nsprefix_ = None
        self.PGPKeyPacket = PGPKeyPacket
        self.PGPKeyPacket_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PGPDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PGPDataType.subclass:
            return PGPDataType.subclass(*args_, **kwargs_)
        else:
            return PGPDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PGPKeyID(self):
        return self.PGPKeyID
    def set_PGPKeyID(self, PGPKeyID):
        self.PGPKeyID = PGPKeyID
    def get_PGPKeyPacket(self):
        return self.PGPKeyPacket
    def set_PGPKeyPacket(self, PGPKeyPacket):
        self.PGPKeyPacket = PGPKeyPacket
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def has__content(self):
        if (
            self.PGPKeyID is not None or
            self.PGPKeyPacket is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='PGPDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PGPDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PGPDataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PGPDataType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PGPDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='PGPDataType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='PGPDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PGPKeyID is not None:
            namespaceprefix_ = self.PGPKeyID_nsprefix_ + ':' if (UseCapturedNS_ and self.PGPKeyID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyID>%s</%sPGPKeyID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyID), input_name='PGPKeyID')), namespaceprefix_ , eol_))
        if self.PGPKeyPacket is not None:
            namespaceprefix_ = self.PGPKeyPacket_nsprefix_ + ':' if (UseCapturedNS_ and self.PGPKeyPacket_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyPacket>%s</%sPGPKeyPacket>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyPacket), input_name='PGPKeyPacket')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PGPKeyID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PGPKeyID')
            value_ = self.gds_validate_string(value_, node, 'PGPKeyID')
            self.PGPKeyID = value_
            self.PGPKeyID_nsprefix_ = child_.prefix
        elif nodeName_ == 'PGPKeyPacket':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PGPKeyPacket')
            value_ = self.gds_validate_string(value_, node, 'PGPKeyPacket')
            self.PGPKeyPacket = value_
            self.PGPKeyPacket_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'PGPDataType')
            self.anytypeobjs_.append(content_)
# end class PGPDataType


class SPKIDataType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SPKISexp=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SPKISexp is None:
            self.SPKISexp = []
        else:
            self.SPKISexp = SPKISexp
        self.SPKISexp_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SPKIDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SPKIDataType.subclass:
            return SPKIDataType.subclass(*args_, **kwargs_)
        else:
            return SPKIDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SPKISexp(self):
        return self.SPKISexp
    def set_SPKISexp(self, SPKISexp):
        self.SPKISexp = SPKISexp
    def add_SPKISexp(self, value):
        self.SPKISexp.append(value)
    def insert_SPKISexp_at(self, index, value):
        self.SPKISexp.insert(index, value)
    def replace_SPKISexp_at(self, index, value):
        self.SPKISexp[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def has__content(self):
        if (
            self.SPKISexp or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SPKIDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SPKIDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SPKIDataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SPKIDataType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SPKIDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SPKIDataType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SPKIDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SPKISexp_ in self.SPKISexp:
            namespaceprefix_ = self.SPKISexp_nsprefix_ + ':' if (UseCapturedNS_ and self.SPKISexp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSPKISexp>%s</%sSPKISexp>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SPKISexp_), input_name='SPKISexp')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SPKISexp':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SPKISexp')
            value_ = self.gds_validate_string(value_, node, 'SPKISexp')
            self.SPKISexp.append(value_)
            self.SPKISexp_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'SPKIDataType')
            self.set_anytypeobjs_(content_)
# end class SPKIDataType


class ObjectType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, MimeType=None, Encoding=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.MimeType = _cast(None, MimeType)
        self.MimeType_nsprefix_ = None
        self.Encoding = _cast(None, Encoding)
        self.Encoding_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObjectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObjectType.subclass:
            return ObjectType.subclass(*args_, **kwargs_)
        else:
            return ObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_MimeType(self):
        return self.MimeType
    def set_MimeType(self, MimeType):
        self.MimeType = MimeType
    def get_Encoding(self):
        return self.Encoding
    def set_Encoding(self, Encoding):
        self.Encoding = Encoding
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='ObjectType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObjectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ObjectType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ObjectType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='ObjectType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            outfile.write(' MimeType=%s' % (quote_attrib(self.MimeType), ))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            outfile.write(' Encoding=%s' % (quote_attrib(self.Encoding), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='ObjectType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('MimeType', node)
        if value is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            self.MimeType = value
        value = find_attr_value_('Encoding', node)
        if value is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            self.Encoding = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class ObjectType


class ManifestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Reference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        self.Reference_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestType.subclass:
            return ManifestType.subclass(*args_, **kwargs_)
        else:
            return ManifestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Reference(self):
        return self.Reference
    def set_Reference(self, Reference):
        self.Reference = Reference
    def add_Reference(self, value):
        self.Reference.append(value)
    def insert_Reference_at(self, index, value):
        self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value):
        self.Reference[index] = value
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def has__content(self):
        if (
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='ManifestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ManifestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ManifestType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ManifestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='ManifestType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='ManifestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Reference_ in self.Reference:
            namespaceprefix_ = self.Reference_nsprefix_ + ':' if (UseCapturedNS_ and self.Reference_nsprefix_) else ''
            Reference_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Reference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Reference':
            obj_ = ReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class ManifestType


class SignaturePropertiesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignatureProperty=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        if SignatureProperty is None:
            self.SignatureProperty = []
        else:
            self.SignatureProperty = SignatureProperty
        self.SignatureProperty_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertiesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertiesType.subclass:
            return SignaturePropertiesType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SignatureProperty(self):
        return self.SignatureProperty
    def set_SignatureProperty(self, SignatureProperty):
        self.SignatureProperty = SignatureProperty
    def add_SignatureProperty(self, value):
        self.SignatureProperty.append(value)
    def insert_SignatureProperty_at(self, index, value):
        self.SignatureProperty.insert(index, value)
    def replace_SignatureProperty_at(self, index, value):
        self.SignatureProperty[index] = value
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def has__content(self):
        if (
            self.SignatureProperty
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignaturePropertiesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertiesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignaturePropertiesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignaturePropertiesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignaturePropertiesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignaturePropertiesType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignaturePropertiesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SignatureProperty_ in self.SignatureProperty:
            namespaceprefix_ = self.SignatureProperty_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureProperty_nsprefix_) else ''
            SignatureProperty_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SignatureProperty', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SignatureProperty':
            obj_ = SignaturePropertyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureProperty.append(obj_)
            obj_.original_tagname_ = 'SignatureProperty'
# end class SignaturePropertiesType


class SignaturePropertyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Target=None, Id=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Target = _cast(None, Target)
        self.Target_nsprefix_ = None
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertyType.subclass:
            return SignaturePropertyType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Target(self):
        return self.Target
    def set_Target(self, Target):
        self.Target = Target
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SignaturePropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignaturePropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignaturePropertyType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignaturePropertyType'):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            outfile.write(' Target=%s' % (quote_attrib(self.Target), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SignaturePropertyType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Target', node)
        if value is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            self.Target = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignaturePropertyType


class DSAKeyValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, P=None, Q=None, G=None, Y=None, J=None, Seed=None, PgenCounter=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.P = P
        self.validate_CryptoBinary(self.P)
        self.P_nsprefix_ = "ds"
        self.Q = Q
        self.validate_CryptoBinary(self.Q)
        self.Q_nsprefix_ = "ds"
        self.G = G
        self.validate_CryptoBinary(self.G)
        self.G_nsprefix_ = "ds"
        self.Y = Y
        self.validate_CryptoBinary(self.Y)
        self.Y_nsprefix_ = "ds"
        self.J = J
        self.validate_CryptoBinary(self.J)
        self.J_nsprefix_ = "ds"
        self.Seed = Seed
        self.validate_CryptoBinary(self.Seed)
        self.Seed_nsprefix_ = "ds"
        self.PgenCounter = PgenCounter
        self.validate_CryptoBinary(self.PgenCounter)
        self.PgenCounter_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DSAKeyValueType.subclass:
            return DSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return DSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_P(self):
        return self.P
    def set_P(self, P):
        self.P = P
    def get_Q(self):
        return self.Q
    def set_Q(self, Q):
        self.Q = Q
    def get_G(self):
        return self.G
    def set_G(self, G):
        self.G = G
    def get_Y(self):
        return self.Y
    def set_Y(self, Y):
        self.Y = Y
    def get_J(self):
        return self.J
    def set_J(self, J):
        self.J = J
    def get_Seed(self):
        return self.Seed
    def set_Seed(self, Seed):
        self.Seed = Seed
    def get_PgenCounter(self):
        return self.PgenCounter
    def set_PgenCounter(self, PgenCounter):
        self.PgenCounter = PgenCounter
    def validate_CryptoBinary(self, value):
        result = True
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def has__content(self):
        if (
            self.P is not None or
            self.Q is not None or
            self.G is not None or
            self.Y is not None or
            self.J is not None or
            self.Seed is not None or
            self.PgenCounter is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='DSAKeyValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DSAKeyValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DSAKeyValueType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='DSAKeyValueType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='DSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.P is not None:
            namespaceprefix_ = self.P_nsprefix_ + ':' if (UseCapturedNS_ and self.P_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sP>%s</%sP>%s' % (namespaceprefix_ , self.gds_format_base64(self.P, input_name='P'), namespaceprefix_ , eol_))
        if self.Q is not None:
            namespaceprefix_ = self.Q_nsprefix_ + ':' if (UseCapturedNS_ and self.Q_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQ>%s</%sQ>%s' % (namespaceprefix_ , self.gds_format_base64(self.Q, input_name='Q'), namespaceprefix_ , eol_))
        if self.G is not None:
            namespaceprefix_ = self.G_nsprefix_ + ':' if (UseCapturedNS_ and self.G_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sG>%s</%sG>%s' % (namespaceprefix_ , self.gds_format_base64(self.G, input_name='G'), namespaceprefix_ , eol_))
        if self.Y is not None:
            namespaceprefix_ = self.Y_nsprefix_ + ':' if (UseCapturedNS_ and self.Y_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sY>%s</%sY>%s' % (namespaceprefix_ , self.gds_format_base64(self.Y, input_name='Y'), namespaceprefix_ , eol_))
        if self.J is not None:
            namespaceprefix_ = self.J_nsprefix_ + ':' if (UseCapturedNS_ and self.J_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJ>%s</%sJ>%s' % (namespaceprefix_ , self.gds_format_base64(self.J, input_name='J'), namespaceprefix_ , eol_))
        if self.Seed is not None:
            namespaceprefix_ = self.Seed_nsprefix_ + ':' if (UseCapturedNS_ and self.Seed_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeed>%s</%sSeed>%s' % (namespaceprefix_ , self.gds_format_base64(self.Seed, input_name='Seed'), namespaceprefix_ , eol_))
        if self.PgenCounter is not None:
            namespaceprefix_ = self.PgenCounter_nsprefix_ + ':' if (UseCapturedNS_ and self.PgenCounter_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPgenCounter>%s</%sPgenCounter>%s' % (namespaceprefix_ , self.gds_format_base64(self.PgenCounter, input_name='PgenCounter'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'P':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'P')
            else:
                bval_ = None
            self.P = bval_
            self.P_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.P)
        elif nodeName_ == 'Q':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Q')
            else:
                bval_ = None
            self.Q = bval_
            self.Q_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Q)
        elif nodeName_ == 'G':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'G')
            else:
                bval_ = None
            self.G = bval_
            self.G_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.G)
        elif nodeName_ == 'Y':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Y')
            else:
                bval_ = None
            self.Y = bval_
            self.Y_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Y)
        elif nodeName_ == 'J':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'J')
            else:
                bval_ = None
            self.J = bval_
            self.J_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.J)
        elif nodeName_ == 'Seed':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Seed')
            else:
                bval_ = None
            self.Seed = bval_
            self.Seed_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Seed)
        elif nodeName_ == 'PgenCounter':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'PgenCounter')
            else:
                bval_ = None
            self.PgenCounter = bval_
            self.PgenCounter_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.PgenCounter)
# end class DSAKeyValueType


class RSAKeyValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Modulus=None, Exponent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Modulus = Modulus
        self.validate_CryptoBinary(self.Modulus)
        self.Modulus_nsprefix_ = "ds"
        self.Exponent = Exponent
        self.validate_CryptoBinary(self.Exponent)
        self.Exponent_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RSAKeyValueType.subclass:
            return RSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return RSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Modulus(self):
        return self.Modulus
    def set_Modulus(self, Modulus):
        self.Modulus = Modulus
    def get_Exponent(self):
        return self.Exponent
    def set_Exponent(self, Exponent):
        self.Exponent = Exponent
    def validate_CryptoBinary(self, value):
        result = True
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def has__content(self):
        if (
            self.Modulus is not None or
            self.Exponent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='RSAKeyValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RSAKeyValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RSAKeyValueType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='RSAKeyValueType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='RSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Modulus is not None:
            namespaceprefix_ = self.Modulus_nsprefix_ + ':' if (UseCapturedNS_ and self.Modulus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModulus>%s</%sModulus>%s' % (namespaceprefix_ , self.gds_format_base64(self.Modulus, input_name='Modulus'), namespaceprefix_ , eol_))
        if self.Exponent is not None:
            namespaceprefix_ = self.Exponent_nsprefix_ + ':' if (UseCapturedNS_ and self.Exponent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExponent>%s</%sExponent>%s' % (namespaceprefix_ , self.gds_format_base64(self.Exponent, input_name='Exponent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Modulus':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Modulus')
            else:
                bval_ = None
            self.Modulus = bval_
            self.Modulus_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Modulus)
        elif nodeName_ == 'Exponent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Exponent')
            else:
                bval_ = None
            self.Exponent = bval_
            self.Exponent_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Exponent)
# end class RSAKeyValueType


class DigestValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DigestValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DigestValueType.subclass:
            return DigestValueType.subclass(*args_, **kwargs_)
        else:
            return DigestValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DigestValueType_impl(self, value):
        result = True
        # Validate type DigestValueType_impl, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='DigestValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DigestValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DigestValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DigestValueType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DigestValueType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='DigestValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class DigestValueType


#
# End data representation classes.
#


GDSClassesMapping = {
    'CanonicalizationMethod': CanonicalizationMethodType,
    'DSAKeyValue': DSAKeyValueType,
    'DigestMethod': DigestMethodType,
    'DigestValue': DigestValueType,
    'KeyInfo': KeyInfoType,
    'KeyValue': KeyValueType,
    'Manifest': ManifestType,
    'Object': ObjectType,
    'PGPData': PGPDataType,
    'RSAKeyValue': RSAKeyValueType,
    'Reference': ReferenceType,
    'RetrievalMethod': RetrievalMethodType,
    'SPKIData': SPKIDataType,
    'Signature': SignatureType,
    'SignatureMethod': SignatureMethodType,
    'SignatureProperties': SignaturePropertiesType,
    'SignatureProperty': SignaturePropertyType,
    'SignatureValue': SignatureValueType,
    'SignedInfo': SignedInfoType,
    'Transform': TransformType,
    'Transforms': TransformsType,
    'X509Data': X509DataType,
    'definition': DefinitionType,
    'deprecated_info': DeprecatedInfoType,
    'element_mapping': ElementMapType,
    'notes': NotesType,
    'object': ObjectType2,
    'state': StateType,
    'test': TestType,
    'variable': VariableType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'oval_definitions'
        rootClass = oval_definitions
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'oval_definitions'
        rootClass = oval_definitions
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'oval_definitions'
        rootClass = oval_definitions
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'oval_definitions'
        rootClass = oval_definitions
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from oval_core_models import *\n\n')
        sys.stdout.write('import oval_core_models as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
    "{http://oval.mitre.org/XMLSchema/oval-definitions-5}ObjectType": "ObjectType2",
    "{http://oval.mitre.org/XMLSchema/oval-definitions-5}ReferenceType": "ReferenceType1",
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {'http://oval.mitre.org/XMLSchema/oval-common-5': [('CheckEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('ClassEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('SimpleDatatypeEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('ComplexDatatypeEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('DatatypeEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('ExistenceEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('FamilyEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('MessageLevelEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('OperationEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('OperatorEnumeration',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('DefinitionIDPattern',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('ObjectIDPattern',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('StateIDPattern',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('TestIDPattern',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('VariableIDPattern',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('ItemIDPattern',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('SchemaVersionPattern',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('EmptyStringType',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('NonEmptyStringType',
                                                    'oval-common-schema.xsd',
                                                    'ST'),
                                                   ('ElementMapType',
                                                    'oval-common-schema.xsd',
                                                    'CT'),
                                                   ('ElementMapItemType',
                                                    'oval-common-schema.xsd',
                                                    'CT'),
                                                   ('DeprecatedInfoType',
                                                    'oval-common-schema.xsd',
                                                    'CT'),
                                                   ('GeneratorType',
                                                    'oval-common-schema.xsd',
                                                    'CT'),
                                                   ('SchemaVersionType',
                                                    'oval-common-schema.xsd',
                                                    'CT'),
                                                   ('MessageType',
                                                    'oval-common-schema.xsd',
                                                    'CT'),
                                                   ('NotesType',
                                                    'oval-common-schema.xsd',
                                                    'CT')],
 'http://oval.mitre.org/XMLSchema/oval-definitions-5': [('ArithmeticEnumeration',
                                                         'oval-definitions-schema.xsd',
                                                         'ST'),
                                                        ('DateTimeFormatEnumeration',
                                                         'oval-definitions-schema.xsd',
                                                         'ST'),
                                                        ('FilterActionEnumeration',
                                                         'oval-definitions-schema.xsd',
                                                         'ST'),
                                                        ('SetOperatorEnumeration',
                                                         'oval-definitions-schema.xsd',
                                                         'ST'),
                                                        ('DefinitionsType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('DefinitionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('MetadataType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('AffectedType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('ReferenceType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('CriteriaType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('CriterionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('ExtendDefinitionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('TestsType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('TestType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('ObjectRefType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('StateRefType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('ObjectsType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('ObjectType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('StatesType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('StateType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('VariablesType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('VariableType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('PossibleValueType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('PossibleRestrictionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('RestrictionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('ValueType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('LiteralComponentType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('ObjectComponentType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('VariableComponentType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('ArithmeticFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('BeginFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('ConcatFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EndFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EscapeRegexFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('SplitFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('SubstringFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('TimeDifferenceFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('RegexCaptureFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('UniqueFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('CountFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('GlobToRegexFunctionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntitySimpleBaseType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityComplexBaseType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectIPAddressType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectIPAddressStringType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectAnySimpleType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectBinaryType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectBoolType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectFloatType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectIntType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectStringType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectVersionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectRecordType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityObjectFieldType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateSimpleBaseType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateComplexBaseType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateIPAddressType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateIPAddressStringType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateAnySimpleType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateBinaryType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateBoolType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateFloatType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateIntType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateEVRStringType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateDebianEVRStringType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateVersionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateFileSetRevisionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateIOSVersionType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateStringType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateRecordType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT'),
                                                        ('EntityStateFieldType',
                                                         'oval-definitions-schema.xsd',
                                                         'CT')],
 'http://www.w3.org/2000/09/xmldsig#': [('CryptoBinary',
                                         'xmldsig-core-schema.xsd',
                                         'ST'),
                                        ('DigestValueType',
                                         'xmldsig-core-schema.xsd',
                                         'ST'),
                                        ('HMACOutputLengthType',
                                         'xmldsig-core-schema.xsd',
                                         'ST'),
                                        ('SignatureType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignatureValueType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignedInfoType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('CanonicalizationMethodType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignatureMethodType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('ReferenceType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('TransformsType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('TransformType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('DigestMethodType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('KeyInfoType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('KeyValueType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('RetrievalMethodType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('X509DataType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('X509IssuerSerialType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('PGPDataType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SPKIDataType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('ObjectType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('ManifestType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignaturePropertiesType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignaturePropertyType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('DSAKeyValueType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('RSAKeyValueType',
                                         'xmldsig-core-schema.xsd',
                                         'CT')]}

__all__ = [
    "AffectedType",
    "ArithmeticFunctionType",
    "BeginFunctionType",
    "CanonicalizationMethodType",
    "ConcatFunctionType",
    "CountFunctionType",
    "CriteriaType",
    "CriterionType",
    "DSAKeyValueType",
    "DefinitionType",
    "DefinitionsType",
    "DeprecatedInfoType",
    "DigestMethodType",
    "DigestValueType",
    "ElementMapItemType",
    "ElementMapType",
    "EndFunctionType",
    "EntityComplexBaseType",
    "EntityObjectAnySimpleType",
    "EntityObjectBinaryType",
    "EntityObjectBoolType",
    "EntityObjectFieldType",
    "EntityObjectFloatType",
    "EntityObjectIPAddressStringType",
    "EntityObjectIPAddressType",
    "EntityObjectIntType",
    "EntityObjectRecordType",
    "EntityObjectStringType",
    "EntityObjectVersionType",
    "EntitySimpleBaseType",
    "EntityStateAnySimpleType",
    "EntityStateBinaryType",
    "EntityStateBoolType",
    "EntityStateComplexBaseType",
    "EntityStateDebianEVRStringType",
    "EntityStateEVRStringType",
    "EntityStateFieldType",
    "EntityStateFileSetRevisionType",
    "EntityStateFloatType",
    "EntityStateIOSVersionType",
    "EntityStateIPAddressStringType",
    "EntityStateIPAddressType",
    "EntityStateIntType",
    "EntityStateRecordType",
    "EntityStateSimpleBaseType",
    "EntityStateStringType",
    "EntityStateVersionType",
    "EscapeRegexFunctionType",
    "ExtendDefinitionType",
    "GeneratorType",
    "GlobToRegexFunctionType",
    "KeyInfoType",
    "KeyValueType",
    "LiteralComponentType",
    "ManifestType",
    "MessageType",
    "MetadataType",
    "NotesType",
    "ObjectComponentType",
    "ObjectRefType",
    "ObjectType",
    "ObjectType2",
    "ObjectsType",
    "PGPDataType",
    "PossibleRestrictionType",
    "PossibleValueType",
    "RSAKeyValueType",
    "ReferenceType",
    "ReferenceType1",
    "RegexCaptureFunctionType",
    "RestrictionType",
    "RetrievalMethodType",
    "SPKIDataType",
    "SchemaVersionType",
    "SignatureMethodType",
    "SignaturePropertiesType",
    "SignaturePropertyType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "SplitFunctionType",
    "StateRefType",
    "StateType",
    "StatesType",
    "SubstringFunctionType",
    "TestType",
    "TestsType",
    "TimeDifferenceFunctionType",
    "TransformType",
    "TransformsType",
    "UniqueFunctionType",
    "ValueType",
    "VariableComponentType",
    "VariableType",
    "VariablesType",
    "X509DataType",
    "X509IssuerSerialType",
    "constant_variable",
    "external_variable",
    "filter",
    "local_variable",
    "oval_definitions",
    "set_"
]
